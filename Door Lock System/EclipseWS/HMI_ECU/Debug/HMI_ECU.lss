
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  00003d5c  00003df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  00800140  00800140  00003ed0  2**0
                  ALLOC
  3 .debug_aranges 000002d0  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000480  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000319f  00000000  00000000  00004620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001548  00000000  00000000  000077bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f5b  00000000  00000000  00008d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  0000bc64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000962  00000000  00000000  0000c024  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000c986  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 00015245  00000000  00000000  0000d154  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00022399  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_4>
      14:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_9>
      28:	0c 94 d1 06 	jmp	0xda2	; 0xda2 <__vector_10>
      2c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 13 	call	0x2734	; 0x2734 <main>
      8a:	0c 94 ac 1e 	jmp	0x3d58	; 0x3d58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 30 1e 	jmp	0x3c60	; 0x3c60 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 4c 1e 	jmp	0x3c98	; 0x3c98 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_init>:
 * @brief  Function to Initialize the UART by the given settings.
 * @param  Constant pointer to the Settings data.
 * @return void.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <UART_init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	9c 83       	std	Y+4, r25	; 0x04
     b54:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     b56:	1a 82       	std	Y+2, r1	; 0x02
     b58:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     b5a:	eb e2       	ldi	r30, 0x2B	; 43
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 For bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	88 e1       	ldi	r24, 0x18	; 24
     b68:	80 83       	st	Z, r24
	 * UPM1:0  parity bit Mode
	 * USBS    stop bit select
	 * UCSZ1:0 bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity   << UPM0) |\
     b6a:	a0 e4       	ldi	r26, 0x40	; 64
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb 81       	ldd	r30, Y+3	; 0x03
     b70:	fc 81       	ldd	r31, Y+4	; 0x04
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	88 2f       	mov	r24, r24
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	82 95       	swap	r24
     b7a:	92 95       	swap	r25
     b7c:	90 7f       	andi	r25, 0xF0	; 240
     b7e:	98 27       	eor	r25, r24
     b80:	80 7f       	andi	r24, 0xF0	; 240
     b82:	98 27       	eor	r25, r24
     b84:	28 2f       	mov	r18, r24
     b86:	20 68       	ori	r18, 0x80	; 128
     b88:	eb 81       	ldd	r30, Y+3	; 0x03
     b8a:	fc 81       	ldd	r31, Y+4	; 0x04
     b8c:	82 81       	ldd	r24, Z+2	; 0x02
     b8e:	88 2f       	mov	r24, r24
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	28 2b       	or	r18, r24
     ba0:	eb 81       	ldd	r30, Y+3	; 0x03
     ba2:	fc 81       	ldd	r31, Y+4	; 0x04
     ba4:	80 81       	ld	r24, Z
     ba6:	88 2f       	mov	r24, r24
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	82 2b       	or	r24, r18
     bb0:	8c 93       	st	X, r24
			             (Config_Ptr->stop_bit << USBS) |\
						 (Config_Ptr->bit_data << UCSZ0);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     bb2:	eb 81       	ldd	r30, Y+3	; 0x03
     bb4:	fc 81       	ldd	r31, Y+4	; 0x04
     bb6:	83 81       	ldd	r24, Z+3	; 0x03
     bb8:	94 81       	ldd	r25, Z+4	; 0x04
     bba:	a5 81       	ldd	r26, Z+5	; 0x05
     bbc:	b6 81       	ldd	r27, Z+6	; 0x06
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	aa 1f       	adc	r26, r26
     bd4:	bb 1f       	adc	r27, r27
     bd6:	9c 01       	movw	r18, r24
     bd8:	ad 01       	movw	r20, r26
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	92 e1       	ldi	r25, 0x12	; 18
     bde:	aa e7       	ldi	r26, 0x7A	; 122
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <__udivmodsi4>
     bea:	da 01       	movw	r26, r20
     bec:	c9 01       	movw	r24, r18
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     bf4:	e0 e4       	ldi	r30, 0x40	; 64
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	89 2f       	mov	r24, r25
     bfe:	99 27       	eor	r25, r25
     c00:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     c02:	e9 e2       	ldi	r30, 0x29	; 41
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	89 81       	ldd	r24, Y+1	; 0x01
     c08:	80 83       	st	Z, r24
}
     c0a:	0f 90       	pop	r0
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <UART_sendByte>:
 * @brief  Function to send byte to another UART device.
 * @param  Byte to send.
 * @return void.
 */
void UART_sendByte(const uint8 data)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     c24:	eb e2       	ldi	r30, 0x2B	; 43
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	80 72       	andi	r24, 0x20	; 32
     c30:	90 70       	andi	r25, 0x00	; 0
     c32:	00 97       	sbiw	r24, 0x00	; 0
     c34:	b9 f3       	breq	.-18     	; 0xc24 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     c36:	ec e2       	ldi	r30, 0x2C	; 44
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     c3e:	0f 90       	pop	r0
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	08 95       	ret

00000c46 <UART_receiveByte>:
 * @brief  Function to receive byte from another UART device.
 * @param  void.
 * @return Byte received.
 */
uint8 UART_receiveByte(void)
{
     c46:	df 93       	push	r29
     c48:	cf 93       	push	r28
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	88 23       	and	r24, r24
     c56:	dc f7       	brge	.-10     	; 0xc4e <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     c58:	ec e2       	ldi	r30, 0x2C	; 44
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
}
     c5e:	cf 91       	pop	r28
     c60:	df 91       	pop	r29
     c62:	08 95       	ret

00000c64 <UART_sendString>:
 * @brief  Send the required string through UART to the other UART device.
 * @param  String to send.
 * @return void.
 */
void UART_sendString(const uint8 *Str)
{
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	00 d0       	rcall	.+0      	; 0xc6a <UART_sendString+0x6>
     c6a:	0f 92       	push	r0
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	9b 83       	std	Y+3, r25	; 0x03
     c72:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     c74:	19 82       	std	Y+1, r1	; 0x01
     c76:	0e c0       	rjmp	.+28     	; 0xc94 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	28 2f       	mov	r18, r24
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	fc 01       	movw	r30, r24
     c84:	e2 0f       	add	r30, r18
     c86:	f3 1f       	adc	r31, r19
     c88:	80 81       	ld	r24, Z
     c8a:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		i++;
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	8f 5f       	subi	r24, 0xFF	; 255
     c92:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	fc 01       	movw	r30, r24
     ca0:	e2 0f       	add	r30, r18
     ca2:	f3 1f       	adc	r31, r19
     ca4:	80 81       	ld	r24, Z
     ca6:	88 23       	and	r24, r24
     ca8:	39 f7       	brne	.-50     	; 0xc78 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     caa:	0f 90       	pop	r0
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	cf 91       	pop	r28
     cb2:	df 91       	pop	r29
     cb4:	08 95       	ret

00000cb6 <UART_receiveString>:
 * @brief  Receive the required string until the '#' symbol through UART from the other UART device.
 * @param  String to receive.
 * @return void.
 */
void UART_receiveString(uint8 *Str)
{
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	df 93       	push	r29
     cbc:	cf 93       	push	r28
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <UART_receiveString+0xa>
     cc0:	0f 92       	push	r0
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	9b 83       	std	Y+3, r25	; 0x03
     cc8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     cca:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	8c 01       	movw	r16, r24
     cd8:	02 0f       	add	r16, r18
     cda:	13 1f       	adc	r17, r19
     cdc:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
     ce0:	f8 01       	movw	r30, r16
     ce2:	80 83       	st	Z, r24
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	9b 81       	ldd	r25, Y+3	; 0x03
     cf6:	8c 01       	movw	r16, r24
     cf8:	02 0f       	add	r16, r18
     cfa:	13 1f       	adc	r17, r19
     cfc:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
     d00:	f8 01       	movw	r30, r16
     d02:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	9b 81       	ldd	r25, Y+3	; 0x03
     d0e:	fc 01       	movw	r30, r24
     d10:	e2 0f       	add	r30, r18
     d12:	f3 1f       	adc	r31, r19
     d14:	80 81       	ld	r24, Z
     d16:	83 32       	cpi	r24, 0x23	; 35
     d18:	31 f7       	brne	.-52     	; 0xce6 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	9b 81       	ldd	r25, Y+3	; 0x03
     d24:	fc 01       	movw	r30, r24
     d26:	e2 0f       	add	r30, r18
     d28:	f3 1f       	adc	r31, r19
     d2a:	10 82       	st	Z, r1
}
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	cf 91       	pop	r28
     d34:	df 91       	pop	r29
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR For Timer0 in Normal Mode */
ISR(TIMER0_OVF_vect)
{
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
     d58:	bf 93       	push	r27
     d5a:	ef 93       	push	r30
     d5c:	ff 93       	push	r31
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
     d66:	80 91 40 01 	lds	r24, 0x0140
     d6a:	90 91 41 01 	lds	r25, 0x0141
     d6e:	00 97       	sbiw	r24, 0x00	; 0
     d70:	29 f0       	breq	.+10     	; 0xd7c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     d72:	e0 91 40 01 	lds	r30, 0x0140
     d76:	f0 91 41 01 	lds	r31, 0x0141
     d7a:	09 95       	icall
	}
}
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	ff 91       	pop	r31
     d82:	ef 91       	pop	r30
     d84:	bf 91       	pop	r27
     d86:	af 91       	pop	r26
     d88:	9f 91       	pop	r25
     d8a:	8f 91       	pop	r24
     d8c:	7f 91       	pop	r23
     d8e:	6f 91       	pop	r22
     d90:	5f 91       	pop	r21
     d92:	4f 91       	pop	r20
     d94:	3f 91       	pop	r19
     d96:	2f 91       	pop	r18
     d98:	0f 90       	pop	r0
     d9a:	0f be       	out	0x3f, r0	; 63
     d9c:	0f 90       	pop	r0
     d9e:	1f 90       	pop	r1
     da0:	18 95       	reti

00000da2 <__vector_10>:

/* ISR For Timer0 in CTC Mode */
ISR(TIMER0_COMP_vect)
{
     da2:	1f 92       	push	r1
     da4:	0f 92       	push	r0
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	0f 92       	push	r0
     daa:	11 24       	eor	r1, r1
     dac:	2f 93       	push	r18
     dae:	3f 93       	push	r19
     db0:	4f 93       	push	r20
     db2:	5f 93       	push	r21
     db4:	6f 93       	push	r22
     db6:	7f 93       	push	r23
     db8:	8f 93       	push	r24
     dba:	9f 93       	push	r25
     dbc:	af 93       	push	r26
     dbe:	bf 93       	push	r27
     dc0:	ef 93       	push	r30
     dc2:	ff 93       	push	r31
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
     dcc:	80 91 40 01 	lds	r24, 0x0140
     dd0:	90 91 41 01 	lds	r25, 0x0141
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	29 f0       	breq	.+10     	; 0xde2 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     dd8:	e0 91 40 01 	lds	r30, 0x0140
     ddc:	f0 91 41 01 	lds	r31, 0x0141
     de0:	09 95       	icall
	}
}
     de2:	cf 91       	pop	r28
     de4:	df 91       	pop	r29
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_9>:

/* ISR For Timer1 in Normal Mode */
ISR(TIMER1_OVF_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
     e32:	80 91 42 01 	lds	r24, 0x0142
     e36:	90 91 43 01 	lds	r25, 0x0143
     e3a:	00 97       	sbiw	r24, 0x00	; 0
     e3c:	29 f0       	breq	.+10     	; 0xe48 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e3e:	e0 91 42 01 	lds	r30, 0x0142
     e42:	f0 91 43 01 	lds	r31, 0x0143
     e46:	09 95       	icall
	}
}
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	ff 91       	pop	r31
     e4e:	ef 91       	pop	r30
     e50:	bf 91       	pop	r27
     e52:	af 91       	pop	r26
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	7f 91       	pop	r23
     e5a:	6f 91       	pop	r22
     e5c:	5f 91       	pop	r21
     e5e:	4f 91       	pop	r20
     e60:	3f 91       	pop	r19
     e62:	2f 91       	pop	r18
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__vector_7>:

/* ISR For Timer1 in CTC Mode */
ISR(TIMER1_COMPA_vect)
{
     e6e:	1f 92       	push	r1
     e70:	0f 92       	push	r0
     e72:	0f b6       	in	r0, 0x3f	; 63
     e74:	0f 92       	push	r0
     e76:	11 24       	eor	r1, r1
     e78:	2f 93       	push	r18
     e7a:	3f 93       	push	r19
     e7c:	4f 93       	push	r20
     e7e:	5f 93       	push	r21
     e80:	6f 93       	push	r22
     e82:	7f 93       	push	r23
     e84:	8f 93       	push	r24
     e86:	9f 93       	push	r25
     e88:	af 93       	push	r26
     e8a:	bf 93       	push	r27
     e8c:	ef 93       	push	r30
     e8e:	ff 93       	push	r31
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
     e98:	80 91 42 01 	lds	r24, 0x0142
     e9c:	90 91 43 01 	lds	r25, 0x0143
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	29 f0       	breq	.+10     	; 0xeae <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     ea4:	e0 91 42 01 	lds	r30, 0x0142
     ea8:	f0 91 43 01 	lds	r31, 0x0143
     eac:	09 95       	icall
	}
}
     eae:	cf 91       	pop	r28
     eb0:	df 91       	pop	r29
     eb2:	ff 91       	pop	r31
     eb4:	ef 91       	pop	r30
     eb6:	bf 91       	pop	r27
     eb8:	af 91       	pop	r26
     eba:	9f 91       	pop	r25
     ebc:	8f 91       	pop	r24
     ebe:	7f 91       	pop	r23
     ec0:	6f 91       	pop	r22
     ec2:	5f 91       	pop	r21
     ec4:	4f 91       	pop	r20
     ec6:	3f 91       	pop	r19
     ec8:	2f 91       	pop	r18
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_5>:

/* ISR For Timer2 in Normal Mode */
ISR(TIMER2_OVF_vect)
{
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	2f 93       	push	r18
     ee0:	3f 93       	push	r19
     ee2:	4f 93       	push	r20
     ee4:	5f 93       	push	r21
     ee6:	6f 93       	push	r22
     ee8:	7f 93       	push	r23
     eea:	8f 93       	push	r24
     eec:	9f 93       	push	r25
     eee:	af 93       	push	r26
     ef0:	bf 93       	push	r27
     ef2:	ef 93       	push	r30
     ef4:	ff 93       	push	r31
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
     efe:	80 91 44 01 	lds	r24, 0x0144
     f02:	90 91 45 01 	lds	r25, 0x0145
     f06:	00 97       	sbiw	r24, 0x00	; 0
     f08:	29 f0       	breq	.+10     	; 0xf14 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f0a:	e0 91 44 01 	lds	r30, 0x0144
     f0e:	f0 91 45 01 	lds	r31, 0x0145
     f12:	09 95       	icall
	}
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	ff 91       	pop	r31
     f1a:	ef 91       	pop	r30
     f1c:	bf 91       	pop	r27
     f1e:	af 91       	pop	r26
     f20:	9f 91       	pop	r25
     f22:	8f 91       	pop	r24
     f24:	7f 91       	pop	r23
     f26:	6f 91       	pop	r22
     f28:	5f 91       	pop	r21
     f2a:	4f 91       	pop	r20
     f2c:	3f 91       	pop	r19
     f2e:	2f 91       	pop	r18
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_4>:

/* ISR For Timer2 in CTC Mode */
ISR(TIMER2_COMP_vect)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	2f 93       	push	r18
     f46:	3f 93       	push	r19
     f48:	4f 93       	push	r20
     f4a:	5f 93       	push	r21
     f4c:	6f 93       	push	r22
     f4e:	7f 93       	push	r23
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	af 93       	push	r26
     f56:	bf 93       	push	r27
     f58:	ef 93       	push	r30
     f5a:	ff 93       	push	r31
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
     f64:	80 91 44 01 	lds	r24, 0x0144
     f68:	90 91 45 01 	lds	r25, 0x0145
     f6c:	00 97       	sbiw	r24, 0x00	; 0
     f6e:	29 f0       	breq	.+10     	; 0xf7a <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     f70:	e0 91 44 01 	lds	r30, 0x0144
     f74:	f0 91 45 01 	lds	r31, 0x0145
     f78:	09 95       	icall
	}
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	ff 91       	pop	r31
     f80:	ef 91       	pop	r30
     f82:	bf 91       	pop	r27
     f84:	af 91       	pop	r26
     f86:	9f 91       	pop	r25
     f88:	8f 91       	pop	r24
     f8a:	7f 91       	pop	r23
     f8c:	6f 91       	pop	r22
     f8e:	5f 91       	pop	r21
     f90:	4f 91       	pop	r20
     f92:	3f 91       	pop	r19
     f94:	2f 91       	pop	r18
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <Timer_init>:
 * @brief  Function To Initialize the Timer by the Given Settings.
 * @param  Constant pointer to the Settings Data.
 * @return void.
 */
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <Timer_init+0x6>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <Timer_init+0x8>
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	84 81       	ldd	r24, Z+4	; 0x04
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	3c 83       	std	Y+4, r19	; 0x04
     fbc:	2b 83       	std	Y+3, r18	; 0x03
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	91 05       	cpc	r25, r1
     fc6:	09 f4       	brne	.+2      	; 0xfca <Timer_init+0x2a>
     fc8:	48 c0       	rjmp	.+144    	; 0x105a <Timer_init+0xba>
     fca:	2b 81       	ldd	r18, Y+3	; 0x03
     fcc:	3c 81       	ldd	r19, Y+4	; 0x04
     fce:	22 30       	cpi	r18, 0x02	; 2
     fd0:	31 05       	cpc	r19, r1
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <Timer_init+0x36>
     fd4:	83 c0       	rjmp	.+262    	; 0x10dc <Timer_init+0x13c>
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <Timer_init+0x40>
     fde:	ba c0       	rjmp	.+372    	; 0x1154 <Timer_init+0x1b4>
	{
	case TIMER0_ID:

		/* FOC0 = 1 for non-PWM Modes */
		TCCR0 = (1 << FOC0);
     fe0:	e3 e5       	ldi	r30, 0x53	; 83
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 e8       	ldi	r24, 0x80	; 128
     fe6:	80 83       	st	Z, r24

		/* Load the initial value to Timer0 counter */
		TCNT0 = (uint8)Config_Ptr->timer_InitialValue;
     fe8:	a2 e5       	ldi	r26, 0x52	; 82
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e9 81       	ldd	r30, Y+1	; 0x01
     fee:	fa 81       	ldd	r31, Y+2	; 0x02
     ff0:	80 81       	ld	r24, Z
     ff2:	91 81       	ldd	r25, Z+1	; 0x01
     ff4:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
     ff6:	e9 81       	ldd	r30, Y+1	; 0x01
     ff8:	fa 81       	ldd	r31, Y+2	; 0x02
     ffa:	86 81       	ldd	r24, Z+6	; 0x06
     ffc:	88 23       	and	r24, r24
     ffe:	41 f4       	brne	.+16     	; 0x1010 <Timer_init+0x70>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1 << TOIE0);
    1000:	a9 e5       	ldi	r26, 0x59	; 89
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e9 e5       	ldi	r30, 0x59	; 89
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	81 60       	ori	r24, 0x01	; 1
    100c:	8c 93       	st	X, r24
    100e:	1a c0       	rjmp	.+52     	; 0x1044 <Timer_init+0xa4>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    1010:	e9 81       	ldd	r30, Y+1	; 0x01
    1012:	fa 81       	ldd	r31, Y+2	; 0x02
    1014:	86 81       	ldd	r24, Z+6	; 0x06
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	a9 f4       	brne	.+42     	; 0x1044 <Timer_init+0xa4>
		{
			/* Setting Timer0 to CTC */
			TCCR0 |= (1 << WGM01);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	88 60       	ori	r24, 0x08	; 8
    1026:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1 << OCIE0);
    1028:	a9 e5       	ldi	r26, 0x59	; 89
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e9 e5       	ldi	r30, 0x59	; 89
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	82 60       	ori	r24, 0x02	; 2
    1034:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR0 = (uint8)Config_Ptr->timer_compare_MatchValue;
    1036:	ac e5       	ldi	r26, 0x5C	; 92
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e9 81       	ldd	r30, Y+1	; 0x01
    103c:	fa 81       	ldd	r31, Y+2	; 0x02
    103e:	82 81       	ldd	r24, Z+2	; 0x02
    1040:	93 81       	ldd	r25, Z+3	; 0x03
    1042:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer0 */
		TCCR0 |= (Config_Ptr->timer_clock);
    1044:	a3 e5       	ldi	r26, 0x53	; 83
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e3 e5       	ldi	r30, 0x53	; 83
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	90 81       	ld	r25, Z
    104e:	e9 81       	ldd	r30, Y+1	; 0x01
    1050:	fa 81       	ldd	r31, Y+2	; 0x02
    1052:	85 81       	ldd	r24, Z+5	; 0x05
    1054:	89 2b       	or	r24, r25
    1056:	8c 93       	st	X, r24
    1058:	7d c0       	rjmp	.+250    	; 0x1154 <Timer_init+0x1b4>

		break;
	case TIMER1_ID:

		/* FOC1A = 1, FOC1B = 1 for non-PWM Modes */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    105a:	ef e4       	ldi	r30, 0x4F	; 79
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	8c e0       	ldi	r24, 0x0C	; 12
    1060:	80 83       	st	Z, r24
		TCCR1B = 0;
    1062:	ee e4       	ldi	r30, 0x4E	; 78
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	10 82       	st	Z, r1

		/* Load the initial value to Timer1 counter */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1068:	ac e4       	ldi	r26, 0x4C	; 76
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e9 81       	ldd	r30, Y+1	; 0x01
    106e:	fa 81       	ldd	r31, Y+2	; 0x02
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	9c 93       	st	X, r25
    1078:	8e 93       	st	-X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
    107a:	e9 81       	ldd	r30, Y+1	; 0x01
    107c:	fa 81       	ldd	r31, Y+2	; 0x02
    107e:	86 81       	ldd	r24, Z+6	; 0x06
    1080:	88 23       	and	r24, r24
    1082:	41 f4       	brne	.+16     	; 0x1094 <Timer_init+0xf4>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1 << TOIE1);
    1084:	a9 e5       	ldi	r26, 0x59	; 89
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e9 e5       	ldi	r30, 0x59	; 89
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	84 60       	ori	r24, 0x04	; 4
    1090:	8c 93       	st	X, r24
    1092:	19 c0       	rjmp	.+50     	; 0x10c6 <Timer_init+0x126>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	86 81       	ldd	r24, Z+6	; 0x06
    109a:	81 30       	cpi	r24, 0x01	; 1
    109c:	a1 f4       	brne	.+40     	; 0x10c6 <Timer_init+0x126>
		{
			/* Setting CTC Mode */
			TCCR1B = (1 << WGM12);
    109e:	ee e4       	ldi	r30, 0x4E	; 78
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	88 e0       	ldi	r24, 0x08	; 8
    10a4:	80 83       	st	Z, r24

			/* Enable Timer1 Compare Interrupt */
			TIMSK |= (1 << OCIE1A);
    10a6:	a9 e5       	ldi	r26, 0x59	; 89
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e9 e5       	ldi	r30, 0x59	; 89
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	80 61       	ori	r24, 0x10	; 16
    10b2:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    10b4:	aa e4       	ldi	r26, 0x4A	; 74
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	82 81       	ldd	r24, Z+2	; 0x02
    10be:	93 81       	ldd	r25, Z+3	; 0x03
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
		{
			/* Do nothing */
		}

		/* Start Timer1 */
		TCCR1B |= (Config_Ptr->timer_clock);
    10c6:	ae e4       	ldi	r26, 0x4E	; 78
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	ee e4       	ldi	r30, 0x4E	; 78
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	90 81       	ld	r25, Z
    10d0:	e9 81       	ldd	r30, Y+1	; 0x01
    10d2:	fa 81       	ldd	r31, Y+2	; 0x02
    10d4:	85 81       	ldd	r24, Z+5	; 0x05
    10d6:	89 2b       	or	r24, r25
    10d8:	8c 93       	st	X, r24
    10da:	3c c0       	rjmp	.+120    	; 0x1154 <Timer_init+0x1b4>

		break;
	case TIMER2_ID:

		/* FOC2 = 1 for non-PWM Modes */
		TCCR2 = (1 << FOC2);
    10dc:	e5 e4       	ldi	r30, 0x45	; 69
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 e8       	ldi	r24, 0x80	; 128
    10e2:	80 83       	st	Z, r24

		/* Load the initial value to Timer2 counter */
		TCNT2 = (uint8)Config_Ptr->timer_InitialValue;
    10e4:	a4 e4       	ldi	r26, 0x44	; 68
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ea:	fa 81       	ldd	r31, Y+2	; 0x02
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
    10f2:	e9 81       	ldd	r30, Y+1	; 0x01
    10f4:	fa 81       	ldd	r31, Y+2	; 0x02
    10f6:	86 81       	ldd	r24, Z+6	; 0x06
    10f8:	88 23       	and	r24, r24
    10fa:	41 f4       	brne	.+16     	; 0x110c <Timer_init+0x16c>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1 << TOIE2);
    10fc:	a9 e5       	ldi	r26, 0x59	; 89
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e9 e5       	ldi	r30, 0x59	; 89
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	80 64       	ori	r24, 0x40	; 64
    1108:	8c 93       	st	X, r24
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <Timer_init+0x1a0>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    110c:	e9 81       	ldd	r30, Y+1	; 0x01
    110e:	fa 81       	ldd	r31, Y+2	; 0x02
    1110:	86 81       	ldd	r24, Z+6	; 0x06
    1112:	81 30       	cpi	r24, 0x01	; 1
    1114:	a9 f4       	brne	.+42     	; 0x1140 <Timer_init+0x1a0>
		{
			/* Setting Timer2 to CTC */
			TCCR2 |= (1 << WGM21);
    1116:	a5 e4       	ldi	r26, 0x45	; 69
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	e5 e4       	ldi	r30, 0x45	; 69
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	88 60       	ori	r24, 0x08	; 8
    1122:	8c 93       	st	X, r24

			/* Enable Timer2 Compare Interrupt */
			TIMSK |= (1 << OCIE2);
    1124:	a9 e5       	ldi	r26, 0x59	; 89
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e9 e5       	ldi	r30, 0x59	; 89
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR2 = (uint8)Config_Ptr->timer_compare_MatchValue;
    1132:	a3 e4       	ldi	r26, 0x43	; 67
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	93 81       	ldd	r25, Z+3	; 0x03
    113e:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer2 */
		TCCR2 |= (Config_Ptr->timer_clock);
    1140:	a5 e4       	ldi	r26, 0x45	; 69
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e5 e4       	ldi	r30, 0x45	; 69
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	90 81       	ld	r25, Z
    114a:	e9 81       	ldd	r30, Y+1	; 0x01
    114c:	fa 81       	ldd	r31, Y+2	; 0x02
    114e:	85 81       	ldd	r24, Z+5	; 0x05
    1150:	89 2b       	or	r24, r25
    1152:	8c 93       	st	X, r24

		break;
	}
}
    1154:	0f 90       	pop	r0
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	08 95       	ret

00001162 <Timer_deInit>:
 * @brief  Function to disable the Timer via Timer_ID.
 * @param  Timer ID.
 * @return void.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    1162:	df 93       	push	r29
    1164:	cf 93       	push	r28
    1166:	00 d0       	rcall	.+0      	; 0x1168 <Timer_deInit+0x6>
    1168:	0f 92       	push	r0
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	89 83       	std	Y+1, r24	; 0x01
	/* Clear all registers contents and Disable Interrupts */
	switch(timer_type)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3b 83       	std	Y+3, r19	; 0x03
    1178:	2a 83       	std	Y+2, r18	; 0x02
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <Timer_deInit+0x56>
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	41 f1       	breq	.+80     	; 0x11de <Timer_deInit+0x7c>
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	a1 f5       	brne	.+104    	; 0x11fe <Timer_deInit+0x9c>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    1196:	e3 e5       	ldi	r30, 0x53	; 83
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	10 82       	st	Z, r1
		TCNT0 = 0;
    119c:	e2 e5       	ldi	r30, 0x52	; 82
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	10 82       	st	Z, r1
		OCR0 = 0;
    11a2:	ec e5       	ldi	r30, 0x5C	; 92
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    11a8:	a9 e5       	ldi	r26, 0x59	; 89
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e9 e5       	ldi	r30, 0x59	; 89
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 7f       	andi	r24, 0xFC	; 252
    11b4:	8c 93       	st	X, r24
    11b6:	23 c0       	rjmp	.+70     	; 0x11fe <Timer_deInit+0x9c>
		break;
	case TIMER1_ID:
		TCCR1A = 0;
    11b8:	ef e4       	ldi	r30, 0x4F	; 79
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	10 82       	st	Z, r1
		TCNT1 = 0;
    11be:	ec e4       	ldi	r30, 0x4C	; 76
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	11 82       	std	Z+1, r1	; 0x01
    11c4:	10 82       	st	Z, r1
		OCR1A = 0;
    11c6:	ea e4       	ldi	r30, 0x4A	; 74
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	11 82       	std	Z+1, r1	; 0x01
    11cc:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    11ce:	a9 e5       	ldi	r26, 0x59	; 89
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e9 e5       	ldi	r30, 0x59	; 89
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	8b 7e       	andi	r24, 0xEB	; 235
    11da:	8c 93       	st	X, r24
    11dc:	10 c0       	rjmp	.+32     	; 0x11fe <Timer_deInit+0x9c>
		break;
	case TIMER2_ID:
		TCCR2 = 0;
    11de:	e5 e4       	ldi	r30, 0x45	; 69
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	10 82       	st	Z, r1
		TCNT2 = 0;
    11e4:	e4 e4       	ldi	r30, 0x44	; 68
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	10 82       	st	Z, r1
		OCR2 = 0;
    11ea:	e3 e4       	ldi	r30, 0x43	; 67
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    11f0:	a9 e5       	ldi	r26, 0x59	; 89
    11f2:	b0 e0       	ldi	r27, 0x00	; 0
    11f4:	e9 e5       	ldi	r30, 0x59	; 89
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	80 81       	ld	r24, Z
    11fa:	8f 73       	andi	r24, 0x3F	; 63
    11fc:	8c 93       	st	X, r24
		break;
	}
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <Timer_setCallBack>:
 * @brief  Function to set the Call Back function address to the required Timer.
 * @param  pointer to Call Back function and Timer Id you want to set The Callback to it.
 * @return void.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <Timer_setCallBack+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <Timer_setCallBack+0x8>
    1212:	0f 92       	push	r0
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	89 83       	std	Y+1, r24	; 0x01
    121c:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3d 83       	std	Y+5, r19	; 0x05
    1226:	2c 83       	std	Y+4, r18	; 0x04
    1228:	8c 81       	ldd	r24, Y+4	; 0x04
    122a:	9d 81       	ldd	r25, Y+5	; 0x05
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	81 f0       	breq	.+32     	; 0x1252 <Timer_setCallBack+0x48>
    1232:	2c 81       	ldd	r18, Y+4	; 0x04
    1234:	3d 81       	ldd	r19, Y+5	; 0x05
    1236:	22 30       	cpi	r18, 0x02	; 2
    1238:	31 05       	cpc	r19, r1
    123a:	91 f0       	breq	.+36     	; 0x1260 <Timer_setCallBack+0x56>
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	9d 81       	ldd	r25, Y+5	; 0x05
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	a1 f4       	brne	.+40     	; 0x126c <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_Timer0 = a_ptr;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	90 93 41 01 	sts	0x0141, r25
    124c:	80 93 40 01 	sts	0x0140, r24
    1250:	0d c0       	rjmp	.+26     	; 0x126c <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_Timer1 = a_ptr;
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	90 93 43 01 	sts	0x0143, r25
    125a:	80 93 42 01 	sts	0x0142, r24
    125e:	06 c0       	rjmp	.+12     	; 0x126c <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_Timer2 = a_ptr;
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	9a 81       	ldd	r25, Y+2	; 0x02
    1264:	90 93 45 01 	sts	0x0145, r25
    1268:	80 93 44 01 	sts	0x0144, r24
		break;
	}
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	0f 90       	pop	r0
    1274:	0f 90       	pop	r0
    1276:	cf 91       	pop	r28
    1278:	df 91       	pop	r29
    127a:	08 95       	ret

0000127c <GPIO_setupPinDirection>:
 *         will not handle the request.
 * @param  Port number, Pin number, Pin Direction.
 * @return void.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    127c:	df 93       	push	r29
    127e:	cf 93       	push	r28
    1280:	00 d0       	rcall	.+0      	; 0x1282 <GPIO_setupPinDirection+0x6>
    1282:	00 d0       	rcall	.+0      	; 0x1284 <GPIO_setupPinDirection+0x8>
    1284:	0f 92       	push	r0
    1286:	cd b7       	in	r28, 0x3d	; 61
    1288:	de b7       	in	r29, 0x3e	; 62
    128a:	89 83       	std	Y+1, r24	; 0x01
    128c:	6a 83       	std	Y+2, r22	; 0x02
    128e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	88 30       	cpi	r24, 0x08	; 8
    1294:	08 f0       	brcs	.+2      	; 0x1298 <GPIO_setupPinDirection+0x1c>
    1296:	d5 c0       	rjmp	.+426    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	08 f0       	brcs	.+2      	; 0x12a0 <GPIO_setupPinDirection+0x24>
    129e:	d1 c0       	rjmp	.+418    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	3d 83       	std	Y+5, r19	; 0x05
    12a8:	2c 83       	std	Y+4, r18	; 0x04
    12aa:	8c 81       	ldd	r24, Y+4	; 0x04
    12ac:	9d 81       	ldd	r25, Y+5	; 0x05
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	91 05       	cpc	r25, r1
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <GPIO_setupPinDirection+0x3a>
    12b4:	43 c0       	rjmp	.+134    	; 0x133c <GPIO_setupPinDirection+0xc0>
    12b6:	2c 81       	ldd	r18, Y+4	; 0x04
    12b8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	2c f4       	brge	.+10     	; 0x12ca <GPIO_setupPinDirection+0x4e>
    12c0:	8c 81       	ldd	r24, Y+4	; 0x04
    12c2:	9d 81       	ldd	r25, Y+5	; 0x05
    12c4:	00 97       	sbiw	r24, 0x00	; 0
    12c6:	71 f0       	breq	.+28     	; 0x12e4 <GPIO_setupPinDirection+0x68>
    12c8:	bc c0       	rjmp	.+376    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
    12ca:	2c 81       	ldd	r18, Y+4	; 0x04
    12cc:	3d 81       	ldd	r19, Y+5	; 0x05
    12ce:	22 30       	cpi	r18, 0x02	; 2
    12d0:	31 05       	cpc	r19, r1
    12d2:	09 f4       	brne	.+2      	; 0x12d6 <GPIO_setupPinDirection+0x5a>
    12d4:	5f c0       	rjmp	.+190    	; 0x1394 <GPIO_setupPinDirection+0x118>
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	9d 81       	ldd	r25, Y+5	; 0x05
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	91 05       	cpc	r25, r1
    12de:	09 f4       	brne	.+2      	; 0x12e2 <GPIO_setupPinDirection+0x66>
    12e0:	85 c0       	rjmp	.+266    	; 0x13ec <GPIO_setupPinDirection+0x170>
    12e2:	af c0       	rjmp	.+350    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	81 30       	cpi	r24, 0x01	; 1
    12e8:	a1 f4       	brne	.+40     	; 0x1312 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    12ea:	aa e3       	ldi	r26, 0x3A	; 58
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	ea e3       	ldi	r30, 0x3A	; 58
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <GPIO_setupPinDirection+0x8c>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <GPIO_setupPinDirection+0x88>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	98 c0       	rjmp	.+304    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1312:	aa e3       	ldi	r26, 0x3A	; 58
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ea e3       	ldi	r30, 0x3A	; 58
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_setupPinDirection+0xb4>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_setupPinDirection+0xb0>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	83 c0       	rjmp	.+262    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	a1 f4       	brne	.+40     	; 0x136a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1342:	a7 e3       	ldi	r26, 0x37	; 55
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e7 e3       	ldi	r30, 0x37	; 55
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_setupPinDirection+0xe4>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_setupPinDirection+0xe0>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	6c c0       	rjmp	.+216    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    136a:	a7 e3       	ldi	r26, 0x37	; 55
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e7 e3       	ldi	r30, 0x37	; 55
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	48 2f       	mov	r20, r24
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 2e       	mov	r0, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_setupPinDirection+0x10c>
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	0a 94       	dec	r0
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_setupPinDirection+0x108>
    138c:	80 95       	com	r24
    138e:	84 23       	and	r24, r20
    1390:	8c 93       	st	X, r24
    1392:	57 c0       	rjmp	.+174    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	a1 f4       	brne	.+40     	; 0x13c2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    139a:	a4 e3       	ldi	r26, 0x34	; 52
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e4 e3       	ldi	r30, 0x34	; 52
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_setupPinDirection+0x13c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_setupPinDirection+0x138>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	40 c0       	rjmp	.+128    	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    13c2:	a4 e3       	ldi	r26, 0x34	; 52
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e4 e3       	ldi	r30, 0x34	; 52
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <GPIO_setupPinDirection+0x164>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <GPIO_setupPinDirection+0x160>
    13e4:	80 95       	com	r24
    13e6:	84 23       	and	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	2b c0       	rjmp	.+86     	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	a1 f4       	brne	.+40     	; 0x141a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    13f2:	a1 e3       	ldi	r26, 0x31	; 49
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e1 e3       	ldi	r30, 0x31	; 49
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_setupPinDirection+0x194>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_setupPinDirection+0x190>
    1414:	84 2b       	or	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    141a:	a1 e3       	ldi	r26, 0x31	; 49
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e1 e3       	ldi	r30, 0x31	; 49
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_setupPinDirection+0x1bc>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_setupPinDirection+0x1b8>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <GPIO_writePin>:
 *         function will enable/disable the internal pull-up resistor.
 * @param  Port Number, Pin number, Pin value.
 * @return void.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_writePin+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <GPIO_writePin+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
    1462:	6a 83       	std	Y+2, r22	; 0x02
    1464:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1466:	8a 81       	ldd	r24, Y+2	; 0x02
    1468:	88 30       	cpi	r24, 0x08	; 8
    146a:	08 f0       	brcs	.+2      	; 0x146e <GPIO_writePin+0x1c>
    146c:	31 c1       	rjmp	.+610    	; 0x16d0 <GPIO_writePin+0x27e>
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	84 30       	cpi	r24, 0x04	; 4
    1472:	08 f0       	brcs	.+2      	; 0x1476 <GPIO_writePin+0x24>
    1474:	2d c1       	rjmp	.+602    	; 0x16d0 <GPIO_writePin+0x27e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	3d 83       	std	Y+5, r19	; 0x05
    147e:	2c 83       	std	Y+4, r18	; 0x04
    1480:	8c 81       	ldd	r24, Y+4	; 0x04
    1482:	9d 81       	ldd	r25, Y+5	; 0x05
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	91 05       	cpc	r25, r1
    1488:	09 f4       	brne	.+2      	; 0x148c <GPIO_writePin+0x3a>
    148a:	5a c0       	rjmp	.+180    	; 0x1540 <GPIO_writePin+0xee>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	2c f4       	brge	.+10     	; 0x14a0 <GPIO_writePin+0x4e>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	71 f0       	breq	.+28     	; 0x14ba <GPIO_writePin+0x68>
    149e:	18 c1       	rjmp	.+560    	; 0x16d0 <GPIO_writePin+0x27e>
    14a0:	2c 81       	ldd	r18, Y+4	; 0x04
    14a2:	3d 81       	ldd	r19, Y+5	; 0x05
    14a4:	22 30       	cpi	r18, 0x02	; 2
    14a6:	31 05       	cpc	r19, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <GPIO_writePin+0x5a>
    14aa:	8d c0       	rjmp	.+282    	; 0x15c6 <GPIO_writePin+0x174>
    14ac:	8c 81       	ldd	r24, Y+4	; 0x04
    14ae:	9d 81       	ldd	r25, Y+5	; 0x05
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <GPIO_writePin+0x66>
    14b6:	ca c0       	rjmp	.+404    	; 0x164c <GPIO_writePin+0x1fa>
    14b8:	0b c1       	rjmp	.+534    	; 0x16d0 <GPIO_writePin+0x27e>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	81 30       	cpi	r24, 0x01	; 1
    14be:	a1 f4       	brne	.+40     	; 0x14e8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    14c0:	ab e3       	ldi	r26, 0x3B	; 59
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	eb e3       	ldi	r30, 0x3B	; 59
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_writePin+0x8c>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_writePin+0x88>
    14e2:	84 2b       	or	r24, r20
    14e4:	8c 93       	st	X, r24
    14e6:	f4 c0       	rjmp	.+488    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	88 23       	and	r24, r24
    14ec:	a9 f4       	brne	.+42     	; 0x1518 <GPIO_writePin+0xc6>
			{
				CLEAR_BIT(PORTA,pin_num);
    14ee:	ab e3       	ldi	r26, 0x3B	; 59
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	eb e3       	ldi	r30, 0x3B	; 59
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	02 2e       	mov	r0, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <GPIO_writePin+0xba>
    1508:	88 0f       	add	r24, r24
    150a:	99 1f       	adc	r25, r25
    150c:	0a 94       	dec	r0
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <GPIO_writePin+0xb6>
    1510:	80 95       	com	r24
    1512:	84 23       	and	r24, r20
    1514:	8c 93       	st	X, r24
    1516:	dc c0       	rjmp	.+440    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTA, pin_num);
    1518:	ab e3       	ldi	r26, 0x3B	; 59
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	eb e3       	ldi	r30, 0x3B	; 59
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	48 2f       	mov	r20, r24
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 2e       	mov	r0, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <GPIO_writePin+0xe4>
    1532:	88 0f       	add	r24, r24
    1534:	99 1f       	adc	r25, r25
    1536:	0a 94       	dec	r0
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <GPIO_writePin+0xe0>
    153a:	84 27       	eor	r24, r20
    153c:	8c 93       	st	X, r24
    153e:	c8 c0       	rjmp	.+400    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	81 30       	cpi	r24, 0x01	; 1
    1544:	a1 f4       	brne	.+40     	; 0x156e <GPIO_writePin+0x11c>
			{
				SET_BIT(PORTB,pin_num);
    1546:	a8 e3       	ldi	r26, 0x38	; 56
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	48 2f       	mov	r20, r24
    1552:	8a 81       	ldd	r24, Y+2	; 0x02
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	02 2e       	mov	r0, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_writePin+0x112>
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	0a 94       	dec	r0
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_writePin+0x10e>
    1568:	84 2b       	or	r24, r20
    156a:	8c 93       	st	X, r24
    156c:	b1 c0       	rjmp	.+354    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	88 23       	and	r24, r24
    1572:	a9 f4       	brne	.+42     	; 0x159e <GPIO_writePin+0x14c>
			{
				CLEAR_BIT(PORTB,pin_num);
    1574:	a8 e3       	ldi	r26, 0x38	; 56
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e8 e3       	ldi	r30, 0x38	; 56
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_writePin+0x140>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_writePin+0x13c>
    1596:	80 95       	com	r24
    1598:	84 23       	and	r24, r20
    159a:	8c 93       	st	X, r24
    159c:	99 c0       	rjmp	.+306    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTB, pin_num);
    159e:	a8 e3       	ldi	r26, 0x38	; 56
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e8 e3       	ldi	r30, 0x38	; 56
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 2e       	mov	r0, r18
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <GPIO_writePin+0x16a>
    15b8:	88 0f       	add	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	0a 94       	dec	r0
    15be:	e2 f7       	brpl	.-8      	; 0x15b8 <GPIO_writePin+0x166>
    15c0:	84 27       	eor	r24, r20
    15c2:	8c 93       	st	X, r24
    15c4:	85 c0       	rjmp	.+266    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15c6:	8b 81       	ldd	r24, Y+3	; 0x03
    15c8:	81 30       	cpi	r24, 0x01	; 1
    15ca:	a1 f4       	brne	.+40     	; 0x15f4 <GPIO_writePin+0x1a2>
			{
				SET_BIT(PORTC,pin_num);
    15cc:	a5 e3       	ldi	r26, 0x35	; 53
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e3       	ldi	r30, 0x35	; 53
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <GPIO_writePin+0x198>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <GPIO_writePin+0x194>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	6e c0       	rjmp	.+220    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 23       	and	r24, r24
    15f8:	a9 f4       	brne	.+42     	; 0x1624 <GPIO_writePin+0x1d2>
			{
				CLEAR_BIT(PORTC,pin_num);
    15fa:	a5 e3       	ldi	r26, 0x35	; 53
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e5 e3       	ldi	r30, 0x35	; 53
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <GPIO_writePin+0x1c6>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <GPIO_writePin+0x1c2>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	56 c0       	rjmp	.+172    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTC, pin_num);
    1624:	a5 e3       	ldi	r26, 0x35	; 53
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	e5 e3       	ldi	r30, 0x35	; 53
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_writePin+0x1f0>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_writePin+0x1ec>
    1646:	84 27       	eor	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	42 c0       	rjmp	.+132    	; 0x16d0 <GPIO_writePin+0x27e>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	a1 f4       	brne	.+40     	; 0x167a <GPIO_writePin+0x228>
			{
				SET_BIT(PORTD,pin_num);
    1652:	a2 e3       	ldi	r26, 0x32	; 50
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_writePin+0x21e>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_writePin+0x21a>
    1674:	84 2b       	or	r24, r20
    1676:	8c 93       	st	X, r24
    1678:	2b c0       	rjmp	.+86     	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
    167c:	88 23       	and	r24, r24
    167e:	a9 f4       	brne	.+42     	; 0x16aa <GPIO_writePin+0x258>
			{
				CLEAR_BIT(PORTD,pin_num);
    1680:	a2 e3       	ldi	r26, 0x32	; 50
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e2 e3       	ldi	r30, 0x32	; 50
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <GPIO_writePin+0x24c>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <GPIO_writePin+0x248>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	13 c0       	rjmp	.+38     	; 0x16d0 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTD, pin_num);
    16aa:	a2 e3       	ldi	r26, 0x32	; 50
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e2 e3       	ldi	r30, 0x32	; 50
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_writePin+0x276>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_writePin+0x272>
    16cc:	84 27       	eor	r24, r20
    16ce:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	0f 90       	pop	r0
    16d6:	0f 90       	pop	r0
    16d8:	0f 90       	pop	r0
    16da:	cf 91       	pop	r28
    16dc:	df 91       	pop	r29
    16de:	08 95       	ret

000016e0 <GPIO_readPin>:
 *         are not correct, The function will return Logic Low.
 * @param  Port Number, Pin number.
 * @return Pin Value.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16e0:	df 93       	push	r29
    16e2:	cf 93       	push	r28
    16e4:	00 d0       	rcall	.+0      	; 0x16e6 <GPIO_readPin+0x6>
    16e6:	00 d0       	rcall	.+0      	; 0x16e8 <GPIO_readPin+0x8>
    16e8:	0f 92       	push	r0
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
    16ee:	8a 83       	std	Y+2, r24	; 0x02
    16f0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16f2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_readPin+0x1c>
    16fa:	84 c0       	rjmp	.+264    	; 0x1804 <GPIO_readPin+0x124>
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	84 30       	cpi	r24, 0x04	; 4
    1700:	08 f0       	brcs	.+2      	; 0x1704 <GPIO_readPin+0x24>
    1702:	80 c0       	rjmp	.+256    	; 0x1804 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1704:	8a 81       	ldd	r24, Y+2	; 0x02
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3d 83       	std	Y+5, r19	; 0x05
    170c:	2c 83       	std	Y+4, r18	; 0x04
    170e:	4c 81       	ldd	r20, Y+4	; 0x04
    1710:	5d 81       	ldd	r21, Y+5	; 0x05
    1712:	41 30       	cpi	r20, 0x01	; 1
    1714:	51 05       	cpc	r21, r1
    1716:	79 f1       	breq	.+94     	; 0x1776 <GPIO_readPin+0x96>
    1718:	8c 81       	ldd	r24, Y+4	; 0x04
    171a:	9d 81       	ldd	r25, Y+5	; 0x05
    171c:	82 30       	cpi	r24, 0x02	; 2
    171e:	91 05       	cpc	r25, r1
    1720:	34 f4       	brge	.+12     	; 0x172e <GPIO_readPin+0x4e>
    1722:	2c 81       	ldd	r18, Y+4	; 0x04
    1724:	3d 81       	ldd	r19, Y+5	; 0x05
    1726:	21 15       	cp	r18, r1
    1728:	31 05       	cpc	r19, r1
    172a:	69 f0       	breq	.+26     	; 0x1746 <GPIO_readPin+0x66>
    172c:	6b c0       	rjmp	.+214    	; 0x1804 <GPIO_readPin+0x124>
    172e:	4c 81       	ldd	r20, Y+4	; 0x04
    1730:	5d 81       	ldd	r21, Y+5	; 0x05
    1732:	42 30       	cpi	r20, 0x02	; 2
    1734:	51 05       	cpc	r21, r1
    1736:	b9 f1       	breq	.+110    	; 0x17a6 <GPIO_readPin+0xc6>
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	9d 81       	ldd	r25, Y+5	; 0x05
    173c:	83 30       	cpi	r24, 0x03	; 3
    173e:	91 05       	cpc	r25, r1
    1740:	09 f4       	brne	.+2      	; 0x1744 <GPIO_readPin+0x64>
    1742:	49 c0       	rjmp	.+146    	; 0x17d6 <GPIO_readPin+0xf6>
    1744:	5f c0       	rjmp	.+190    	; 0x1804 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1746:	e9 e3       	ldi	r30, 0x39	; 57
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	28 2f       	mov	r18, r24
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a9 01       	movw	r20, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_readPin+0x7e>
    175a:	55 95       	asr	r21
    175c:	47 95       	ror	r20
    175e:	8a 95       	dec	r24
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_readPin+0x7a>
    1762:	ca 01       	movw	r24, r20
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	90 70       	andi	r25, 0x00	; 0
    1768:	88 23       	and	r24, r24
    176a:	19 f0       	breq	.+6      	; 0x1772 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	89 83       	std	Y+1, r24	; 0x01
    1770:	49 c0       	rjmp	.+146    	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1772:	19 82       	std	Y+1, r1	; 0x01
    1774:	47 c0       	rjmp	.+142    	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1776:	e6 e3       	ldi	r30, 0x36	; 54
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <GPIO_readPin+0xae>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <GPIO_readPin+0xaa>
    1792:	ca 01       	movw	r24, r20
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 23       	and	r24, r24
    179a:	19 f0       	breq	.+6      	; 0x17a2 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	31 c0       	rjmp	.+98     	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	2f c0       	rjmp	.+94     	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17a6:	e3 e3       	ldi	r30, 0x33	; 51
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <GPIO_readPin+0xde>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <GPIO_readPin+0xda>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	88 23       	and	r24, r24
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	19 c0       	rjmp	.+50     	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	17 c0       	rjmp	.+46     	; 0x1804 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17d6:	e0 e3       	ldi	r30, 0x30	; 48
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <GPIO_readPin+0x10e>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <GPIO_readPin+0x10a>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1802:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	cf 91       	pop	r28
    1812:	df 91       	pop	r29
    1814:	08 95       	ret

00001816 <GPIO_setupPortDirection>:
 *         If the input port number is not correct, The function will not handle the request.
 * @param  Port Number, Port Direction.
 * @return void.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	00 d0       	rcall	.+0      	; 0x181c <GPIO_setupPortDirection+0x6>
    181c:	00 d0       	rcall	.+0      	; 0x181e <GPIO_setupPortDirection+0x8>
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1826:	89 81       	ldd	r24, Y+1	; 0x01
    1828:	84 30       	cpi	r24, 0x04	; 4
    182a:	90 f5       	brcc	.+100    	; 0x1890 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3c 83       	std	Y+4, r19	; 0x04
    1834:	2b 83       	std	Y+3, r18	; 0x03
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	d1 f0       	breq	.+52     	; 0x1874 <GPIO_setupPortDirection+0x5e>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <GPIO_setupPortDirection+0x3e>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <GPIO_setupPortDirection+0x54>
    1852:	1e c0       	rjmp	.+60     	; 0x1890 <GPIO_setupPortDirection+0x7a>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	81 f0       	breq	.+32     	; 0x187e <GPIO_setupPortDirection+0x68>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	81 f0       	breq	.+32     	; 0x1888 <GPIO_setupPortDirection+0x72>
    1868:	13 c0       	rjmp	.+38     	; 0x1890 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    186a:	ea e3       	ldi	r30, 0x3A	; 58
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	80 83       	st	Z, r24
    1872:	0e c0       	rjmp	.+28     	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	80 83       	st	Z, r24
    187c:	09 c0       	rjmp	.+18     	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    187e:	e4 e3       	ldi	r30, 0x34	; 52
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1888:	e1 e3       	ldi	r30, 0x31	; 49
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <GPIO_writePort>:
 *         If the input port number is not correct, The function will not handle the request.
 * @param  Port Number, Port Value.
 * @return void.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <GPIO_writePort+0x6>
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <GPIO_writePort+0x8>
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	84 30       	cpi	r24, 0x04	; 4
    18b2:	90 f5       	brcc	.+100    	; 0x1918 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	3c 83       	std	Y+4, r19	; 0x04
    18bc:	2b 83       	std	Y+3, r18	; 0x03
    18be:	8b 81       	ldd	r24, Y+3	; 0x03
    18c0:	9c 81       	ldd	r25, Y+4	; 0x04
    18c2:	81 30       	cpi	r24, 0x01	; 1
    18c4:	91 05       	cpc	r25, r1
    18c6:	d1 f0       	breq	.+52     	; 0x18fc <GPIO_writePort+0x5e>
    18c8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ca:	3c 81       	ldd	r19, Y+4	; 0x04
    18cc:	22 30       	cpi	r18, 0x02	; 2
    18ce:	31 05       	cpc	r19, r1
    18d0:	2c f4       	brge	.+10     	; 0x18dc <GPIO_writePort+0x3e>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	61 f0       	breq	.+24     	; 0x18f2 <GPIO_writePort+0x54>
    18da:	1e c0       	rjmp	.+60     	; 0x1918 <GPIO_writePort+0x7a>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <GPIO_writePort+0x68>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	83 30       	cpi	r24, 0x03	; 3
    18ec:	91 05       	cpc	r25, r1
    18ee:	81 f0       	breq	.+32     	; 0x1910 <GPIO_writePort+0x72>
    18f0:	13 c0       	rjmp	.+38     	; 0x1918 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18f2:	eb e3       	ldi	r30, 0x3B	; 59
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 83       	st	Z, r24
    18fa:	0e c0       	rjmp	.+28     	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	09 c0       	rjmp	.+18     	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
    190e:	04 c0       	rjmp	.+8      	; 0x1918 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1910:	e2 e3       	ldi	r30, 0x32	; 50
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	80 83       	st	Z, r24
			break;
		}
	}
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <GPIO_readPort>:
 *         If the input port number is not correct, The function will return ZERO value.
 * @param  Port Number.
 * @return Port Value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <GPIO_readPort+0x6>
    192c:	00 d0       	rcall	.+0      	; 0x192e <GPIO_readPort+0x8>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1934:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1936:	8a 81       	ldd	r24, Y+2	; 0x02
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	90 f5       	brcc	.+100    	; 0x19a0 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	3c 83       	std	Y+4, r19	; 0x04
    1944:	2b 83       	std	Y+3, r18	; 0x03
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	81 30       	cpi	r24, 0x01	; 1
    194c:	91 05       	cpc	r25, r1
    194e:	d1 f0       	breq	.+52     	; 0x1984 <GPIO_readPort+0x5e>
    1950:	2b 81       	ldd	r18, Y+3	; 0x03
    1952:	3c 81       	ldd	r19, Y+4	; 0x04
    1954:	22 30       	cpi	r18, 0x02	; 2
    1956:	31 05       	cpc	r19, r1
    1958:	2c f4       	brge	.+10     	; 0x1964 <GPIO_readPort+0x3e>
    195a:	8b 81       	ldd	r24, Y+3	; 0x03
    195c:	9c 81       	ldd	r25, Y+4	; 0x04
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	61 f0       	breq	.+24     	; 0x197a <GPIO_readPort+0x54>
    1962:	1e c0       	rjmp	.+60     	; 0x19a0 <GPIO_readPort+0x7a>
    1964:	2b 81       	ldd	r18, Y+3	; 0x03
    1966:	3c 81       	ldd	r19, Y+4	; 0x04
    1968:	22 30       	cpi	r18, 0x02	; 2
    196a:	31 05       	cpc	r19, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <GPIO_readPort+0x68>
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	9c 81       	ldd	r25, Y+4	; 0x04
    1972:	83 30       	cpi	r24, 0x03	; 3
    1974:	91 05       	cpc	r25, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_readPort+0x72>
    1978:	13 c0       	rjmp	.+38     	; 0x19a0 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    197a:	e9 e3       	ldi	r30, 0x39	; 57
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1984:	e6 e3       	ldi	r30, 0x36	; 54
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	89 83       	std	Y+1, r24	; 0x01
    198c:	09 c0       	rjmp	.+18     	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    198e:	e3 e3       	ldi	r30, 0x33	; 51
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1998:	e0 e3       	ldi	r30, 0x30	; 48
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <LCD_init>:
 *         2. Setup the LCD Data Mode 4-bits or 8-bits.
 * @param  void.
 * @return void.
 */
void LCD_init(void)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	cd b7       	in	r28, 0x3d	; 61
    19b6:	de b7       	in	r29, 0x3e	; 62
    19b8:	2e 97       	sbiw	r28, 0x0e	; 14
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	de bf       	out	0x3e, r29	; 62
    19c0:	0f be       	out	0x3f, r0	; 63
    19c2:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    19c4:	82 e0       	ldi	r24, 0x02	; 2
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	61 e0       	ldi	r22, 0x01	; 1
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	a0 ea       	ldi	r26, 0xA0	; 160
    19de:	b1 e4       	ldi	r27, 0x41	; 65
    19e0:	8b 87       	std	Y+11, r24	; 0x0b
    19e2:	9c 87       	std	Y+12, r25	; 0x0c
    19e4:	ad 87       	std	Y+13, r26	; 0x0d
    19e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	4a ef       	ldi	r20, 0xFA	; 250
    19f6:	54 e4       	ldi	r21, 0x44	; 68
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	8f 83       	std	Y+7, r24	; 0x07
    1a02:	98 87       	std	Y+8, r25	; 0x08
    1a04:	a9 87       	std	Y+9, r26	; 0x09
    1a06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a08:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0a:	78 85       	ldd	r23, Y+8	; 0x08
    1a0c:	89 85       	ldd	r24, Y+9	; 0x09
    1a0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	40 e8       	ldi	r20, 0x80	; 128
    1a16:	5f e3       	ldi	r21, 0x3F	; 63
    1a18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a1c:	88 23       	and	r24, r24
    1a1e:	2c f4       	brge	.+10     	; 0x1a2a <LCD_init+0x7a>
		__ticks = 1;
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	3f c0       	rjmp	.+126    	; 0x1aa8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2c:	78 85       	ldd	r23, Y+8	; 0x08
    1a2e:	89 85       	ldd	r24, Y+9	; 0x09
    1a30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	3f ef       	ldi	r19, 0xFF	; 255
    1a36:	4f e7       	ldi	r20, 0x7F	; 127
    1a38:	57 e4       	ldi	r21, 0x47	; 71
    1a3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a3e:	18 16       	cp	r1, r24
    1a40:	4c f5       	brge	.+82     	; 0x1a94 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e2       	ldi	r20, 0x20	; 32
    1a50:	51 e4       	ldi	r21, 0x41	; 65
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	9e 83       	std	Y+6, r25	; 0x06
    1a68:	8d 83       	std	Y+5, r24	; 0x05
    1a6a:	0f c0       	rjmp	.+30     	; 0x1a8a <LCD_init+0xda>
    1a6c:	88 ec       	ldi	r24, 0xC8	; 200
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	9c 83       	std	Y+4, r25	; 0x04
    1a72:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	01 97       	sbiw	r24, 0x01	; 1
    1a7a:	f1 f7       	brne	.-4      	; 0x1a78 <LCD_init+0xc8>
    1a7c:	9c 83       	std	Y+4, r25	; 0x04
    1a7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a80:	8d 81       	ldd	r24, Y+5	; 0x05
    1a82:	9e 81       	ldd	r25, Y+6	; 0x06
    1a84:	01 97       	sbiw	r24, 0x01	; 1
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	69 f7       	brne	.-38     	; 0x1a6c <LCD_init+0xbc>
    1a92:	14 c0       	rjmp	.+40     	; 0x1abc <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a94:	6f 81       	ldd	r22, Y+7	; 0x07
    1a96:	78 85       	ldd	r23, Y+8	; 0x08
    1a98:	89 85       	ldd	r24, Y+9	; 0x09
    1a9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	f1 f7       	brne	.-4      	; 0x1ab4 <LCD_init+0x104>
    1ab8:	9a 83       	std	Y+2, r25	; 0x02
    1aba:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	6f ef       	ldi	r22, 0xFF	; 255
    1ac0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1ac4:	88 e3       	ldi	r24, 0x38	; 56
    1ac6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSORMODE); /* cursor Mode set */
    1aca:	8c e0       	ldi	r24, 0x0C	; 12
    1acc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_sendCommand>
}
    1ad6:	2e 96       	adiw	r28, 0x0e	; 14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <LCD_sendCommand>:
 * @brief  Send the required command to the screen.
 * @param  Command to send.
 * @return void.
 */
static void LCD_sendCommand(uint8 command)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	e9 97       	sbiw	r28, 0x39	; 57
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	f8 94       	cli
    1af6:	de bf       	out	0x3e, r29	; 62
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	cd bf       	out	0x3d, r28	; 61
    1afc:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	60 e0       	ldi	r22, 0x00	; 0
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e8       	ldi	r26, 0x80	; 128
    1b0e:	bf e3       	ldi	r27, 0x3F	; 63
    1b10:	8d ab       	std	Y+53, r24	; 0x35
    1b12:	9e ab       	std	Y+54, r25	; 0x36
    1b14:	af ab       	std	Y+55, r26	; 0x37
    1b16:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b18:	6d a9       	ldd	r22, Y+53	; 0x35
    1b1a:	7e a9       	ldd	r23, Y+54	; 0x36
    1b1c:	8f a9       	ldd	r24, Y+55	; 0x37
    1b1e:	98 ad       	ldd	r25, Y+56	; 0x38
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a ef       	ldi	r20, 0xFA	; 250
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	89 ab       	std	Y+49, r24	; 0x31
    1b32:	9a ab       	std	Y+50, r25	; 0x32
    1b34:	ab ab       	std	Y+51, r26	; 0x33
    1b36:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b38:	69 a9       	ldd	r22, Y+49	; 0x31
    1b3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1b3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1b3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	40 e8       	ldi	r20, 0x80	; 128
    1b46:	5f e3       	ldi	r21, 0x3F	; 63
    1b48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <LCD_sendCommand+0x72>
		__ticks = 1;
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	98 ab       	std	Y+48, r25	; 0x30
    1b56:	8f a7       	std	Y+47, r24	; 0x2f
    1b58:	3f c0       	rjmp	.+126    	; 0x1bd8 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1b5a:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5c:	7a a9       	ldd	r23, Y+50	; 0x32
    1b5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1b60:	9c a9       	ldd	r25, Y+52	; 0x34
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	3f ef       	ldi	r19, 0xFF	; 255
    1b66:	4f e7       	ldi	r20, 0x7F	; 127
    1b68:	57 e4       	ldi	r21, 0x47	; 71
    1b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	4c f5       	brge	.+82     	; 0x1bc4 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b72:	6d a9       	ldd	r22, Y+53	; 0x35
    1b74:	7e a9       	ldd	r23, Y+54	; 0x36
    1b76:	8f a9       	ldd	r24, Y+55	; 0x37
    1b78:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7a:	20 e0       	ldi	r18, 0x00	; 0
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	40 e2       	ldi	r20, 0x20	; 32
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b86:	dc 01       	movw	r26, r24
    1b88:	cb 01       	movw	r24, r22
    1b8a:	bc 01       	movw	r22, r24
    1b8c:	cd 01       	movw	r24, r26
    1b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b92:	dc 01       	movw	r26, r24
    1b94:	cb 01       	movw	r24, r22
    1b96:	98 ab       	std	Y+48, r25	; 0x30
    1b98:	8f a7       	std	Y+47, r24	; 0x2f
    1b9a:	0f c0       	rjmp	.+30     	; 0x1bba <LCD_sendCommand+0xd2>
    1b9c:	88 ec       	ldi	r24, 0xC8	; 200
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9e a7       	std	Y+46, r25	; 0x2e
    1ba2:	8d a7       	std	Y+45, r24	; 0x2d
    1ba4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ba6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <LCD_sendCommand+0xc0>
    1bac:	9e a7       	std	Y+46, r25	; 0x2e
    1bae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb4:	01 97       	sbiw	r24, 0x01	; 1
    1bb6:	98 ab       	std	Y+48, r25	; 0x30
    1bb8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bba:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bbc:	98 a9       	ldd	r25, Y+48	; 0x30
    1bbe:	00 97       	sbiw	r24, 0x00	; 0
    1bc0:	69 f7       	brne	.-38     	; 0x1b9c <LCD_sendCommand+0xb4>
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc4:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc6:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc8:	8b a9       	ldd	r24, Y+51	; 0x33
    1bca:	9c a9       	ldd	r25, Y+52	; 0x34
    1bcc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	98 ab       	std	Y+48, r25	; 0x30
    1bd6:	8f a7       	std	Y+47, r24	; 0x2f
    1bd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bda:	98 a9       	ldd	r25, Y+48	; 0x30
    1bdc:	9c a7       	std	Y+44, r25	; 0x2c
    1bde:	8b a7       	std	Y+43, r24	; 0x2b
    1be0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be4:	01 97       	sbiw	r24, 0x01	; 1
    1be6:	f1 f7       	brne	.-4      	; 0x1be4 <LCD_sendCommand+0xfc>
    1be8:	9c a7       	std	Y+44, r25	; 0x2c
    1bea:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	61 e0       	ldi	r22, 0x01	; 1
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    1bf6:	80 e0       	ldi	r24, 0x00	; 0
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	a0 e8       	ldi	r26, 0x80	; 128
    1bfc:	bf e3       	ldi	r27, 0x3F	; 63
    1bfe:	8f a3       	std	Y+39, r24	; 0x27
    1c00:	98 a7       	std	Y+40, r25	; 0x28
    1c02:	a9 a7       	std	Y+41, r26	; 0x29
    1c04:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c06:	6f a1       	ldd	r22, Y+39	; 0x27
    1c08:	78 a5       	ldd	r23, Y+40	; 0x28
    1c0a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c0c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	4a ef       	ldi	r20, 0xFA	; 250
    1c14:	54 e4       	ldi	r21, 0x44	; 68
    1c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	8b a3       	std	Y+35, r24	; 0x23
    1c20:	9c a3       	std	Y+36, r25	; 0x24
    1c22:	ad a3       	std	Y+37, r26	; 0x25
    1c24:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c26:	6b a1       	ldd	r22, Y+35	; 0x23
    1c28:	7c a1       	ldd	r23, Y+36	; 0x24
    1c2a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c2c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	40 e8       	ldi	r20, 0x80	; 128
    1c34:	5f e3       	ldi	r21, 0x3F	; 63
    1c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c3a:	88 23       	and	r24, r24
    1c3c:	2c f4       	brge	.+10     	; 0x1c48 <LCD_sendCommand+0x160>
		__ticks = 1;
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9a a3       	std	Y+34, r25	; 0x22
    1c44:	89 a3       	std	Y+33, r24	; 0x21
    1c46:	3f c0       	rjmp	.+126    	; 0x1cc6 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1c48:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c4e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	3f ef       	ldi	r19, 0xFF	; 255
    1c54:	4f e7       	ldi	r20, 0x7F	; 127
    1c56:	57 e4       	ldi	r21, 0x47	; 71
    1c58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c5c:	18 16       	cp	r1, r24
    1c5e:	4c f5       	brge	.+82     	; 0x1cb2 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c60:	6f a1       	ldd	r22, Y+39	; 0x27
    1c62:	78 a5       	ldd	r23, Y+40	; 0x28
    1c64:	89 a5       	ldd	r24, Y+41	; 0x29
    1c66:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e2       	ldi	r20, 0x20	; 32
    1c6e:	51 e4       	ldi	r21, 0x41	; 65
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	bc 01       	movw	r22, r24
    1c7a:	cd 01       	movw	r24, r26
    1c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9a a3       	std	Y+34, r25	; 0x22
    1c86:	89 a3       	std	Y+33, r24	; 0x21
    1c88:	0f c0       	rjmp	.+30     	; 0x1ca8 <LCD_sendCommand+0x1c0>
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	98 a3       	std	Y+32, r25	; 0x20
    1c90:	8f 8f       	std	Y+31, r24	; 0x1f
    1c92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c94:	98 a1       	ldd	r25, Y+32	; 0x20
    1c96:	01 97       	sbiw	r24, 0x01	; 1
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <LCD_sendCommand+0x1ae>
    1c9a:	98 a3       	std	Y+32, r25	; 0x20
    1c9c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1ca0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	9a a3       	std	Y+34, r25	; 0x22
    1ca6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	89 a1       	ldd	r24, Y+33	; 0x21
    1caa:	9a a1       	ldd	r25, Y+34	; 0x22
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	69 f7       	brne	.-38     	; 0x1c8a <LCD_sendCommand+0x1a2>
    1cb0:	14 c0       	rjmp	.+40     	; 0x1cda <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb4:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb6:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb8:	9e a1       	ldd	r25, Y+38	; 0x26
    1cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	9a a3       	std	Y+34, r25	; 0x22
    1cc4:	89 a3       	std	Y+33, r24	; 0x21
    1cc6:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc8:	9a a1       	ldd	r25, Y+34	; 0x22
    1cca:	9e 8f       	std	Y+30, r25	; 0x1e
    1ccc:	8d 8f       	std	Y+29, r24	; 0x1d
    1cce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cd0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	f1 f7       	brne	.-4      	; 0x1cd2 <LCD_sendCommand+0x1ea>
    1cd6:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	69 ad       	ldd	r22, Y+57	; 0x39
    1cde:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_writePort>
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 e8       	ldi	r26, 0x80	; 128
    1ce8:	bf e3       	ldi	r27, 0x3F	; 63
    1cea:	89 8f       	std	Y+25, r24	; 0x19
    1cec:	9a 8f       	std	Y+26, r25	; 0x1a
    1cee:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	69 8d       	ldd	r22, Y+25	; 0x19
    1cf4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cf6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cf8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	8d 8b       	std	Y+21, r24	; 0x15
    1d0c:	9e 8b       	std	Y+22, r25	; 0x16
    1d0e:	af 8b       	std	Y+23, r26	; 0x17
    1d10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d12:	6d 89       	ldd	r22, Y+21	; 0x15
    1d14:	7e 89       	ldd	r23, Y+22	; 0x16
    1d16:	8f 89       	ldd	r24, Y+23	; 0x17
    1d18:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 e8       	ldi	r20, 0x80	; 128
    1d20:	5f e3       	ldi	r21, 0x3F	; 63
    1d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d26:	88 23       	and	r24, r24
    1d28:	2c f4       	brge	.+10     	; 0x1d34 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	9c 8b       	std	Y+20, r25	; 0x14
    1d30:	8b 8b       	std	Y+19, r24	; 0x13
    1d32:	3f c0       	rjmp	.+126    	; 0x1db2 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1d34:	6d 89       	ldd	r22, Y+21	; 0x15
    1d36:	7e 89       	ldd	r23, Y+22	; 0x16
    1d38:	8f 89       	ldd	r24, Y+23	; 0x17
    1d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	4c f5       	brge	.+82     	; 0x1d9e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4c:	69 8d       	ldd	r22, Y+25	; 0x19
    1d4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e2       	ldi	r20, 0x20	; 32
    1d5a:	51 e4       	ldi	r21, 0x41	; 65
    1d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	bc 01       	movw	r22, r24
    1d66:	cd 01       	movw	r24, r26
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9c 8b       	std	Y+20, r25	; 0x14
    1d72:	8b 8b       	std	Y+19, r24	; 0x13
    1d74:	0f c0       	rjmp	.+30     	; 0x1d94 <LCD_sendCommand+0x2ac>
    1d76:	88 ec       	ldi	r24, 0xC8	; 200
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9a 8b       	std	Y+18, r25	; 0x12
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
    1d7e:	89 89       	ldd	r24, Y+17	; 0x11
    1d80:	9a 89       	ldd	r25, Y+18	; 0x12
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	f1 f7       	brne	.-4      	; 0x1d82 <LCD_sendCommand+0x29a>
    1d86:	9a 8b       	std	Y+18, r25	; 0x12
    1d88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	69 f7       	brne	.-38     	; 0x1d76 <LCD_sendCommand+0x28e>
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1da0:	7e 89       	ldd	r23, Y+22	; 0x16
    1da2:	8f 89       	ldd	r24, Y+23	; 0x17
    1da4:	98 8d       	ldd	r25, Y+24	; 0x18
    1da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	9c 8b       	std	Y+20, r25	; 0x14
    1db0:	8b 8b       	std	Y+19, r24	; 0x13
    1db2:	8b 89       	ldd	r24, Y+19	; 0x13
    1db4:	9c 89       	ldd	r25, Y+20	; 0x14
    1db6:	98 8b       	std	Y+16, r25	; 0x10
    1db8:	8f 87       	std	Y+15, r24	; 0x0f
    1dba:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dbc:	98 89       	ldd	r25, Y+16	; 0x10
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_sendCommand+0x2d6>
    1dc2:	98 8b       	std	Y+16, r25	; 0x10
    1dc4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	61 e0       	ldi	r22, 0x01	; 1
    1dca:	40 e0       	ldi	r20, 0x00	; 0
    1dcc:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	a0 e8       	ldi	r26, 0x80	; 128
    1dd6:	bf e3       	ldi	r27, 0x3F	; 63
    1dd8:	8b 87       	std	Y+11, r24	; 0x0b
    1dda:	9c 87       	std	Y+12, r25	; 0x0c
    1ddc:	ad 87       	std	Y+13, r26	; 0x0d
    1dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	4a ef       	ldi	r20, 0xFA	; 250
    1dee:	54 e4       	ldi	r21, 0x44	; 68
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	8f 83       	std	Y+7, r24	; 0x07
    1dfa:	98 87       	std	Y+8, r25	; 0x08
    1dfc:	a9 87       	std	Y+9, r26	; 0x09
    1dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	40 e8       	ldi	r20, 0x80	; 128
    1e0e:	5f e3       	ldi	r21, 0x3F	; 63
    1e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e14:	88 23       	and	r24, r24
    1e16:	2c f4       	brge	.+10     	; 0x1e22 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9e 83       	std	Y+6, r25	; 0x06
    1e1e:	8d 83       	std	Y+5, r24	; 0x05
    1e20:	3f c0       	rjmp	.+126    	; 0x1ea0 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1e22:	6f 81       	ldd	r22, Y+7	; 0x07
    1e24:	78 85       	ldd	r23, Y+8	; 0x08
    1e26:	89 85       	ldd	r24, Y+9	; 0x09
    1e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	3f ef       	ldi	r19, 0xFF	; 255
    1e2e:	4f e7       	ldi	r20, 0x7F	; 127
    1e30:	57 e4       	ldi	r21, 0x47	; 71
    1e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e36:	18 16       	cp	r1, r24
    1e38:	4c f5       	brge	.+82     	; 0x1e8c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	bc 01       	movw	r22, r24
    1e54:	cd 01       	movw	r24, r26
    1e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9e 83       	std	Y+6, r25	; 0x06
    1e60:	8d 83       	std	Y+5, r24	; 0x05
    1e62:	0f c0       	rjmp	.+30     	; 0x1e82 <LCD_sendCommand+0x39a>
    1e64:	88 ec       	ldi	r24, 0xC8	; 200
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9c 83       	std	Y+4, r25	; 0x04
    1e6a:	8b 83       	std	Y+3, r24	; 0x03
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendCommand+0x388>
    1e74:	9c 83       	std	Y+4, r25	; 0x04
    1e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e78:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7c:	01 97       	sbiw	r24, 0x01	; 1
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e82:	8d 81       	ldd	r24, Y+5	; 0x05
    1e84:	9e 81       	ldd	r25, Y+6	; 0x06
    1e86:	00 97       	sbiw	r24, 0x00	; 0
    1e88:	69 f7       	brne	.-38     	; 0x1e64 <LCD_sendCommand+0x37c>
    1e8a:	14 c0       	rjmp	.+40     	; 0x1eb4 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8e:	78 85       	ldd	r23, Y+8	; 0x08
    1e90:	89 85       	ldd	r24, Y+9	; 0x09
    1e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	9e 83       	std	Y+6, r25	; 0x06
    1e9e:	8d 83       	std	Y+5, r24	; 0x05
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	9a 83       	std	Y+2, r25	; 0x02
    1ea6:	89 83       	std	Y+1, r24	; 0x01
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	01 97       	sbiw	r24, 0x01	; 1
    1eae:	f1 f7       	brne	.-4      	; 0x1eac <LCD_sendCommand+0x3c4>
    1eb0:	9a 83       	std	Y+2, r25	; 0x02
    1eb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1eb4:	e9 96       	adiw	r28, 0x39	; 57
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	cf 91       	pop	r28
    1ec2:	df 91       	pop	r29
    1ec4:	08 95       	ret

00001ec6 <LCD_displayCharacter>:
 * @brief  Display the required character on the screen.
 * @param  Character to display.
 * @return void.
 */
void LCD_displayCharacter(uint8 data)
{
    1ec6:	df 93       	push	r29
    1ec8:	cf 93       	push	r28
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	e9 97       	sbiw	r28, 0x39	; 57
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	f8 94       	cli
    1ed4:	de bf       	out	0x3e, r29	; 62
    1ed6:	0f be       	out	0x3f, r0	; 63
    1ed8:	cd bf       	out	0x3d, r28	; 61
    1eda:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	8d ab       	std	Y+53, r24	; 0x35
    1ef0:	9e ab       	std	Y+54, r25	; 0x36
    1ef2:	af ab       	std	Y+55, r26	; 0x37
    1ef4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ef8:	7e a9       	ldd	r23, Y+54	; 0x36
    1efa:	8f a9       	ldd	r24, Y+55	; 0x37
    1efc:	98 ad       	ldd	r25, Y+56	; 0x38
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	89 ab       	std	Y+49, r24	; 0x31
    1f10:	9a ab       	std	Y+50, r25	; 0x32
    1f12:	ab ab       	std	Y+51, r26	; 0x33
    1f14:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	98 ab       	std	Y+48, r25	; 0x30
    1f34:	8f a7       	std	Y+47, r24	; 0x2f
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1f38:	69 a9       	ldd	r22, Y+49	; 0x31
    1f3a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f3c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f3e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6d a9       	ldd	r22, Y+53	; 0x35
    1f52:	7e a9       	ldd	r23, Y+54	; 0x36
    1f54:	8f a9       	ldd	r24, Y+55	; 0x37
    1f56:	98 ad       	ldd	r25, Y+56	; 0x38
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	98 ab       	std	Y+48, r25	; 0x30
    1f76:	8f a7       	std	Y+47, r24	; 0x2f
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_displayCharacter+0xd2>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9e a7       	std	Y+46, r25	; 0x2e
    1f80:	8d a7       	std	Y+45, r24	; 0x2d
    1f82:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f84:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_displayCharacter+0xc0>
    1f8a:	9e a7       	std	Y+46, r25	; 0x2e
    1f8c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f90:	98 a9       	ldd	r25, Y+48	; 0x30
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_displayCharacter+0xb4>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fa4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fa6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa8:	9c a9       	ldd	r25, Y+52	; 0x34
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	98 ab       	std	Y+48, r25	; 0x30
    1fb4:	8f a7       	std	Y+47, r24	; 0x2f
    1fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fba:	9c a7       	std	Y+44, r25	; 0x2c
    1fbc:	8b a7       	std	Y+43, r24	; 0x2b
    1fbe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_displayCharacter+0xfc>
    1fc6:	9c a7       	std	Y+44, r25	; 0x2c
    1fc8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e8       	ldi	r26, 0x80	; 128
    1fda:	bf e3       	ldi	r27, 0x3F	; 63
    1fdc:	8f a3       	std	Y+39, r24	; 0x27
    1fde:	98 a7       	std	Y+40, r25	; 0x28
    1fe0:	a9 a7       	std	Y+41, r26	; 0x29
    1fe2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6f a1       	ldd	r22, Y+39	; 0x27
    1fe6:	78 a5       	ldd	r23, Y+40	; 0x28
    1fe8:	89 a5       	ldd	r24, Y+41	; 0x29
    1fea:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	4a ef       	ldi	r20, 0xFA	; 250
    1ff2:	54 e4       	ldi	r21, 0x44	; 68
    1ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8b a3       	std	Y+35, r24	; 0x23
    1ffe:	9c a3       	std	Y+36, r25	; 0x24
    2000:	ad a3       	std	Y+37, r26	; 0x25
    2002:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_displayCharacter+0x160>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9a a3       	std	Y+34, r25	; 0x22
    2022:	89 a3       	std	Y+33, r24	; 0x21
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2026:	6b a1       	ldd	r22, Y+35	; 0x23
    2028:	7c a1       	ldd	r23, Y+36	; 0x24
    202a:	8d a1       	ldd	r24, Y+37	; 0x25
    202c:	9e a1       	ldd	r25, Y+38	; 0x26
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6f a1       	ldd	r22, Y+39	; 0x27
    2040:	78 a5       	ldd	r23, Y+40	; 0x28
    2042:	89 a5       	ldd	r24, Y+41	; 0x29
    2044:	9a a5       	ldd	r25, Y+42	; 0x2a
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9a a3       	std	Y+34, r25	; 0x22
    2064:	89 a3       	std	Y+33, r24	; 0x21
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_displayCharacter+0x1c0>
    2068:	88 ec       	ldi	r24, 0xC8	; 200
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	98 a3       	std	Y+32, r25	; 0x20
    206e:	8f 8f       	std	Y+31, r24	; 0x1f
    2070:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2072:	98 a1       	ldd	r25, Y+32	; 0x20
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_displayCharacter+0x1ae>
    2078:	98 a3       	std	Y+32, r25	; 0x20
    207a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	9a a1       	ldd	r25, Y+34	; 0x22
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9a a3       	std	Y+34, r25	; 0x22
    2084:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	89 a1       	ldd	r24, Y+33	; 0x21
    2088:	9a a1       	ldd	r25, Y+34	; 0x22
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_displayCharacter+0x1a2>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6b a1       	ldd	r22, Y+35	; 0x23
    2092:	7c a1       	ldd	r23, Y+36	; 0x24
    2094:	8d a1       	ldd	r24, Y+37	; 0x25
    2096:	9e a1       	ldd	r25, Y+38	; 0x26
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9a a3       	std	Y+34, r25	; 0x22
    20a2:	89 a3       	std	Y+33, r24	; 0x21
    20a4:	89 a1       	ldd	r24, Y+33	; 0x21
    20a6:	9a a1       	ldd	r25, Y+34	; 0x22
    20a8:	9e 8f       	std	Y+30, r25	; 0x1e
    20aa:	8d 8f       	std	Y+29, r24	; 0x1d
    20ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_displayCharacter+0x1ea>
    20b4:	9e 8f       	std	Y+30, r25	; 0x1e
    20b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	69 ad       	ldd	r22, Y+57	; 0x39
    20bc:	0e 94 4f 0c 	call	0x189e	; 0x189e <GPIO_writePort>
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e8       	ldi	r26, 0x80	; 128
    20c6:	bf e3       	ldi	r27, 0x3F	; 63
    20c8:	89 8f       	std	Y+25, r24	; 0x19
    20ca:	9a 8f       	std	Y+26, r25	; 0x1a
    20cc:	ab 8f       	std	Y+27, r26	; 0x1b
    20ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	69 8d       	ldd	r22, Y+25	; 0x19
    20d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4a ef       	ldi	r20, 0xFA	; 250
    20de:	54 e4       	ldi	r21, 0x44	; 68
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	8d 8b       	std	Y+21, r24	; 0x15
    20ea:	9e 8b       	std	Y+22, r25	; 0x16
    20ec:	af 8b       	std	Y+23, r26	; 0x17
    20ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e8       	ldi	r20, 0x80	; 128
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	9c 8b       	std	Y+20, r25	; 0x14
    210e:	8b 8b       	std	Y+19, r24	; 0x13
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2112:	6d 89       	ldd	r22, Y+21	; 0x15
    2114:	7e 89       	ldd	r23, Y+22	; 0x16
    2116:	8f 89       	ldd	r24, Y+23	; 0x17
    2118:	98 8d       	ldd	r25, Y+24	; 0x18
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	69 8d       	ldd	r22, Y+25	; 0x19
    212c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    212e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2130:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	9c 8b       	std	Y+20, r25	; 0x14
    2150:	8b 8b       	std	Y+19, r24	; 0x13
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <LCD_displayCharacter+0x2ac>
    2154:	88 ec       	ldi	r24, 0xC8	; 200
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9a 8b       	std	Y+18, r25	; 0x12
    215a:	89 8b       	std	Y+17, r24	; 0x11
    215c:	89 89       	ldd	r24, Y+17	; 0x11
    215e:	9a 89       	ldd	r25, Y+18	; 0x12
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_displayCharacter+0x29a>
    2164:	9a 8b       	std	Y+18, r25	; 0x12
    2166:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8b 89       	ldd	r24, Y+19	; 0x13
    216a:	9c 89       	ldd	r25, Y+20	; 0x14
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	9c 8b       	std	Y+20, r25	; 0x14
    2170:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8b 89       	ldd	r24, Y+19	; 0x13
    2174:	9c 89       	ldd	r25, Y+20	; 0x14
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <LCD_displayCharacter+0x28e>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	9c 8b       	std	Y+20, r25	; 0x14
    218e:	8b 8b       	std	Y+19, r24	; 0x13
    2190:	8b 89       	ldd	r24, Y+19	; 0x13
    2192:	9c 89       	ldd	r25, Y+20	; 0x14
    2194:	98 8b       	std	Y+16, r25	; 0x10
    2196:	8f 87       	std	Y+15, r24	; 0x0f
    2198:	8f 85       	ldd	r24, Y+15	; 0x0f
    219a:	98 89       	ldd	r25, Y+16	; 0x10
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_displayCharacter+0x2d6>
    21a0:	98 8b       	std	Y+16, r25	; 0x10
    21a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	a0 e8       	ldi	r26, 0x80	; 128
    21b4:	bf e3       	ldi	r27, 0x3F	; 63
    21b6:	8b 87       	std	Y+11, r24	; 0x0b
    21b8:	9c 87       	std	Y+12, r25	; 0x0c
    21ba:	ad 87       	std	Y+13, r26	; 0x0d
    21bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21be:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	4a ef       	ldi	r20, 0xFA	; 250
    21cc:	54 e4       	ldi	r21, 0x44	; 68
    21ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d2:	dc 01       	movw	r26, r24
    21d4:	cb 01       	movw	r24, r22
    21d6:	8f 83       	std	Y+7, r24	; 0x07
    21d8:	98 87       	std	Y+8, r25	; 0x08
    21da:	a9 87       	std	Y+9, r26	; 0x09
    21dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e8       	ldi	r20, 0x80	; 128
    21ec:	5f e3       	ldi	r21, 0x3F	; 63
    21ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f2:	88 23       	and	r24, r24
    21f4:	2c f4       	brge	.+10     	; 0x2200 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    21f6:	81 e0       	ldi	r24, 0x01	; 1
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	9e 83       	std	Y+6, r25	; 0x06
    21fc:	8d 83       	std	Y+5, r24	; 0x05
    21fe:	3f c0       	rjmp	.+126    	; 0x227e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2200:	6f 81       	ldd	r22, Y+7	; 0x07
    2202:	78 85       	ldd	r23, Y+8	; 0x08
    2204:	89 85       	ldd	r24, Y+9	; 0x09
    2206:	9a 85       	ldd	r25, Y+10	; 0x0a
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	57 e4       	ldi	r21, 0x47	; 71
    2210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	4c f5       	brge	.+82     	; 0x226a <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	6b 85       	ldd	r22, Y+11	; 0x0b
    221a:	7c 85       	ldd	r23, Y+12	; 0x0c
    221c:	8d 85       	ldd	r24, Y+13	; 0x0d
    221e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	bc 01       	movw	r22, r24
    2232:	cd 01       	movw	r24, r26
    2234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2238:	dc 01       	movw	r26, r24
    223a:	cb 01       	movw	r24, r22
    223c:	9e 83       	std	Y+6, r25	; 0x06
    223e:	8d 83       	std	Y+5, r24	; 0x05
    2240:	0f c0       	rjmp	.+30     	; 0x2260 <LCD_displayCharacter+0x39a>
    2242:	88 ec       	ldi	r24, 0xC8	; 200
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	9c 83       	std	Y+4, r25	; 0x04
    2248:	8b 83       	std	Y+3, r24	; 0x03
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_displayCharacter+0x388>
    2252:	9c 83       	std	Y+4, r25	; 0x04
    2254:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2256:	8d 81       	ldd	r24, Y+5	; 0x05
    2258:	9e 81       	ldd	r25, Y+6	; 0x06
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	9e 83       	std	Y+6, r25	; 0x06
    225e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2260:	8d 81       	ldd	r24, Y+5	; 0x05
    2262:	9e 81       	ldd	r25, Y+6	; 0x06
    2264:	00 97       	sbiw	r24, 0x00	; 0
    2266:	69 f7       	brne	.-38     	; 0x2242 <LCD_displayCharacter+0x37c>
    2268:	14 c0       	rjmp	.+40     	; 0x2292 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226a:	6f 81       	ldd	r22, Y+7	; 0x07
    226c:	78 85       	ldd	r23, Y+8	; 0x08
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9e 83       	std	Y+6, r25	; 0x06
    227c:	8d 83       	std	Y+5, r24	; 0x05
    227e:	8d 81       	ldd	r24, Y+5	; 0x05
    2280:	9e 81       	ldd	r25, Y+6	; 0x06
    2282:	9a 83       	std	Y+2, r25	; 0x02
    2284:	89 83       	std	Y+1, r24	; 0x01
    2286:	89 81       	ldd	r24, Y+1	; 0x01
    2288:	9a 81       	ldd	r25, Y+2	; 0x02
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	f1 f7       	brne	.-4      	; 0x228a <LCD_displayCharacter+0x3c4>
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2292:	e9 96       	adiw	r28, 0x39	; 57
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_displayString>:
 * @brief  Display the required string on the screen.
 * @param  String to display.
 * @return void.
 */
void LCD_displayString(const char *Str)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	00 d0       	rcall	.+0      	; 0x22aa <LCD_displayString+0x6>
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	9b 83       	std	Y+3, r25	; 0x03
    22b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	0e c0       	rjmp	.+28     	; 0x22d4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	8a 81       	ldd	r24, Y+2	; 0x02
    22c0:	9b 81       	ldd	r25, Y+3	; 0x03
    22c2:	fc 01       	movw	r30, r24
    22c4:	e2 0f       	add	r30, r18
    22c6:	f3 1f       	adc	r31, r19
    22c8:	80 81       	ld	r24, Z
    22ca:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
		i++;
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	8f 5f       	subi	r24, 0xFF	; 255
    22d2:	89 83       	std	Y+1, r24	; 0x01
 * @return void.
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    22d4:	89 81       	ldd	r24, Y+1	; 0x01
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	fc 01       	movw	r30, r24
    22e0:	e2 0f       	add	r30, r18
    22e2:	f3 1f       	adc	r31, r19
    22e4:	80 81       	ld	r24, Z
    22e6:	88 23       	and	r24, r24
    22e8:	39 f7       	brne	.-50     	; 0x22b8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	cf 91       	pop	r28
    22f2:	df 91       	pop	r29
    22f4:	08 95       	ret

000022f6 <LCD_moveCursor>:
 * @brief  Move the cursor to a specified row and column index on the screen.
 * @param  Row and Column to where move.
 * @return void.
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    22f6:	df 93       	push	r29
    22f8:	cf 93       	push	r28
    22fa:	00 d0       	rcall	.+0      	; 0x22fc <LCD_moveCursor+0x6>
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <LCD_moveCursor+0x8>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	8a 83       	std	Y+2, r24	; 0x02
    2306:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3d 83       	std	Y+5, r19	; 0x05
    2310:	2c 83       	std	Y+4, r18	; 0x04
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	c1 f0       	breq	.+48     	; 0x234c <LCD_moveCursor+0x56>
    231c:	2c 81       	ldd	r18, Y+4	; 0x04
    231e:	3d 81       	ldd	r19, Y+5	; 0x05
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	2c f4       	brge	.+10     	; 0x2330 <LCD_moveCursor+0x3a>
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	61 f0       	breq	.+24     	; 0x2346 <LCD_moveCursor+0x50>
    232e:	19 c0       	rjmp	.+50     	; 0x2362 <LCD_moveCursor+0x6c>
    2330:	2c 81       	ldd	r18, Y+4	; 0x04
    2332:	3d 81       	ldd	r19, Y+5	; 0x05
    2334:	22 30       	cpi	r18, 0x02	; 2
    2336:	31 05       	cpc	r19, r1
    2338:	69 f0       	breq	.+26     	; 0x2354 <LCD_moveCursor+0x5e>
    233a:	8c 81       	ldd	r24, Y+4	; 0x04
    233c:	9d 81       	ldd	r25, Y+5	; 0x05
    233e:	83 30       	cpi	r24, 0x03	; 3
    2340:	91 05       	cpc	r25, r1
    2342:	61 f0       	breq	.+24     	; 0x235c <LCD_moveCursor+0x66>
    2344:	0e c0       	rjmp	.+28     	; 0x2362 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2346:	8b 81       	ldd	r24, Y+3	; 0x03
    2348:	89 83       	std	Y+1, r24	; 0x01
    234a:	0b c0       	rjmp	.+22     	; 0x2362 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	80 5c       	subi	r24, 0xC0	; 192
    2350:	89 83       	std	Y+1, r24	; 0x01
    2352:	07 c0       	rjmp	.+14     	; 0x2362 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2354:	8b 81       	ldd	r24, Y+3	; 0x03
    2356:	80 5f       	subi	r24, 0xF0	; 240
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	03 c0       	rjmp	.+6      	; 0x2362 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	80 5b       	subi	r24, 0xB0	; 176
    2360:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	80 68       	ori	r24, 0x80	; 128
    2366:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_sendCommand>
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <LCD_displayStringRowColumn>:
 * @brief  Display the required string in a specified row and column index on the screen.
 * @param  Row, Column and the string to display.
 * @return void.
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	00 d0       	rcall	.+0      	; 0x2380 <LCD_displayStringRowColumn+0x6>
    2380:	00 d0       	rcall	.+0      	; 0x2382 <LCD_displayStringRowColumn+0x8>
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	89 83       	std	Y+1, r24	; 0x01
    2388:	6a 83       	std	Y+2, r22	; 0x02
    238a:	5c 83       	std	Y+4, r21	; 0x04
    238c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    238e:	89 81       	ldd	r24, Y+1	; 0x01
    2390:	6a 81       	ldd	r22, Y+2	; 0x02
    2392:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
}
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <LCD_intgerToString>:
 * @brief  Display the required decimal value on the screen.
 * @param  integer to display.
 * @return void.
 */
void LCD_intgerToString(int data)
{
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	62 97       	sbiw	r28, 0x12	; 18
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	9a 8b       	std	Y+18, r25	; 0x12
    23c2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    23c4:	89 89       	ldd	r24, Y+17	; 0x11
    23c6:	9a 89       	ldd	r25, Y+18	; 0x12
    23c8:	9e 01       	movw	r18, r28
    23ca:	2f 5f       	subi	r18, 0xFF	; 255
    23cc:	3f 4f       	sbci	r19, 0xFF	; 255
    23ce:	b9 01       	movw	r22, r18
    23d0:	4a e0       	ldi	r20, 0x0A	; 10
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	0e 94 67 1e 	call	0x3cce	; 0x3cce <itoa>
   LCD_displayString(buff); /* Display the string */
    23d8:	ce 01       	movw	r24, r28
    23da:	01 96       	adiw	r24, 0x01	; 1
    23dc:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
}
    23e0:	62 96       	adiw	r28, 0x12	; 18
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	cf 91       	pop	r28
    23ee:	df 91       	pop	r29
    23f0:	08 95       	ret

000023f2 <LCD_clearScreen>:
 * @brief  Send the clear screen command.
 * @param  void.
 * @return void.
 */
void LCD_clearScreen(void)
{
    23f2:	df 93       	push	r29
    23f4:	cf 93       	push	r28
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    23fa:	81 e0       	ldi	r24, 0x01	; 1
    23fc:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <LCD_sendCommand>
}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <KEYPAD_getPressedKey>:
 * @brief  Get the Keypad pressed button.
 * @param  void.
 * @return Key Pressed.
 */
uint8 KEYPAD_getPressedKey(void)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	60 97       	sbiw	r28, 0x10	; 16
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	40 e0       	ldi	r20, 0x00	; 0
    2420:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	40 e0       	ldi	r20, 0x00	; 0
    242a:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	62 e0       	ldi	r22, 0x02	; 2
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	63 e0       	ldi	r22, 0x03	; 3
    243c:	40 e0       	ldi	r20, 0x00	; 0
    243e:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	64 e0       	ldi	r22, 0x04	; 4
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	65 e0       	ldi	r22, 0x05	; 5
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	66 e0       	ldi	r22, 0x06	; 6
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	67 e0       	ldi	r22, 0x07	; 7
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    246a:	1f 86       	std	Y+15, r1	; 0x0f
    246c:	ab c0       	rjmp	.+342    	; 0x25c4 <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    246e:	81 e0       	ldi	r24, 0x01	; 1
    2470:	6f 85       	ldd	r22, Y+15	; 0x0f
    2472:	41 e0       	ldi	r20, 0x01	; 1
    2474:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	6f 85       	ldd	r22, Y+15	; 0x0f
    247c:	40 e0       	ldi	r20, 0x00	; 0
    247e:	0e 94 29 0a 	call	0x1452	; 0x1452 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2482:	18 8a       	std	Y+16, r1	; 0x10
    2484:	22 c0       	rjmp	.+68     	; 0x24ca <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2486:	88 89       	ldd	r24, Y+16	; 0x10
    2488:	98 2f       	mov	r25, r24
    248a:	9c 5f       	subi	r25, 0xFC	; 252
    248c:	81 e0       	ldi	r24, 0x01	; 1
    248e:	69 2f       	mov	r22, r25
    2490:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <GPIO_readPin>
    2494:	88 23       	and	r24, r24
    2496:	b1 f4       	brne	.+44     	; 0x24c4 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2498:	8f 85       	ldd	r24, Y+15	; 0x0f
    249a:	88 2f       	mov	r24, r24
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	88 0f       	add	r24, r24
    24a0:	99 1f       	adc	r25, r25
    24a2:	88 0f       	add	r24, r24
    24a4:	99 1f       	adc	r25, r25
    24a6:	98 2f       	mov	r25, r24
    24a8:	88 89       	ldd	r24, Y+16	; 0x10
    24aa:	89 0f       	add	r24, r25
    24ac:	8f 5f       	subi	r24, 0xFF	; 255
    24ae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    24b2:	60 96       	adiw	r28, 0x10	; 16
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    24c4:	88 89       	ldd	r24, Y+16	; 0x10
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	88 8b       	std	Y+16, r24	; 0x10
    24ca:	88 89       	ldd	r24, Y+16	; 0x10
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	d8 f2       	brcs	.-74     	; 0x2486 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    24d4:	40 e0       	ldi	r20, 0x00	; 0
    24d6:	0e 94 3e 09 	call	0x127c	; 0x127c <GPIO_setupPinDirection>
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	a0 ea       	ldi	r26, 0xA0	; 160
    24e0:	b0 e4       	ldi	r27, 0x40	; 64
    24e2:	8b 87       	std	Y+11, r24	; 0x0b
    24e4:	9c 87       	std	Y+12, r25	; 0x0c
    24e6:	ad 87       	std	Y+13, r26	; 0x0d
    24e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    24f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	4a ef       	ldi	r20, 0xFA	; 250
    24f8:	54 e4       	ldi	r21, 0x44	; 68
    24fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fe:	dc 01       	movw	r26, r24
    2500:	cb 01       	movw	r24, r22
    2502:	8f 83       	std	Y+7, r24	; 0x07
    2504:	98 87       	std	Y+8, r25	; 0x08
    2506:	a9 87       	std	Y+9, r26	; 0x09
    2508:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	40 e8       	ldi	r20, 0x80	; 128
    2518:	5f e3       	ldi	r21, 0x3F	; 63
    251a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    251e:	88 23       	and	r24, r24
    2520:	2c f4       	brge	.+10     	; 0x252c <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	9e 83       	std	Y+6, r25	; 0x06
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	3f c0       	rjmp	.+126    	; 0x25aa <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	20 e0       	ldi	r18, 0x00	; 0
    2536:	3f ef       	ldi	r19, 0xFF	; 255
    2538:	4f e7       	ldi	r20, 0x7F	; 127
    253a:	57 e4       	ldi	r21, 0x47	; 71
    253c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2540:	18 16       	cp	r1, r24
    2542:	4c f5       	brge	.+82     	; 0x2596 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2544:	6b 85       	ldd	r22, Y+11	; 0x0b
    2546:	7c 85       	ldd	r23, Y+12	; 0x0c
    2548:	8d 85       	ldd	r24, Y+13	; 0x0d
    254a:	9e 85       	ldd	r25, Y+14	; 0x0e
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	30 e0       	ldi	r19, 0x00	; 0
    2550:	40 e2       	ldi	r20, 0x20	; 32
    2552:	51 e4       	ldi	r21, 0x41	; 65
    2554:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2558:	dc 01       	movw	r26, r24
    255a:	cb 01       	movw	r24, r22
    255c:	bc 01       	movw	r22, r24
    255e:	cd 01       	movw	r24, r26
    2560:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2564:	dc 01       	movw	r26, r24
    2566:	cb 01       	movw	r24, r22
    2568:	9e 83       	std	Y+6, r25	; 0x06
    256a:	8d 83       	std	Y+5, r24	; 0x05
    256c:	0f c0       	rjmp	.+30     	; 0x258c <KEYPAD_getPressedKey+0x186>
    256e:	88 ec       	ldi	r24, 0xC8	; 200
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	9c 83       	std	Y+4, r25	; 0x04
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	9c 81       	ldd	r25, Y+4	; 0x04
    257a:	01 97       	sbiw	r24, 0x01	; 1
    257c:	f1 f7       	brne	.-4      	; 0x257a <KEYPAD_getPressedKey+0x174>
    257e:	9c 83       	std	Y+4, r25	; 0x04
    2580:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	8d 81       	ldd	r24, Y+5	; 0x05
    2584:	9e 81       	ldd	r25, Y+6	; 0x06
    2586:	01 97       	sbiw	r24, 0x01	; 1
    2588:	9e 83       	std	Y+6, r25	; 0x06
    258a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    258c:	8d 81       	ldd	r24, Y+5	; 0x05
    258e:	9e 81       	ldd	r25, Y+6	; 0x06
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	69 f7       	brne	.-38     	; 0x256e <KEYPAD_getPressedKey+0x168>
    2594:	14 c0       	rjmp	.+40     	; 0x25be <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	9e 83       	std	Y+6, r25	; 0x06
    25a8:	8d 83       	std	Y+5, r24	; 0x05
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	9a 83       	std	Y+2, r25	; 0x02
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <KEYPAD_getPressedKey+0x1b0>
    25ba:	9a 83       	std	Y+2, r25	; 0x02
    25bc:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    25be:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c0:	8f 5f       	subi	r24, 0xFF	; 255
    25c2:	8f 87       	std	Y+15, r24	; 0x0f
    25c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25c6:	84 30       	cpi	r24, 0x04	; 4
    25c8:	08 f4       	brcc	.+2      	; 0x25cc <KEYPAD_getPressedKey+0x1c6>
    25ca:	51 cf       	rjmp	.-350    	; 0x246e <KEYPAD_getPressedKey+0x68>
    25cc:	4e cf       	rjmp	.-356    	; 0x246a <KEYPAD_getPressedKey+0x64>

000025ce <KEYPAD_4x4_adjustKeyNumber>:
 * @brief  Update the keypad pressed button value with the correct one in keypad 4x4 shape.
 * @param  Button number.
 * @return Key Value.
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	00 d0       	rcall	.+0      	; 0x25d4 <KEYPAD_4x4_adjustKeyNumber+0x6>
    25d4:	00 d0       	rcall	.+0      	; 0x25d6 <KEYPAD_4x4_adjustKeyNumber+0x8>
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    25dc:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	28 2f       	mov	r18, r24
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	3c 83       	std	Y+4, r19	; 0x04
    25e6:	2b 83       	std	Y+3, r18	; 0x03
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	88 30       	cpi	r24, 0x08	; 8
    25ee:	91 05       	cpc	r25, r1
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <KEYPAD_4x4_adjustKeyNumber+0x26>
    25f2:	70 c0       	rjmp	.+224    	; 0x26d4 <KEYPAD_4x4_adjustKeyNumber+0x106>
    25f4:	2b 81       	ldd	r18, Y+3	; 0x03
    25f6:	3c 81       	ldd	r19, Y+4	; 0x04
    25f8:	29 30       	cpi	r18, 0x09	; 9
    25fa:	31 05       	cpc	r19, r1
    25fc:	5c f5       	brge	.+86     	; 0x2654 <KEYPAD_4x4_adjustKeyNumber+0x86>
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	91 05       	cpc	r25, r1
    2606:	09 f4       	brne	.+2      	; 0x260a <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2608:	59 c0       	rjmp	.+178    	; 0x26bc <KEYPAD_4x4_adjustKeyNumber+0xee>
    260a:	2b 81       	ldd	r18, Y+3	; 0x03
    260c:	3c 81       	ldd	r19, Y+4	; 0x04
    260e:	25 30       	cpi	r18, 0x05	; 5
    2610:	31 05       	cpc	r19, r1
    2612:	9c f4       	brge	.+38     	; 0x263a <KEYPAD_4x4_adjustKeyNumber+0x6c>
    2614:	8b 81       	ldd	r24, Y+3	; 0x03
    2616:	9c 81       	ldd	r25, Y+4	; 0x04
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	91 05       	cpc	r25, r1
    261c:	09 f4       	brne	.+2      	; 0x2620 <KEYPAD_4x4_adjustKeyNumber+0x52>
    261e:	48 c0       	rjmp	.+144    	; 0x26b0 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2620:	2b 81       	ldd	r18, Y+3	; 0x03
    2622:	3c 81       	ldd	r19, Y+4	; 0x04
    2624:	23 30       	cpi	r18, 0x03	; 3
    2626:	31 05       	cpc	r19, r1
    2628:	0c f0       	brlt	.+2      	; 0x262c <KEYPAD_4x4_adjustKeyNumber+0x5e>
    262a:	45 c0       	rjmp	.+138    	; 0x26b6 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    262c:	8b 81       	ldd	r24, Y+3	; 0x03
    262e:	9c 81       	ldd	r25, Y+4	; 0x04
    2630:	81 30       	cpi	r24, 0x01	; 1
    2632:	91 05       	cpc	r25, r1
    2634:	09 f4       	brne	.+2      	; 0x2638 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2636:	39 c0       	rjmp	.+114    	; 0x26aa <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2638:	67 c0       	rjmp	.+206    	; 0x2708 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    263a:	2b 81       	ldd	r18, Y+3	; 0x03
    263c:	3c 81       	ldd	r19, Y+4	; 0x04
    263e:	26 30       	cpi	r18, 0x06	; 6
    2640:	31 05       	cpc	r19, r1
    2642:	09 f4       	brne	.+2      	; 0x2646 <KEYPAD_4x4_adjustKeyNumber+0x78>
    2644:	41 c0       	rjmp	.+130    	; 0x26c8 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	9c 81       	ldd	r25, Y+4	; 0x04
    264a:	87 30       	cpi	r24, 0x07	; 7
    264c:	91 05       	cpc	r25, r1
    264e:	0c f0       	brlt	.+2      	; 0x2652 <KEYPAD_4x4_adjustKeyNumber+0x84>
    2650:	3e c0       	rjmp	.+124    	; 0x26ce <KEYPAD_4x4_adjustKeyNumber+0x100>
    2652:	37 c0       	rjmp	.+110    	; 0x26c2 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    2654:	2b 81       	ldd	r18, Y+3	; 0x03
    2656:	3c 81       	ldd	r19, Y+4	; 0x04
    2658:	2c 30       	cpi	r18, 0x0C	; 12
    265a:	31 05       	cpc	r19, r1
    265c:	09 f4       	brne	.+2      	; 0x2660 <KEYPAD_4x4_adjustKeyNumber+0x92>
    265e:	46 c0       	rjmp	.+140    	; 0x26ec <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	8d 30       	cpi	r24, 0x0D	; 13
    2666:	91 05       	cpc	r25, r1
    2668:	5c f4       	brge	.+22     	; 0x2680 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    266a:	2b 81       	ldd	r18, Y+3	; 0x03
    266c:	3c 81       	ldd	r19, Y+4	; 0x04
    266e:	2a 30       	cpi	r18, 0x0A	; 10
    2670:	31 05       	cpc	r19, r1
    2672:	b1 f1       	breq	.+108    	; 0x26e0 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	8b 30       	cpi	r24, 0x0B	; 11
    267a:	91 05       	cpc	r25, r1
    267c:	a4 f5       	brge	.+104    	; 0x26e6 <KEYPAD_4x4_adjustKeyNumber+0x118>
    267e:	2d c0       	rjmp	.+90     	; 0x26da <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2680:	2b 81       	ldd	r18, Y+3	; 0x03
    2682:	3c 81       	ldd	r19, Y+4	; 0x04
    2684:	2e 30       	cpi	r18, 0x0E	; 14
    2686:	31 05       	cpc	r19, r1
    2688:	b9 f1       	breq	.+110    	; 0x26f8 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    268a:	8b 81       	ldd	r24, Y+3	; 0x03
    268c:	9c 81       	ldd	r25, Y+4	; 0x04
    268e:	8e 30       	cpi	r24, 0x0E	; 14
    2690:	91 05       	cpc	r25, r1
    2692:	7c f1       	brlt	.+94     	; 0x26f2 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2694:	2b 81       	ldd	r18, Y+3	; 0x03
    2696:	3c 81       	ldd	r19, Y+4	; 0x04
    2698:	2f 30       	cpi	r18, 0x0F	; 15
    269a:	31 05       	cpc	r19, r1
    269c:	79 f1       	breq	.+94     	; 0x26fc <KEYPAD_4x4_adjustKeyNumber+0x12e>
    269e:	8b 81       	ldd	r24, Y+3	; 0x03
    26a0:	9c 81       	ldd	r25, Y+4	; 0x04
    26a2:	80 31       	cpi	r24, 0x10	; 16
    26a4:	91 05       	cpc	r25, r1
    26a6:	69 f1       	breq	.+90     	; 0x2702 <KEYPAD_4x4_adjustKeyNumber+0x134>
    26a8:	2f c0       	rjmp	.+94     	; 0x2708 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    26aa:	87 e0       	ldi	r24, 0x07	; 7
    26ac:	89 83       	std	Y+1, r24	; 0x01
    26ae:	2e c0       	rjmp	.+92     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    26b0:	88 e0       	ldi	r24, 0x08	; 8
    26b2:	89 83       	std	Y+1, r24	; 0x01
    26b4:	2b c0       	rjmp	.+86     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    26b6:	89 e0       	ldi	r24, 0x09	; 9
    26b8:	89 83       	std	Y+1, r24	; 0x01
    26ba:	28 c0       	rjmp	.+80     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    26bc:	85 e2       	ldi	r24, 0x25	; 37
    26be:	89 83       	std	Y+1, r24	; 0x01
    26c0:	25 c0       	rjmp	.+74     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    26c2:	84 e0       	ldi	r24, 0x04	; 4
    26c4:	89 83       	std	Y+1, r24	; 0x01
    26c6:	22 c0       	rjmp	.+68     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    26c8:	85 e0       	ldi	r24, 0x05	; 5
    26ca:	89 83       	std	Y+1, r24	; 0x01
    26cc:	1f c0       	rjmp	.+62     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    26ce:	86 e0       	ldi	r24, 0x06	; 6
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	1c c0       	rjmp	.+56     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    26d4:	8a e2       	ldi	r24, 0x2A	; 42
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	19 c0       	rjmp	.+50     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	89 83       	std	Y+1, r24	; 0x01
    26de:	16 c0       	rjmp	.+44     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    26e0:	82 e0       	ldi	r24, 0x02	; 2
    26e2:	89 83       	std	Y+1, r24	; 0x01
    26e4:	13 c0       	rjmp	.+38     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	89 83       	std	Y+1, r24	; 0x01
    26ea:	10 c0       	rjmp	.+32     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    26ec:	8d e2       	ldi	r24, 0x2D	; 45
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	0d c0       	rjmp	.+26     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    26f2:	8d e0       	ldi	r24, 0x0D	; 13
    26f4:	89 83       	std	Y+1, r24	; 0x01
    26f6:	0a c0       	rjmp	.+20     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    26f8:	19 82       	std	Y+1, r1	; 0x01
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    26fc:	8d e3       	ldi	r24, 0x3D	; 61
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	05 c0       	rjmp	.+10     	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2702:	8b e2       	ldi	r24, 0x2B	; 43
    2704:	89 83       	std	Y+1, r24	; 0x01
    2706:	02 c0       	rjmp	.+4      	; 0x270c <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    270c:	89 81       	ldd	r24, Y+1	; 0x01
} 
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <Timer1_handler>:
uint8 enter_fails = 0;
uint8 update_fails = 0;
uint8 people_status = 0;

void Timer1_handler(void)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	cd b7       	in	r28, 0x3d	; 61
    2722:	de b7       	in	r29, 0x3e	; 62
	++counter;
    2724:	80 91 53 01 	lds	r24, 0x0153
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	80 93 53 01 	sts	0x0153, r24
}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	08 95       	ret

00002734 <main>:

int main()
{
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	df 93       	push	r29
    273a:	cf 93       	push	r28
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	c0 5c       	subi	r28, 0xC0	; 192
    2742:	d0 40       	sbci	r29, 0x00	; 0
    2744:	0f b6       	in	r0, 0x3f	; 63
    2746:	f8 94       	cli
    2748:	de bf       	out	0x3e, r29	; 62
    274a:	0f be       	out	0x3f, r0	; 63
    274c:	cd bf       	out	0x3d, r28	; 61
	/********** Initializations **********/
	/* LCD Initialization */
	LCD_init();
    274e:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LCD_init>

	/* UART Initialization */
	UART_ConfigType uart_cfg = {UART_8BIT_DATA, UART_Parity_OFF, UART_STOPBIT_1, 9600};
    2752:	ce 01       	movw	r24, r28
    2754:	87 55       	subi	r24, 0x57	; 87
    2756:	9f 4f       	sbci	r25, 0xFF	; 255
    2758:	c9 54       	subi	r28, 0x49	; 73
    275a:	df 4f       	sbci	r29, 0xFF	; 255
    275c:	99 83       	std	Y+1, r25	; 0x01
    275e:	88 83       	st	Y, r24
    2760:	c7 5b       	subi	r28, 0xB7	; 183
    2762:	d0 40       	sbci	r29, 0x00	; 0
    2764:	88 e3       	ldi	r24, 0x38	; 56
    2766:	91 e0       	ldi	r25, 0x01	; 1
    2768:	c7 54       	subi	r28, 0x47	; 71
    276a:	df 4f       	sbci	r29, 0xFF	; 255
    276c:	99 83       	std	Y+1, r25	; 0x01
    276e:	88 83       	st	Y, r24
    2770:	c9 5b       	subi	r28, 0xB9	; 185
    2772:	d0 40       	sbci	r29, 0x00	; 0
    2774:	97 e0       	ldi	r25, 0x07	; 7
    2776:	c5 54       	subi	r28, 0x45	; 69
    2778:	df 4f       	sbci	r29, 0xFF	; 255
    277a:	98 83       	st	Y, r25
    277c:	cb 5b       	subi	r28, 0xBB	; 187
    277e:	d0 40       	sbci	r29, 0x00	; 0
    2780:	c7 54       	subi	r28, 0x47	; 71
    2782:	df 4f       	sbci	r29, 0xFF	; 255
    2784:	e8 81       	ld	r30, Y
    2786:	f9 81       	ldd	r31, Y+1	; 0x01
    2788:	c9 5b       	subi	r28, 0xB9	; 185
    278a:	d0 40       	sbci	r29, 0x00	; 0
    278c:	00 80       	ld	r0, Z
    278e:	c7 54       	subi	r28, 0x47	; 71
    2790:	df 4f       	sbci	r29, 0xFF	; 255
    2792:	88 81       	ld	r24, Y
    2794:	99 81       	ldd	r25, Y+1	; 0x01
    2796:	c9 5b       	subi	r28, 0xB9	; 185
    2798:	d0 40       	sbci	r29, 0x00	; 0
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	c7 54       	subi	r28, 0x47	; 71
    279e:	df 4f       	sbci	r29, 0xFF	; 255
    27a0:	99 83       	std	Y+1, r25	; 0x01
    27a2:	88 83       	st	Y, r24
    27a4:	c9 5b       	subi	r28, 0xB9	; 185
    27a6:	d0 40       	sbci	r29, 0x00	; 0
    27a8:	c9 54       	subi	r28, 0x49	; 73
    27aa:	df 4f       	sbci	r29, 0xFF	; 255
    27ac:	e8 81       	ld	r30, Y
    27ae:	f9 81       	ldd	r31, Y+1	; 0x01
    27b0:	c7 5b       	subi	r28, 0xB7	; 183
    27b2:	d0 40       	sbci	r29, 0x00	; 0
    27b4:	00 82       	st	Z, r0
    27b6:	c9 54       	subi	r28, 0x49	; 73
    27b8:	df 4f       	sbci	r29, 0xFF	; 255
    27ba:	88 81       	ld	r24, Y
    27bc:	99 81       	ldd	r25, Y+1	; 0x01
    27be:	c7 5b       	subi	r28, 0xB7	; 183
    27c0:	d0 40       	sbci	r29, 0x00	; 0
    27c2:	01 96       	adiw	r24, 0x01	; 1
    27c4:	c9 54       	subi	r28, 0x49	; 73
    27c6:	df 4f       	sbci	r29, 0xFF	; 255
    27c8:	99 83       	std	Y+1, r25	; 0x01
    27ca:	88 83       	st	Y, r24
    27cc:	c7 5b       	subi	r28, 0xB7	; 183
    27ce:	d0 40       	sbci	r29, 0x00	; 0
    27d0:	c5 54       	subi	r28, 0x45	; 69
    27d2:	df 4f       	sbci	r29, 0xFF	; 255
    27d4:	98 81       	ld	r25, Y
    27d6:	cb 5b       	subi	r28, 0xBB	; 187
    27d8:	d0 40       	sbci	r29, 0x00	; 0
    27da:	91 50       	subi	r25, 0x01	; 1
    27dc:	c5 54       	subi	r28, 0x45	; 69
    27de:	df 4f       	sbci	r29, 0xFF	; 255
    27e0:	98 83       	st	Y, r25
    27e2:	cb 5b       	subi	r28, 0xBB	; 187
    27e4:	d0 40       	sbci	r29, 0x00	; 0
    27e6:	c5 54       	subi	r28, 0x45	; 69
    27e8:	df 4f       	sbci	r29, 0xFF	; 255
    27ea:	e8 81       	ld	r30, Y
    27ec:	cb 5b       	subi	r28, 0xBB	; 187
    27ee:	d0 40       	sbci	r29, 0x00	; 0
    27f0:	ee 23       	and	r30, r30
    27f2:	31 f6       	brne	.-116    	; 0x2780 <main+0x4c>
	UART_init(&uart_cfg);
    27f4:	ce 01       	movw	r24, r28
    27f6:	87 55       	subi	r24, 0x57	; 87
    27f8:	9f 4f       	sbci	r25, 0xFF	; 255
    27fa:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_init>

	/* Creating timer 1 object to count time */
	sei();
    27fe:	78 94       	sei
	Timer_ConfigType time1 = {0, 31250, TIMER1_ID, TIMER_F_CPU_256, TIMER_CTC};
    2800:	ce 01       	movw	r24, r28
    2802:	80 55       	subi	r24, 0x50	; 80
    2804:	9f 4f       	sbci	r25, 0xFF	; 255
    2806:	c4 54       	subi	r28, 0x44	; 68
    2808:	df 4f       	sbci	r29, 0xFF	; 255
    280a:	99 83       	std	Y+1, r25	; 0x01
    280c:	88 83       	st	Y, r24
    280e:	cc 5b       	subi	r28, 0xBC	; 188
    2810:	d0 40       	sbci	r29, 0x00	; 0
    2812:	81 e3       	ldi	r24, 0x31	; 49
    2814:	91 e0       	ldi	r25, 0x01	; 1
    2816:	c2 54       	subi	r28, 0x42	; 66
    2818:	df 4f       	sbci	r29, 0xFF	; 255
    281a:	99 83       	std	Y+1, r25	; 0x01
    281c:	88 83       	st	Y, r24
    281e:	ce 5b       	subi	r28, 0xBE	; 190
    2820:	d0 40       	sbci	r29, 0x00	; 0
    2822:	97 e0       	ldi	r25, 0x07	; 7
    2824:	c0 54       	subi	r28, 0x40	; 64
    2826:	df 4f       	sbci	r29, 0xFF	; 255
    2828:	98 83       	st	Y, r25
    282a:	c0 5c       	subi	r28, 0xC0	; 192
    282c:	d0 40       	sbci	r29, 0x00	; 0
    282e:	c2 54       	subi	r28, 0x42	; 66
    2830:	df 4f       	sbci	r29, 0xFF	; 255
    2832:	e8 81       	ld	r30, Y
    2834:	f9 81       	ldd	r31, Y+1	; 0x01
    2836:	ce 5b       	subi	r28, 0xBE	; 190
    2838:	d0 40       	sbci	r29, 0x00	; 0
    283a:	00 80       	ld	r0, Z
    283c:	c2 54       	subi	r28, 0x42	; 66
    283e:	df 4f       	sbci	r29, 0xFF	; 255
    2840:	88 81       	ld	r24, Y
    2842:	99 81       	ldd	r25, Y+1	; 0x01
    2844:	ce 5b       	subi	r28, 0xBE	; 190
    2846:	d0 40       	sbci	r29, 0x00	; 0
    2848:	01 96       	adiw	r24, 0x01	; 1
    284a:	c2 54       	subi	r28, 0x42	; 66
    284c:	df 4f       	sbci	r29, 0xFF	; 255
    284e:	99 83       	std	Y+1, r25	; 0x01
    2850:	88 83       	st	Y, r24
    2852:	ce 5b       	subi	r28, 0xBE	; 190
    2854:	d0 40       	sbci	r29, 0x00	; 0
    2856:	c4 54       	subi	r28, 0x44	; 68
    2858:	df 4f       	sbci	r29, 0xFF	; 255
    285a:	e8 81       	ld	r30, Y
    285c:	f9 81       	ldd	r31, Y+1	; 0x01
    285e:	cc 5b       	subi	r28, 0xBC	; 188
    2860:	d0 40       	sbci	r29, 0x00	; 0
    2862:	00 82       	st	Z, r0
    2864:	c4 54       	subi	r28, 0x44	; 68
    2866:	df 4f       	sbci	r29, 0xFF	; 255
    2868:	88 81       	ld	r24, Y
    286a:	99 81       	ldd	r25, Y+1	; 0x01
    286c:	cc 5b       	subi	r28, 0xBC	; 188
    286e:	d0 40       	sbci	r29, 0x00	; 0
    2870:	01 96       	adiw	r24, 0x01	; 1
    2872:	c4 54       	subi	r28, 0x44	; 68
    2874:	df 4f       	sbci	r29, 0xFF	; 255
    2876:	99 83       	std	Y+1, r25	; 0x01
    2878:	88 83       	st	Y, r24
    287a:	cc 5b       	subi	r28, 0xBC	; 188
    287c:	d0 40       	sbci	r29, 0x00	; 0
    287e:	c0 54       	subi	r28, 0x40	; 64
    2880:	df 4f       	sbci	r29, 0xFF	; 255
    2882:	98 81       	ld	r25, Y
    2884:	c0 5c       	subi	r28, 0xC0	; 192
    2886:	d0 40       	sbci	r29, 0x00	; 0
    2888:	91 50       	subi	r25, 0x01	; 1
    288a:	c0 54       	subi	r28, 0x40	; 64
    288c:	df 4f       	sbci	r29, 0xFF	; 255
    288e:	98 83       	st	Y, r25
    2890:	c0 5c       	subi	r28, 0xC0	; 192
    2892:	d0 40       	sbci	r29, 0x00	; 0
    2894:	c0 54       	subi	r28, 0x40	; 64
    2896:	df 4f       	sbci	r29, 0xFF	; 255
    2898:	e8 81       	ld	r30, Y
    289a:	c0 5c       	subi	r28, 0xC0	; 192
    289c:	d0 40       	sbci	r29, 0x00	; 0
    289e:	ee 23       	and	r30, r30
    28a0:	31 f6       	brne	.-116    	; 0x282e <main+0xfa>
	Timer_init(&time1);
    28a2:	ce 01       	movw	r24, r28
    28a4:	80 55       	subi	r24, 0x50	; 80
    28a6:	9f 4f       	sbci	r25, 0xFF	; 255
    28a8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <Timer_init>
	Timer_setCallBack(Timer1_handler, TIMER1_ID);
    28ac:	8e e8       	ldi	r24, 0x8E	; 142
    28ae:	93 e1       	ldi	r25, 0x13	; 19
    28b0:	61 e0       	ldi	r22, 0x01	; 1
    28b2:	0e 94 05 09 	call	0x120a	; 0x120a <Timer_setCallBack>
    28b6:	50 c3       	rjmp	.+1696   	; 0x2f58 <main+0x824>

	/* Enter Password for the first Time */
	while(pass_state != PASS_CORRECT)
	{
		UART_sendByte(PASS_LOAD);
    28b8:	80 ea       	ldi	r24, 0xA0	; 160
    28ba:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		LCD_clearScreen();
    28be:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
		LCD_displayString("Plz Enter Pass:");
    28c2:	80 e6       	ldi	r24, 0x60	; 96
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
		LCD_moveCursor(1, 0);
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_moveCursor>
		for(i = 0; i < 5; ++i)
    28d2:	10 92 50 01 	sts	0x0150, r1
    28d6:	c6 c0       	rjmp	.+396    	; 0x2a64 <main+0x330>
		{
			pass[i] = KEYPAD_getPressedKey();
    28d8:	80 91 50 01 	lds	r24, 0x0150
    28dc:	08 2f       	mov	r16, r24
    28de:	10 e0       	ldi	r17, 0x00	; 0
    28e0:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    28e4:	f8 01       	movw	r30, r16
    28e6:	ea 5b       	subi	r30, 0xBA	; 186
    28e8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ea:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    28ec:	8a e2       	ldi	r24, 0x2A	; 42
    28ee:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    28f2:	fe 01       	movw	r30, r28
    28f4:	eb 55       	subi	r30, 0x5B	; 91
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	aa ef       	ldi	r26, 0xFA	; 250
    28fe:	b3 e4       	ldi	r27, 0x43	; 67
    2900:	80 83       	st	Z, r24
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	a2 83       	std	Z+2, r26	; 0x02
    2906:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	8e 01       	movw	r16, r28
    290a:	0f 55       	subi	r16, 0x5F	; 95
    290c:	1f 4f       	sbci	r17, 0xFF	; 255
    290e:	fe 01       	movw	r30, r28
    2910:	eb 55       	subi	r30, 0x5B	; 91
    2912:	ff 4f       	sbci	r31, 0xFF	; 255
    2914:	60 81       	ld	r22, Z
    2916:	71 81       	ldd	r23, Z+1	; 0x01
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	93 81       	ldd	r25, Z+3	; 0x03
    291c:	20 e0       	ldi	r18, 0x00	; 0
    291e:	30 e0       	ldi	r19, 0x00	; 0
    2920:	4a ef       	ldi	r20, 0xFA	; 250
    2922:	54 e4       	ldi	r21, 0x44	; 68
    2924:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	f8 01       	movw	r30, r16
    292e:	80 83       	st	Z, r24
    2930:	91 83       	std	Z+1, r25	; 0x01
    2932:	a2 83       	std	Z+2, r26	; 0x02
    2934:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2936:	fe 01       	movw	r30, r28
    2938:	ef 55       	subi	r30, 0x5F	; 95
    293a:	ff 4f       	sbci	r31, 0xFF	; 255
    293c:	60 81       	ld	r22, Z
    293e:	71 81       	ldd	r23, Z+1	; 0x01
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	44 f4       	brge	.+16     	; 0x2964 <main+0x230>
		__ticks = 1;
    2954:	fe 01       	movw	r30, r28
    2956:	e1 56       	subi	r30, 0x61	; 97
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	91 83       	std	Z+1, r25	; 0x01
    2960:	80 83       	st	Z, r24
    2962:	64 c0       	rjmp	.+200    	; 0x2a2c <main+0x2f8>
	else if (__tmp > 65535)
    2964:	fe 01       	movw	r30, r28
    2966:	ef 55       	subi	r30, 0x5F	; 95
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	60 81       	ld	r22, Z
    296c:	71 81       	ldd	r23, Z+1	; 0x01
    296e:	82 81       	ldd	r24, Z+2	; 0x02
    2970:	93 81       	ldd	r25, Z+3	; 0x03
    2972:	20 e0       	ldi	r18, 0x00	; 0
    2974:	3f ef       	ldi	r19, 0xFF	; 255
    2976:	4f e7       	ldi	r20, 0x7F	; 127
    2978:	57 e4       	ldi	r21, 0x47	; 71
    297a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    297e:	18 16       	cp	r1, r24
    2980:	0c f0       	brlt	.+2      	; 0x2984 <main+0x250>
    2982:	43 c0       	rjmp	.+134    	; 0x2a0a <main+0x2d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2984:	fe 01       	movw	r30, r28
    2986:	eb 55       	subi	r30, 0x5B	; 91
    2988:	ff 4f       	sbci	r31, 0xFF	; 255
    298a:	60 81       	ld	r22, Z
    298c:	71 81       	ldd	r23, Z+1	; 0x01
    298e:	82 81       	ldd	r24, Z+2	; 0x02
    2990:	93 81       	ldd	r25, Z+3	; 0x03
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	8e 01       	movw	r16, r28
    29a4:	01 56       	subi	r16, 0x61	; 97
    29a6:	1f 4f       	sbci	r17, 0xFF	; 255
    29a8:	bc 01       	movw	r22, r24
    29aa:	cd 01       	movw	r24, r26
    29ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	f8 01       	movw	r30, r16
    29b6:	91 83       	std	Z+1, r25	; 0x01
    29b8:	80 83       	st	Z, r24
    29ba:	1f c0       	rjmp	.+62     	; 0x29fa <main+0x2c6>
    29bc:	fe 01       	movw	r30, r28
    29be:	e3 56       	subi	r30, 0x63	; 99
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	88 ec       	ldi	r24, 0xC8	; 200
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	fe 01       	movw	r30, r28
    29cc:	e3 56       	subi	r30, 0x63	; 99
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	80 81       	ld	r24, Z
    29d2:	91 81       	ldd	r25, Z+1	; 0x01
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <main+0x2a0>
    29d8:	fe 01       	movw	r30, r28
    29da:	e3 56       	subi	r30, 0x63	; 99
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	91 83       	std	Z+1, r25	; 0x01
    29e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e2:	de 01       	movw	r26, r28
    29e4:	a1 56       	subi	r26, 0x61	; 97
    29e6:	bf 4f       	sbci	r27, 0xFF	; 255
    29e8:	fe 01       	movw	r30, r28
    29ea:	e1 56       	subi	r30, 0x61	; 97
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	91 81       	ldd	r25, Z+1	; 0x01
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	11 96       	adiw	r26, 0x01	; 1
    29f6:	9c 93       	st	X, r25
    29f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29fa:	fe 01       	movw	r30, r28
    29fc:	e1 56       	subi	r30, 0x61	; 97
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	d1 f6       	brne	.-76     	; 0x29bc <main+0x288>
    2a08:	28 c0       	rjmp	.+80     	; 0x2a5a <main+0x326>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a0a:	8e 01       	movw	r16, r28
    2a0c:	01 56       	subi	r16, 0x61	; 97
    2a0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a10:	fe 01       	movw	r30, r28
    2a12:	ef 55       	subi	r30, 0x5F	; 95
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	60 81       	ld	r22, Z
    2a18:	71 81       	ldd	r23, Z+1	; 0x01
    2a1a:	82 81       	ldd	r24, Z+2	; 0x02
    2a1c:	93 81       	ldd	r25, Z+3	; 0x03
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	f8 01       	movw	r30, r16
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	de 01       	movw	r26, r28
    2a2e:	a5 56       	subi	r26, 0x65	; 101
    2a30:	bf 4f       	sbci	r27, 0xFF	; 255
    2a32:	fe 01       	movw	r30, r28
    2a34:	e1 56       	subi	r30, 0x61	; 97
    2a36:	ff 4f       	sbci	r31, 0xFF	; 255
    2a38:	80 81       	ld	r24, Z
    2a3a:	91 81       	ldd	r25, Z+1	; 0x01
    2a3c:	11 96       	adiw	r26, 0x01	; 1
    2a3e:	9c 93       	st	X, r25
    2a40:	8e 93       	st	-X, r24
    2a42:	fe 01       	movw	r30, r28
    2a44:	e5 56       	subi	r30, 0x65	; 101
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	01 97       	sbiw	r24, 0x01	; 1
    2a4e:	f1 f7       	brne	.-4      	; 0x2a4c <main+0x318>
    2a50:	fe 01       	movw	r30, r28
    2a52:	e5 56       	subi	r30, 0x65	; 101
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	91 83       	std	Z+1, r25	; 0x01
    2a58:	80 83       	st	Z, r24
	{
		UART_sendByte(PASS_LOAD);
		LCD_clearScreen();
		LCD_displayString("Plz Enter Pass:");
		LCD_moveCursor(1, 0);
		for(i = 0; i < 5; ++i)
    2a5a:	80 91 50 01 	lds	r24, 0x0150
    2a5e:	8f 5f       	subi	r24, 0xFF	; 255
    2a60:	80 93 50 01 	sts	0x0150, r24
    2a64:	80 91 50 01 	lds	r24, 0x0150
    2a68:	85 30       	cpi	r24, 0x05	; 5
    2a6a:	08 f4       	brcc	.+2      	; 0x2a6e <main+0x33a>
    2a6c:	35 cf       	rjmp	.-406    	; 0x28d8 <main+0x1a4>
		{
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != '=');
    2a6e:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    2a72:	8d 33       	cpi	r24, 0x3D	; 61
    2a74:	e1 f7       	brne	.-8      	; 0x2a6e <main+0x33a>
    2a76:	fe 01       	movw	r30, r28
    2a78:	e9 56       	subi	r30, 0x69	; 105
    2a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	aa ef       	ldi	r26, 0xFA	; 250
    2a82:	b3 e4       	ldi	r27, 0x43	; 67
    2a84:	80 83       	st	Z, r24
    2a86:	91 83       	std	Z+1, r25	; 0x01
    2a88:	a2 83       	std	Z+2, r26	; 0x02
    2a8a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8c:	8e 01       	movw	r16, r28
    2a8e:	0d 56       	subi	r16, 0x6D	; 109
    2a90:	1f 4f       	sbci	r17, 0xFF	; 255
    2a92:	fe 01       	movw	r30, r28
    2a94:	e9 56       	subi	r30, 0x69	; 105
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	4a ef       	ldi	r20, 0xFA	; 250
    2aa6:	54 e4       	ldi	r21, 0x44	; 68
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	80 83       	st	Z, r24
    2ab4:	91 83       	std	Z+1, r25	; 0x01
    2ab6:	a2 83       	std	Z+2, r26	; 0x02
    2ab8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aba:	fe 01       	movw	r30, r28
    2abc:	ed 56       	subi	r30, 0x6D	; 109
    2abe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac0:	60 81       	ld	r22, Z
    2ac2:	71 81       	ldd	r23, Z+1	; 0x01
    2ac4:	82 81       	ldd	r24, Z+2	; 0x02
    2ac6:	93 81       	ldd	r25, Z+3	; 0x03
    2ac8:	20 e0       	ldi	r18, 0x00	; 0
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	40 e8       	ldi	r20, 0x80	; 128
    2ace:	5f e3       	ldi	r21, 0x3F	; 63
    2ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad4:	88 23       	and	r24, r24
    2ad6:	44 f4       	brge	.+16     	; 0x2ae8 <main+0x3b4>
		__ticks = 1;
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ef 56       	subi	r30, 0x6F	; 111
    2adc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	91 83       	std	Z+1, r25	; 0x01
    2ae4:	80 83       	st	Z, r24
    2ae6:	64 c0       	rjmp	.+200    	; 0x2bb0 <main+0x47c>
	else if (__tmp > 65535)
    2ae8:	fe 01       	movw	r30, r28
    2aea:	ed 56       	subi	r30, 0x6D	; 109
    2aec:	ff 4f       	sbci	r31, 0xFF	; 255
    2aee:	60 81       	ld	r22, Z
    2af0:	71 81       	ldd	r23, Z+1	; 0x01
    2af2:	82 81       	ldd	r24, Z+2	; 0x02
    2af4:	93 81       	ldd	r25, Z+3	; 0x03
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	3f ef       	ldi	r19, 0xFF	; 255
    2afa:	4f e7       	ldi	r20, 0x7F	; 127
    2afc:	57 e4       	ldi	r21, 0x47	; 71
    2afe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b02:	18 16       	cp	r1, r24
    2b04:	0c f0       	brlt	.+2      	; 0x2b08 <main+0x3d4>
    2b06:	43 c0       	rjmp	.+134    	; 0x2b8e <main+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b08:	fe 01       	movw	r30, r28
    2b0a:	e9 56       	subi	r30, 0x69	; 105
    2b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0e:	60 81       	ld	r22, Z
    2b10:	71 81       	ldd	r23, Z+1	; 0x01
    2b12:	82 81       	ldd	r24, Z+2	; 0x02
    2b14:	93 81       	ldd	r25, Z+3	; 0x03
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e2       	ldi	r20, 0x20	; 32
    2b1c:	51 e4       	ldi	r21, 0x41	; 65
    2b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b22:	dc 01       	movw	r26, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8e 01       	movw	r16, r28
    2b28:	0f 56       	subi	r16, 0x6F	; 111
    2b2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	f8 01       	movw	r30, r16
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	1f c0       	rjmp	.+62     	; 0x2b7e <main+0x44a>
    2b40:	fe 01       	movw	r30, r28
    2b42:	e1 57       	subi	r30, 0x71	; 113
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	88 ec       	ldi	r24, 0xC8	; 200
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	91 83       	std	Z+1, r25	; 0x01
    2b4c:	80 83       	st	Z, r24
    2b4e:	fe 01       	movw	r30, r28
    2b50:	e1 57       	subi	r30, 0x71	; 113
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	91 81       	ldd	r25, Z+1	; 0x01
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <main+0x424>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e1 57       	subi	r30, 0x71	; 113
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	91 83       	std	Z+1, r25	; 0x01
    2b64:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b66:	de 01       	movw	r26, r28
    2b68:	af 56       	subi	r26, 0x6F	; 111
    2b6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	ef 56       	subi	r30, 0x6F	; 111
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	11 96       	adiw	r26, 0x01	; 1
    2b7a:	9c 93       	st	X, r25
    2b7c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	fe 01       	movw	r30, r28
    2b80:	ef 56       	subi	r30, 0x6F	; 111
    2b82:	ff 4f       	sbci	r31, 0xFF	; 255
    2b84:	80 81       	ld	r24, Z
    2b86:	91 81       	ldd	r25, Z+1	; 0x01
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	d1 f6       	brne	.-76     	; 0x2b40 <main+0x40c>
    2b8c:	27 c0       	rjmp	.+78     	; 0x2bdc <main+0x4a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	8e 01       	movw	r16, r28
    2b90:	0f 56       	subi	r16, 0x6F	; 111
    2b92:	1f 4f       	sbci	r17, 0xFF	; 255
    2b94:	fe 01       	movw	r30, r28
    2b96:	ed 56       	subi	r30, 0x6D	; 109
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	60 81       	ld	r22, Z
    2b9c:	71 81       	ldd	r23, Z+1	; 0x01
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	f8 01       	movw	r30, r16
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
    2bb0:	de 01       	movw	r26, r28
    2bb2:	a3 57       	subi	r26, 0x73	; 115
    2bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ef 56       	subi	r30, 0x6F	; 111
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	8d 93       	st	X+, r24
    2bc2:	9c 93       	st	X, r25
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e3 57       	subi	r30, 0x73	; 115
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	91 81       	ldd	r25, Z+1	; 0x01
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <main+0x49a>
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e3 57       	subi	r30, 0x73	; 115
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	80 83       	st	Z, r24
		_delay_ms(500);
		LCD_clearScreen();
    2bdc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
    2be0:	80 e7       	ldi	r24, 0x70	; 112
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "same pass: ");
    2be8:	21 e8       	ldi	r18, 0x81	; 129
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	81 e0       	ldi	r24, 0x01	; 1
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	a9 01       	movw	r20, r18
    2bf2:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
		for(i = 5; i < 10; ++i)
    2bf6:	85 e0       	ldi	r24, 0x05	; 5
    2bf8:	80 93 50 01 	sts	0x0150, r24
    2bfc:	c6 c0       	rjmp	.+396    	; 0x2d8a <main+0x656>
		{
			pass[i] = KEYPAD_getPressedKey();
    2bfe:	80 91 50 01 	lds	r24, 0x0150
    2c02:	08 2f       	mov	r16, r24
    2c04:	10 e0       	ldi	r17, 0x00	; 0
    2c06:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	ea 5b       	subi	r30, 0xBA	; 186
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	80 83       	st	Z, r24
			LCD_displayCharacter('*');
    2c12:	8a e2       	ldi	r24, 0x2A	; 42
    2c14:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    2c18:	fe 01       	movw	r30, r28
    2c1a:	e7 57       	subi	r30, 0x77	; 119
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	aa ef       	ldi	r26, 0xFA	; 250
    2c24:	b3 e4       	ldi	r27, 0x43	; 67
    2c26:	80 83       	st	Z, r24
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	a2 83       	std	Z+2, r26	; 0x02
    2c2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c2e:	8e 01       	movw	r16, r28
    2c30:	0b 57       	subi	r16, 0x7B	; 123
    2c32:	1f 4f       	sbci	r17, 0xFF	; 255
    2c34:	fe 01       	movw	r30, r28
    2c36:	e7 57       	subi	r30, 0x77	; 119
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	60 81       	ld	r22, Z
    2c3c:	71 81       	ldd	r23, Z+1	; 0x01
    2c3e:	82 81       	ldd	r24, Z+2	; 0x02
    2c40:	93 81       	ldd	r25, Z+3	; 0x03
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	4a ef       	ldi	r20, 0xFA	; 250
    2c48:	54 e4       	ldi	r21, 0x44	; 68
    2c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4e:	dc 01       	movw	r26, r24
    2c50:	cb 01       	movw	r24, r22
    2c52:	f8 01       	movw	r30, r16
    2c54:	80 83       	st	Z, r24
    2c56:	91 83       	std	Z+1, r25	; 0x01
    2c58:	a2 83       	std	Z+2, r26	; 0x02
    2c5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	eb 57       	subi	r30, 0x7B	; 123
    2c60:	ff 4f       	sbci	r31, 0xFF	; 255
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e8       	ldi	r20, 0x80	; 128
    2c70:	5f e3       	ldi	r21, 0x3F	; 63
    2c72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c76:	88 23       	and	r24, r24
    2c78:	44 f4       	brge	.+16     	; 0x2c8a <main+0x556>
		__ticks = 1;
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ed 57       	subi	r30, 0x7D	; 125
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	91 83       	std	Z+1, r25	; 0x01
    2c86:	80 83       	st	Z, r24
    2c88:	64 c0       	rjmp	.+200    	; 0x2d52 <main+0x61e>
	else if (__tmp > 65535)
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	eb 57       	subi	r30, 0x7B	; 123
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	60 81       	ld	r22, Z
    2c92:	71 81       	ldd	r23, Z+1	; 0x01
    2c94:	82 81       	ldd	r24, Z+2	; 0x02
    2c96:	93 81       	ldd	r25, Z+3	; 0x03
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	3f ef       	ldi	r19, 0xFF	; 255
    2c9c:	4f e7       	ldi	r20, 0x7F	; 127
    2c9e:	57 e4       	ldi	r21, 0x47	; 71
    2ca0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ca4:	18 16       	cp	r1, r24
    2ca6:	0c f0       	brlt	.+2      	; 0x2caa <main+0x576>
    2ca8:	43 c0       	rjmp	.+134    	; 0x2d30 <main+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2caa:	fe 01       	movw	r30, r28
    2cac:	e7 57       	subi	r30, 0x77	; 119
    2cae:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb0:	60 81       	ld	r22, Z
    2cb2:	71 81       	ldd	r23, Z+1	; 0x01
    2cb4:	82 81       	ldd	r24, Z+2	; 0x02
    2cb6:	93 81       	ldd	r25, Z+3	; 0x03
    2cb8:	20 e0       	ldi	r18, 0x00	; 0
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	40 e2       	ldi	r20, 0x20	; 32
    2cbe:	51 e4       	ldi	r21, 0x41	; 65
    2cc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc4:	dc 01       	movw	r26, r24
    2cc6:	cb 01       	movw	r24, r22
    2cc8:	8e 01       	movw	r16, r28
    2cca:	0d 57       	subi	r16, 0x7D	; 125
    2ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	f8 01       	movw	r30, r16
    2cdc:	91 83       	std	Z+1, r25	; 0x01
    2cde:	80 83       	st	Z, r24
    2ce0:	1f c0       	rjmp	.+62     	; 0x2d20 <main+0x5ec>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	ef 57       	subi	r30, 0x7F	; 127
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	88 ec       	ldi	r24, 0xC8	; 200
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	91 83       	std	Z+1, r25	; 0x01
    2cee:	80 83       	st	Z, r24
    2cf0:	fe 01       	movw	r30, r28
    2cf2:	ef 57       	subi	r30, 0x7F	; 127
    2cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	01 97       	sbiw	r24, 0x01	; 1
    2cfc:	f1 f7       	brne	.-4      	; 0x2cfa <main+0x5c6>
    2cfe:	fe 01       	movw	r30, r28
    2d00:	ef 57       	subi	r30, 0x7F	; 127
    2d02:	ff 4f       	sbci	r31, 0xFF	; 255
    2d04:	91 83       	std	Z+1, r25	; 0x01
    2d06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d08:	de 01       	movw	r26, r28
    2d0a:	ad 57       	subi	r26, 0x7D	; 125
    2d0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 57       	subi	r30, 0x7D	; 125
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	91 81       	ldd	r25, Z+1	; 0x01
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	11 96       	adiw	r26, 0x01	; 1
    2d1c:	9c 93       	st	X, r25
    2d1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d20:	fe 01       	movw	r30, r28
    2d22:	ed 57       	subi	r30, 0x7D	; 125
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	91 81       	ldd	r25, Z+1	; 0x01
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	d1 f6       	brne	.-76     	; 0x2ce2 <main+0x5ae>
    2d2e:	28 c0       	rjmp	.+80     	; 0x2d80 <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	8e 01       	movw	r16, r28
    2d32:	0d 57       	subi	r16, 0x7D	; 125
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
    2d36:	fe 01       	movw	r30, r28
    2d38:	eb 57       	subi	r30, 0x7B	; 123
    2d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d48:	dc 01       	movw	r26, r24
    2d4a:	cb 01       	movw	r24, r22
    2d4c:	f8 01       	movw	r30, r16
    2d4e:	91 83       	std	Z+1, r25	; 0x01
    2d50:	80 83       	st	Z, r24
    2d52:	de 01       	movw	r26, r28
    2d54:	a1 58       	subi	r26, 0x81	; 129
    2d56:	bf 4f       	sbci	r27, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ed 57       	subi	r30, 0x7D	; 125
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	80 81       	ld	r24, Z
    2d60:	91 81       	ldd	r25, Z+1	; 0x01
    2d62:	11 96       	adiw	r26, 0x01	; 1
    2d64:	9c 93       	st	X, r25
    2d66:	8e 93       	st	-X, r24
    2d68:	fe 01       	movw	r30, r28
    2d6a:	e1 58       	subi	r30, 0x81	; 129
    2d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6e:	80 81       	ld	r24, Z
    2d70:	91 81       	ldd	r25, Z+1	; 0x01
    2d72:	01 97       	sbiw	r24, 0x01	; 1
    2d74:	f1 f7       	brne	.-4      	; 0x2d72 <main+0x63e>
    2d76:	fe 01       	movw	r30, r28
    2d78:	e1 58       	subi	r30, 0x81	; 129
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	91 83       	std	Z+1, r25	; 0x01
    2d7e:	80 83       	st	Z, r24
		while(KEYPAD_getPressedKey() != '=');
		_delay_ms(500);
		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_displayStringRowColumn(1, 0, "same pass: ");
		for(i = 5; i < 10; ++i)
    2d80:	80 91 50 01 	lds	r24, 0x0150
    2d84:	8f 5f       	subi	r24, 0xFF	; 255
    2d86:	80 93 50 01 	sts	0x0150, r24
    2d8a:	80 91 50 01 	lds	r24, 0x0150
    2d8e:	8a 30       	cpi	r24, 0x0A	; 10
    2d90:	08 f4       	brcc	.+2      	; 0x2d94 <main+0x660>
    2d92:	35 cf       	rjmp	.-406    	; 0x2bfe <main+0x4ca>
		{
			pass[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(500);
		}
		while(KEYPAD_getPressedKey() != '=');
    2d94:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    2d98:	8d 33       	cpi	r24, 0x3D	; 61
    2d9a:	e1 f7       	brne	.-8      	; 0x2d94 <main+0x660>
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	e5 58       	subi	r30, 0x85	; 133
    2da0:	ff 4f       	sbci	r31, 0xFF	; 255
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	aa ef       	ldi	r26, 0xFA	; 250
    2da8:	b3 e4       	ldi	r27, 0x43	; 67
    2daa:	80 83       	st	Z, r24
    2dac:	91 83       	std	Z+1, r25	; 0x01
    2dae:	a2 83       	std	Z+2, r26	; 0x02
    2db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	8e 01       	movw	r16, r28
    2db4:	09 58       	subi	r16, 0x89	; 137
    2db6:	1f 4f       	sbci	r17, 0xFF	; 255
    2db8:	fe 01       	movw	r30, r28
    2dba:	e5 58       	subi	r30, 0x85	; 133
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	60 81       	ld	r22, Z
    2dc0:	71 81       	ldd	r23, Z+1	; 0x01
    2dc2:	82 81       	ldd	r24, Z+2	; 0x02
    2dc4:	93 81       	ldd	r25, Z+3	; 0x03
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a ef       	ldi	r20, 0xFA	; 250
    2dcc:	54 e4       	ldi	r21, 0x44	; 68
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	f8 01       	movw	r30, r16
    2dd8:	80 83       	st	Z, r24
    2dda:	91 83       	std	Z+1, r25	; 0x01
    2ddc:	a2 83       	std	Z+2, r26	; 0x02
    2dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2de0:	fe 01       	movw	r30, r28
    2de2:	e9 58       	subi	r30, 0x89	; 137
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	60 81       	ld	r22, Z
    2de8:	71 81       	ldd	r23, Z+1	; 0x01
    2dea:	82 81       	ldd	r24, Z+2	; 0x02
    2dec:	93 81       	ldd	r25, Z+3	; 0x03
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	40 e8       	ldi	r20, 0x80	; 128
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfa:	88 23       	and	r24, r24
    2dfc:	44 f4       	brge	.+16     	; 0x2e0e <main+0x6da>
		__ticks = 1;
    2dfe:	fe 01       	movw	r30, r28
    2e00:	eb 58       	subi	r30, 0x8B	; 139
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	91 83       	std	Z+1, r25	; 0x01
    2e0a:	80 83       	st	Z, r24
    2e0c:	64 c0       	rjmp	.+200    	; 0x2ed6 <main+0x7a2>
	else if (__tmp > 65535)
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e9 58       	subi	r30, 0x89	; 137
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	3f ef       	ldi	r19, 0xFF	; 255
    2e20:	4f e7       	ldi	r20, 0x7F	; 127
    2e22:	57 e4       	ldi	r21, 0x47	; 71
    2e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e28:	18 16       	cp	r1, r24
    2e2a:	0c f0       	brlt	.+2      	; 0x2e2e <main+0x6fa>
    2e2c:	43 c0       	rjmp	.+134    	; 0x2eb4 <main+0x780>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e5 58       	subi	r30, 0x85	; 133
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	60 81       	ld	r22, Z
    2e36:	71 81       	ldd	r23, Z+1	; 0x01
    2e38:	82 81       	ldd	r24, Z+2	; 0x02
    2e3a:	93 81       	ldd	r25, Z+3	; 0x03
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	8e 01       	movw	r16, r28
    2e4e:	0b 58       	subi	r16, 0x8B	; 139
    2e50:	1f 4f       	sbci	r17, 0xFF	; 255
    2e52:	bc 01       	movw	r22, r24
    2e54:	cd 01       	movw	r24, r26
    2e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e5a:	dc 01       	movw	r26, r24
    2e5c:	cb 01       	movw	r24, r22
    2e5e:	f8 01       	movw	r30, r16
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    2e64:	1f c0       	rjmp	.+62     	; 0x2ea4 <main+0x770>
    2e66:	fe 01       	movw	r30, r28
    2e68:	ed 58       	subi	r30, 0x8D	; 141
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	88 ec       	ldi	r24, 0xC8	; 200
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	91 83       	std	Z+1, r25	; 0x01
    2e72:	80 83       	st	Z, r24
    2e74:	fe 01       	movw	r30, r28
    2e76:	ed 58       	subi	r30, 0x8D	; 141
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	80 81       	ld	r24, Z
    2e7c:	91 81       	ldd	r25, Z+1	; 0x01
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <main+0x74a>
    2e82:	fe 01       	movw	r30, r28
    2e84:	ed 58       	subi	r30, 0x8D	; 141
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	91 83       	std	Z+1, r25	; 0x01
    2e8a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8c:	de 01       	movw	r26, r28
    2e8e:	ab 58       	subi	r26, 0x8B	; 139
    2e90:	bf 4f       	sbci	r27, 0xFF	; 255
    2e92:	fe 01       	movw	r30, r28
    2e94:	eb 58       	subi	r30, 0x8B	; 139
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	80 81       	ld	r24, Z
    2e9a:	91 81       	ldd	r25, Z+1	; 0x01
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	11 96       	adiw	r26, 0x01	; 1
    2ea0:	9c 93       	st	X, r25
    2ea2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	eb 58       	subi	r30, 0x8B	; 139
    2ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	d1 f6       	brne	.-76     	; 0x2e66 <main+0x732>
    2eb2:	28 c0       	rjmp	.+80     	; 0x2f04 <main+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	8e 01       	movw	r16, r28
    2eb6:	0b 58       	subi	r16, 0x8B	; 139
    2eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eba:	fe 01       	movw	r30, r28
    2ebc:	e9 58       	subi	r30, 0x89	; 137
    2ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec0:	60 81       	ld	r22, Z
    2ec2:	71 81       	ldd	r23, Z+1	; 0x01
    2ec4:	82 81       	ldd	r24, Z+2	; 0x02
    2ec6:	93 81       	ldd	r25, Z+3	; 0x03
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	f8 01       	movw	r30, r16
    2ed2:	91 83       	std	Z+1, r25	; 0x01
    2ed4:	80 83       	st	Z, r24
    2ed6:	de 01       	movw	r26, r28
    2ed8:	af 58       	subi	r26, 0x8F	; 143
    2eda:	bf 4f       	sbci	r27, 0xFF	; 255
    2edc:	fe 01       	movw	r30, r28
    2ede:	eb 58       	subi	r30, 0x8B	; 139
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	80 81       	ld	r24, Z
    2ee4:	91 81       	ldd	r25, Z+1	; 0x01
    2ee6:	11 96       	adiw	r26, 0x01	; 1
    2ee8:	9c 93       	st	X, r25
    2eea:	8e 93       	st	-X, r24
    2eec:	fe 01       	movw	r30, r28
    2eee:	ef 58       	subi	r30, 0x8F	; 143
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	80 81       	ld	r24, Z
    2ef4:	91 81       	ldd	r25, Z+1	; 0x01
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	f1 f7       	brne	.-4      	; 0x2ef6 <main+0x7c2>
    2efa:	fe 01       	movw	r30, r28
    2efc:	ef 58       	subi	r30, 0x8F	; 143
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	91 83       	std	Z+1, r25	; 0x01
    2f02:	80 83       	st	Z, r24
		_delay_ms(500);

		/* Sending Password to Control ECU Using UART */
		for(i = 0; i < 10; ++i)
    2f04:	10 92 50 01 	sts	0x0150, r1
    2f08:	0f c0       	rjmp	.+30     	; 0x2f28 <main+0x7f4>
		{
			UART_sendByte(pass[i]);
    2f0a:	80 91 50 01 	lds	r24, 0x0150
    2f0e:	88 2f       	mov	r24, r24
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	fc 01       	movw	r30, r24
    2f14:	ea 5b       	subi	r30, 0xBA	; 186
    2f16:	fe 4f       	sbci	r31, 0xFE	; 254
    2f18:	80 81       	ld	r24, Z
    2f1a:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
		}
		while(KEYPAD_getPressedKey() != '=');
		_delay_ms(500);

		/* Sending Password to Control ECU Using UART */
		for(i = 0; i < 10; ++i)
    2f1e:	80 91 50 01 	lds	r24, 0x0150
    2f22:	8f 5f       	subi	r24, 0xFF	; 255
    2f24:	80 93 50 01 	sts	0x0150, r24
    2f28:	80 91 50 01 	lds	r24, 0x0150
    2f2c:	8a 30       	cpi	r24, 0x0A	; 10
    2f2e:	68 f3       	brcs	.-38     	; 0x2f0a <main+0x7d6>
		{
			UART_sendByte(pass[i]);
		}

		/* Checking pass */
		pass_state = UART_receiveByte();
    2f30:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    2f34:	80 93 51 01 	sts	0x0151, r24
		if(pass_state == PASS_FAIL)
    2f38:	80 91 51 01 	lds	r24, 0x0151
    2f3c:	80 3f       	cpi	r24, 0xF0	; 240
    2f3e:	61 f4       	brne	.+24     	; 0x2f58 <main+0x824>
		{
			/* the program will return to entering password again */
			LCD_clearScreen();
    2f40:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
			LCD_displayString("PASS WRONG");
    2f44:	8d e8       	ldi	r24, 0x8D	; 141
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
			counter = 0;
    2f4c:	10 92 53 01 	sts	0x0153, r1
			while(counter < 3);
    2f50:	80 91 53 01 	lds	r24, 0x0153
    2f54:	83 30       	cpi	r24, 0x03	; 3
    2f56:	e0 f3       	brcs	.-8      	; 0x2f50 <main+0x81c>
	Timer_ConfigType time1 = {0, 31250, TIMER1_ID, TIMER_F_CPU_256, TIMER_CTC};
	Timer_init(&time1);
	Timer_setCallBack(Timer1_handler, TIMER1_ID);

	/* Enter Password for the first Time */
	while(pass_state != PASS_CORRECT)
    2f58:	80 91 51 01 	lds	r24, 0x0151
    2f5c:	80 3c       	cpi	r24, 0xC0	; 192
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <main+0x82e>
    2f60:	ab cc       	rjmp	.-1706   	; 0x28b8 <main+0x184>

	/************** Program **************/
	for(;;)
	{
		/* Entering main window */
		LCD_clearScreen();
    2f62:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
		LCD_displayString("+ : OPEN DOOR");
    2f66:	88 e9       	ldi	r24, 0x98	; 152
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "- : CHANGE PASS");
    2f6e:	26 ea       	ldi	r18, 0xA6	; 166
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	a9 01       	movw	r20, r18
    2f78:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>

		/* Waiting for user order */
		do{
			key = KEYPAD_getPressedKey();
    2f7c:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    2f80:	80 93 52 01 	sts	0x0152, r24
		}while(key != '+' && key != '-');
    2f84:	80 91 52 01 	lds	r24, 0x0152
    2f88:	8b 32       	cpi	r24, 0x2B	; 43
    2f8a:	21 f0       	breq	.+8      	; 0x2f94 <main+0x860>
    2f8c:	80 91 52 01 	lds	r24, 0x0152
    2f90:	8d 32       	cpi	r24, 0x2D	; 45
    2f92:	a1 f7       	brne	.-24     	; 0x2f7c <main+0x848>

		/* Checking order type */
		if(key == '+')
    2f94:	80 91 52 01 	lds	r24, 0x0152
    2f98:	8b 32       	cpi	r24, 0x2B	; 43
    2f9a:	09 f0       	breq	.+2      	; 0x2f9e <main+0x86a>
    2f9c:	36 c2       	rjmp	.+1132   	; 0x340a <main+0xcd6>
		{
			/* Waiting for user to enter old password */
			UART_sendByte(PASS_IN);
    2f9e:	81 ef       	ldi	r24, 0xF1	; 241
    2fa0:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			LCD_clearScreen();
    2fa4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    2fa8:	86 eb       	ldi	r24, 0xB6	; 182
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    2fb0:	24 ec       	ldi	r18, 0xC4	; 196
    2fb2:	30 e0       	ldi	r19, 0x00	; 0
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	60 e0       	ldi	r22, 0x00	; 0
    2fb8:	a9 01       	movw	r20, r18
    2fba:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
			for(i = 0; i < 5; ++i)
    2fbe:	10 92 50 01 	sts	0x0150, r1
    2fc2:	c6 c0       	rjmp	.+396    	; 0x3150 <main+0xa1c>
			{
				pass[i] = KEYPAD_getPressedKey();
    2fc4:	80 91 50 01 	lds	r24, 0x0150
    2fc8:	08 2f       	mov	r16, r24
    2fca:	10 e0       	ldi	r17, 0x00	; 0
    2fcc:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    2fd0:	f8 01       	movw	r30, r16
    2fd2:	ea 5b       	subi	r30, 0xBA	; 186
    2fd4:	fe 4f       	sbci	r31, 0xFE	; 254
    2fd6:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    2fd8:	8a e2       	ldi	r24, 0x2A	; 42
    2fda:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e3 59       	subi	r30, 0x93	; 147
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 e0       	ldi	r24, 0x00	; 0
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	aa ef       	ldi	r26, 0xFA	; 250
    2fea:	b3 e4       	ldi	r27, 0x43	; 67
    2fec:	80 83       	st	Z, r24
    2fee:	91 83       	std	Z+1, r25	; 0x01
    2ff0:	a2 83       	std	Z+2, r26	; 0x02
    2ff2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff4:	8e 01       	movw	r16, r28
    2ff6:	07 59       	subi	r16, 0x97	; 151
    2ff8:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e3 59       	subi	r30, 0x93	; 147
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	60 81       	ld	r22, Z
    3002:	71 81       	ldd	r23, Z+1	; 0x01
    3004:	82 81       	ldd	r24, Z+2	; 0x02
    3006:	93 81       	ldd	r25, Z+3	; 0x03
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	4a ef       	ldi	r20, 0xFA	; 250
    300e:	54 e4       	ldi	r21, 0x44	; 68
    3010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	f8 01       	movw	r30, r16
    301a:	80 83       	st	Z, r24
    301c:	91 83       	std	Z+1, r25	; 0x01
    301e:	a2 83       	std	Z+2, r26	; 0x02
    3020:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3022:	fe 01       	movw	r30, r28
    3024:	e7 59       	subi	r30, 0x97	; 151
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	20 e0       	ldi	r18, 0x00	; 0
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	40 e8       	ldi	r20, 0x80	; 128
    3036:	5f e3       	ldi	r21, 0x3F	; 63
    3038:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303c:	88 23       	and	r24, r24
    303e:	44 f4       	brge	.+16     	; 0x3050 <main+0x91c>
		__ticks = 1;
    3040:	fe 01       	movw	r30, r28
    3042:	e9 59       	subi	r30, 0x99	; 153
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	80 83       	st	Z, r24
    304e:	64 c0       	rjmp	.+200    	; 0x3118 <main+0x9e4>
	else if (__tmp > 65535)
    3050:	fe 01       	movw	r30, r28
    3052:	e7 59       	subi	r30, 0x97	; 151
    3054:	ff 4f       	sbci	r31, 0xFF	; 255
    3056:	60 81       	ld	r22, Z
    3058:	71 81       	ldd	r23, Z+1	; 0x01
    305a:	82 81       	ldd	r24, Z+2	; 0x02
    305c:	93 81       	ldd	r25, Z+3	; 0x03
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	4f e7       	ldi	r20, 0x7F	; 127
    3064:	57 e4       	ldi	r21, 0x47	; 71
    3066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    306a:	18 16       	cp	r1, r24
    306c:	0c f0       	brlt	.+2      	; 0x3070 <main+0x93c>
    306e:	43 c0       	rjmp	.+134    	; 0x30f6 <main+0x9c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3070:	fe 01       	movw	r30, r28
    3072:	e3 59       	subi	r30, 0x93	; 147
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	82 81       	ldd	r24, Z+2	; 0x02
    307c:	93 81       	ldd	r25, Z+3	; 0x03
    307e:	20 e0       	ldi	r18, 0x00	; 0
    3080:	30 e0       	ldi	r19, 0x00	; 0
    3082:	40 e2       	ldi	r20, 0x20	; 32
    3084:	51 e4       	ldi	r21, 0x41	; 65
    3086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	8e 01       	movw	r16, r28
    3090:	09 59       	subi	r16, 0x99	; 153
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	bc 01       	movw	r22, r24
    3096:	cd 01       	movw	r24, r26
    3098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309c:	dc 01       	movw	r26, r24
    309e:	cb 01       	movw	r24, r22
    30a0:	f8 01       	movw	r30, r16
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	1f c0       	rjmp	.+62     	; 0x30e6 <main+0x9b2>
    30a8:	fe 01       	movw	r30, r28
    30aa:	eb 59       	subi	r30, 0x9B	; 155
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	88 ec       	ldi	r24, 0xC8	; 200
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	91 83       	std	Z+1, r25	; 0x01
    30b4:	80 83       	st	Z, r24
    30b6:	fe 01       	movw	r30, r28
    30b8:	eb 59       	subi	r30, 0x9B	; 155
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	01 97       	sbiw	r24, 0x01	; 1
    30c2:	f1 f7       	brne	.-4      	; 0x30c0 <main+0x98c>
    30c4:	fe 01       	movw	r30, r28
    30c6:	eb 59       	subi	r30, 0x9B	; 155
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	91 83       	std	Z+1, r25	; 0x01
    30cc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ce:	de 01       	movw	r26, r28
    30d0:	a9 59       	subi	r26, 0x99	; 153
    30d2:	bf 4f       	sbci	r27, 0xFF	; 255
    30d4:	fe 01       	movw	r30, r28
    30d6:	e9 59       	subi	r30, 0x99	; 153
    30d8:	ff 4f       	sbci	r31, 0xFF	; 255
    30da:	80 81       	ld	r24, Z
    30dc:	91 81       	ldd	r25, Z+1	; 0x01
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	11 96       	adiw	r26, 0x01	; 1
    30e2:	9c 93       	st	X, r25
    30e4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e6:	fe 01       	movw	r30, r28
    30e8:	e9 59       	subi	r30, 0x99	; 153
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	00 97       	sbiw	r24, 0x00	; 0
    30f2:	d1 f6       	brne	.-76     	; 0x30a8 <main+0x974>
    30f4:	28 c0       	rjmp	.+80     	; 0x3146 <main+0xa12>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f6:	8e 01       	movw	r16, r28
    30f8:	09 59       	subi	r16, 0x99	; 153
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	fe 01       	movw	r30, r28
    30fe:	e7 59       	subi	r30, 0x97	; 151
    3100:	ff 4f       	sbci	r31, 0xFF	; 255
    3102:	60 81       	ld	r22, Z
    3104:	71 81       	ldd	r23, Z+1	; 0x01
    3106:	82 81       	ldd	r24, Z+2	; 0x02
    3108:	93 81       	ldd	r25, Z+3	; 0x03
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	f8 01       	movw	r30, r16
    3114:	91 83       	std	Z+1, r25	; 0x01
    3116:	80 83       	st	Z, r24
    3118:	de 01       	movw	r26, r28
    311a:	ad 59       	subi	r26, 0x9D	; 157
    311c:	bf 4f       	sbci	r27, 0xFF	; 255
    311e:	fe 01       	movw	r30, r28
    3120:	e9 59       	subi	r30, 0x99	; 153
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	80 81       	ld	r24, Z
    3126:	91 81       	ldd	r25, Z+1	; 0x01
    3128:	11 96       	adiw	r26, 0x01	; 1
    312a:	9c 93       	st	X, r25
    312c:	8e 93       	st	-X, r24
    312e:	fe 01       	movw	r30, r28
    3130:	ed 59       	subi	r30, 0x9D	; 157
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	f1 f7       	brne	.-4      	; 0x3138 <main+0xa04>
    313c:	fe 01       	movw	r30, r28
    313e:	ed 59       	subi	r30, 0x9D	; 157
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	91 83       	std	Z+1, r25	; 0x01
    3144:	80 83       	st	Z, r24
			/* Waiting for user to enter old password */
			UART_sendByte(PASS_IN);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");
			for(i = 0; i < 5; ++i)
    3146:	80 91 50 01 	lds	r24, 0x0150
    314a:	8f 5f       	subi	r24, 0xFF	; 255
    314c:	80 93 50 01 	sts	0x0150, r24
    3150:	80 91 50 01 	lds	r24, 0x0150
    3154:	85 30       	cpi	r24, 0x05	; 5
    3156:	08 f4       	brcc	.+2      	; 0x315a <main+0xa26>
    3158:	35 cf       	rjmp	.-406    	; 0x2fc4 <main+0x890>
			{
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != '=');
    315a:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    315e:	8d 33       	cpi	r24, 0x3D	; 61
    3160:	e1 f7       	brne	.-8      	; 0x315a <main+0xa26>
    3162:	fe 01       	movw	r30, r28
    3164:	e1 5a       	subi	r30, 0xA1	; 161
    3166:	ff 4f       	sbci	r31, 0xFF	; 255
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	90 e0       	ldi	r25, 0x00	; 0
    316c:	aa ef       	ldi	r26, 0xFA	; 250
    316e:	b3 e4       	ldi	r27, 0x43	; 67
    3170:	80 83       	st	Z, r24
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	a2 83       	std	Z+2, r26	; 0x02
    3176:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3178:	8e 01       	movw	r16, r28
    317a:	05 5a       	subi	r16, 0xA5	; 165
    317c:	1f 4f       	sbci	r17, 0xFF	; 255
    317e:	fe 01       	movw	r30, r28
    3180:	e1 5a       	subi	r30, 0xA1	; 161
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4a ef       	ldi	r20, 0xFA	; 250
    3192:	54 e4       	ldi	r21, 0x44	; 68
    3194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	f8 01       	movw	r30, r16
    319e:	80 83       	st	Z, r24
    31a0:	91 83       	std	Z+1, r25	; 0x01
    31a2:	a2 83       	std	Z+2, r26	; 0x02
    31a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31a6:	fe 01       	movw	r30, r28
    31a8:	e5 5a       	subi	r30, 0xA5	; 165
    31aa:	ff 4f       	sbci	r31, 0xFF	; 255
    31ac:	60 81       	ld	r22, Z
    31ae:	71 81       	ldd	r23, Z+1	; 0x01
    31b0:	82 81       	ldd	r24, Z+2	; 0x02
    31b2:	93 81       	ldd	r25, Z+3	; 0x03
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e8       	ldi	r20, 0x80	; 128
    31ba:	5f e3       	ldi	r21, 0x3F	; 63
    31bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31c0:	88 23       	and	r24, r24
    31c2:	44 f4       	brge	.+16     	; 0x31d4 <main+0xaa0>
		__ticks = 1;
    31c4:	fe 01       	movw	r30, r28
    31c6:	e7 5a       	subi	r30, 0xA7	; 167
    31c8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	91 83       	std	Z+1, r25	; 0x01
    31d0:	80 83       	st	Z, r24
    31d2:	64 c0       	rjmp	.+200    	; 0x329c <main+0xb68>
	else if (__tmp > 65535)
    31d4:	fe 01       	movw	r30, r28
    31d6:	e5 5a       	subi	r30, 0xA5	; 165
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	57 e4       	ldi	r21, 0x47	; 71
    31ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31ee:	18 16       	cp	r1, r24
    31f0:	0c f0       	brlt	.+2      	; 0x31f4 <main+0xac0>
    31f2:	43 c0       	rjmp	.+134    	; 0x327a <main+0xb46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31f4:	fe 01       	movw	r30, r28
    31f6:	e1 5a       	subi	r30, 0xA1	; 161
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	60 81       	ld	r22, Z
    31fc:	71 81       	ldd	r23, Z+1	; 0x01
    31fe:	82 81       	ldd	r24, Z+2	; 0x02
    3200:	93 81       	ldd	r25, Z+3	; 0x03
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e2       	ldi	r20, 0x20	; 32
    3208:	51 e4       	ldi	r21, 0x41	; 65
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	8e 01       	movw	r16, r28
    3214:	07 5a       	subi	r16, 0xA7	; 167
    3216:	1f 4f       	sbci	r17, 0xFF	; 255
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3220:	dc 01       	movw	r26, r24
    3222:	cb 01       	movw	r24, r22
    3224:	f8 01       	movw	r30, r16
    3226:	91 83       	std	Z+1, r25	; 0x01
    3228:	80 83       	st	Z, r24
    322a:	1f c0       	rjmp	.+62     	; 0x326a <main+0xb36>
    322c:	fe 01       	movw	r30, r28
    322e:	e9 5a       	subi	r30, 0xA9	; 169
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	88 ec       	ldi	r24, 0xC8	; 200
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	91 83       	std	Z+1, r25	; 0x01
    3238:	80 83       	st	Z, r24
    323a:	fe 01       	movw	r30, r28
    323c:	e9 5a       	subi	r30, 0xA9	; 169
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 81       	ld	r24, Z
    3242:	91 81       	ldd	r25, Z+1	; 0x01
    3244:	01 97       	sbiw	r24, 0x01	; 1
    3246:	f1 f7       	brne	.-4      	; 0x3244 <main+0xb10>
    3248:	fe 01       	movw	r30, r28
    324a:	e9 5a       	subi	r30, 0xA9	; 169
    324c:	ff 4f       	sbci	r31, 0xFF	; 255
    324e:	91 83       	std	Z+1, r25	; 0x01
    3250:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3252:	de 01       	movw	r26, r28
    3254:	a7 5a       	subi	r26, 0xA7	; 167
    3256:	bf 4f       	sbci	r27, 0xFF	; 255
    3258:	fe 01       	movw	r30, r28
    325a:	e7 5a       	subi	r30, 0xA7	; 167
    325c:	ff 4f       	sbci	r31, 0xFF	; 255
    325e:	80 81       	ld	r24, Z
    3260:	91 81       	ldd	r25, Z+1	; 0x01
    3262:	01 97       	sbiw	r24, 0x01	; 1
    3264:	11 96       	adiw	r26, 0x01	; 1
    3266:	9c 93       	st	X, r25
    3268:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    326a:	fe 01       	movw	r30, r28
    326c:	e7 5a       	subi	r30, 0xA7	; 167
    326e:	ff 4f       	sbci	r31, 0xFF	; 255
    3270:	80 81       	ld	r24, Z
    3272:	91 81       	ldd	r25, Z+1	; 0x01
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	d1 f6       	brne	.-76     	; 0x322c <main+0xaf8>
    3278:	28 c0       	rjmp	.+80     	; 0x32ca <main+0xb96>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    327a:	8e 01       	movw	r16, r28
    327c:	07 5a       	subi	r16, 0xA7	; 167
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	fe 01       	movw	r30, r28
    3282:	e5 5a       	subi	r30, 0xA5	; 165
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	60 81       	ld	r22, Z
    3288:	71 81       	ldd	r23, Z+1	; 0x01
    328a:	82 81       	ldd	r24, Z+2	; 0x02
    328c:	93 81       	ldd	r25, Z+3	; 0x03
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	f8 01       	movw	r30, r16
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	80 83       	st	Z, r24
    329c:	de 01       	movw	r26, r28
    329e:	ab 5a       	subi	r26, 0xAB	; 171
    32a0:	bf 4f       	sbci	r27, 0xFF	; 255
    32a2:	fe 01       	movw	r30, r28
    32a4:	e7 5a       	subi	r30, 0xA7	; 167
    32a6:	ff 4f       	sbci	r31, 0xFF	; 255
    32a8:	80 81       	ld	r24, Z
    32aa:	91 81       	ldd	r25, Z+1	; 0x01
    32ac:	11 96       	adiw	r26, 0x01	; 1
    32ae:	9c 93       	st	X, r25
    32b0:	8e 93       	st	-X, r24
    32b2:	fe 01       	movw	r30, r28
    32b4:	eb 5a       	subi	r30, 0xAB	; 171
    32b6:	ff 4f       	sbci	r31, 0xFF	; 255
    32b8:	80 81       	ld	r24, Z
    32ba:	91 81       	ldd	r25, Z+1	; 0x01
    32bc:	01 97       	sbiw	r24, 0x01	; 1
    32be:	f1 f7       	brne	.-4      	; 0x32bc <main+0xb88>
    32c0:	fe 01       	movw	r30, r28
    32c2:	eb 5a       	subi	r30, 0xAB	; 171
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	91 83       	std	Z+1, r25	; 0x01
    32c8:	80 83       	st	Z, r24
			_delay_ms(500);

			/* Sending Password to Control ECU Using UART */
			for(i = 0; i < 5; ++i)
    32ca:	10 92 50 01 	sts	0x0150, r1
    32ce:	0f c0       	rjmp	.+30     	; 0x32ee <main+0xbba>
			{
				UART_sendByte(pass[i]);
    32d0:	80 91 50 01 	lds	r24, 0x0150
    32d4:	88 2f       	mov	r24, r24
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	fc 01       	movw	r30, r24
    32da:	ea 5b       	subi	r30, 0xBA	; 186
    32dc:	fe 4f       	sbci	r31, 0xFE	; 254
    32de:	80 81       	ld	r24, Z
    32e0:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			}
			while(KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* Sending Password to Control ECU Using UART */
			for(i = 0; i < 5; ++i)
    32e4:	80 91 50 01 	lds	r24, 0x0150
    32e8:	8f 5f       	subi	r24, 0xFF	; 255
    32ea:	80 93 50 01 	sts	0x0150, r24
    32ee:	80 91 50 01 	lds	r24, 0x0150
    32f2:	85 30       	cpi	r24, 0x05	; 5
    32f4:	68 f3       	brcs	.-38     	; 0x32d0 <main+0xb9c>
			{
				UART_sendByte(pass[i]);
			}

			/* Checking pass */
			pass_state = UART_receiveByte();
    32f6:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    32fa:	80 93 51 01 	sts	0x0151, r24
			if(pass_state == PASS_CORRECT)
    32fe:	80 91 51 01 	lds	r24, 0x0151
    3302:	80 3c       	cpi	r24, 0xC0	; 192
    3304:	09 f0       	breq	.+2      	; 0x3308 <main+0xbd4>
    3306:	4a c0       	rjmp	.+148    	; 0x339c <main+0xc68>
			{
				enter_fails = 0;
    3308:	10 92 54 01 	sts	0x0154, r1
				/* Open door for 15 seconds */
				LCD_clearScreen();
    330c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
				LCD_displayStringRowColumn(0, 1, "Door Unlocking");
    3310:	2b ec       	ldi	r18, 0xCB	; 203
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	a9 01       	movw	r20, r18
    331a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1, 3, "Please Wait");
    331e:	2a ed       	ldi	r18, 0xDA	; 218
    3320:	30 e0       	ldi	r19, 0x00	; 0
    3322:	81 e0       	ldi	r24, 0x01	; 1
    3324:	63 e0       	ldi	r22, 0x03	; 3
    3326:	a9 01       	movw	r20, r18
    3328:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
				counter = 0;
    332c:	10 92 53 01 	sts	0x0153, r1
				while(counter < 15);
    3330:	80 91 53 01 	lds	r24, 0x0153
    3334:	8f 30       	cpi	r24, 0x0F	; 15
    3336:	e0 f3       	brcs	.-8      	; 0x3330 <main+0xbfc>

				/* Check people entering */
				LCD_clearScreen();
    3338:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
				people_status = UART_receiveByte();
    333c:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    3340:	80 93 56 01 	sts	0x0156, r24
    3344:	12 c0       	rjmp	.+36     	; 0x336a <main+0xc36>
				while(people_status == PEOPLE_IN)
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
    3346:	26 ee       	ldi	r18, 0xE6	; 230
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	60 e0       	ldi	r22, 0x00	; 0
    334e:	a9 01       	movw	r20, r18
    3350:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 3, "to Enter");
    3354:	26 ef       	ldi	r18, 0xF6	; 246
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	81 e0       	ldi	r24, 0x01	; 1
    335a:	63 e0       	ldi	r22, 0x03	; 3
    335c:	a9 01       	movw	r20, r18
    335e:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					people_status = UART_receiveByte();
    3362:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    3366:	80 93 56 01 	sts	0x0156, r24
				while(counter < 15);

				/* Check people entering */
				LCD_clearScreen();
				people_status = UART_receiveByte();
				while(people_status == PEOPLE_IN)
    336a:	80 91 56 01 	lds	r24, 0x0156
    336e:	80 3b       	cpi	r24, 0xB0	; 176
    3370:	51 f3       	breq	.-44     	; 0x3346 <main+0xc12>
				{
					LCD_displayStringRowColumn(0, 0, "Wait for People");
					LCD_displayStringRowColumn(1, 3, "to Enter");
					people_status = UART_receiveByte();
				}
				if(people_status == PEOPLE_NO)
    3372:	80 91 56 01 	lds	r24, 0x0156
    3376:	80 3d       	cpi	r24, 0xD0	; 208
    3378:	09 f0       	breq	.+2      	; 0x337c <main+0xc48>
    337a:	f3 cd       	rjmp	.-1050   	; 0x2f62 <main+0x82e>
				{
					LCD_clearScreen();
    337c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 2, "Door Locking");
    3380:	2f ef       	ldi	r18, 0xFF	; 255
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	62 e0       	ldi	r22, 0x02	; 2
    3388:	a9 01       	movw	r20, r18
    338a:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					counter = 0;
    338e:	10 92 53 01 	sts	0x0153, r1
					while(counter < 15);
    3392:	80 91 53 01 	lds	r24, 0x0153
    3396:	8f 30       	cpi	r24, 0x0F	; 15
    3398:	e0 f3       	brcs	.-8      	; 0x3392 <main+0xc5e>
    339a:	e3 cd       	rjmp	.-1082   	; 0x2f62 <main+0x82e>
				}
			}
			else if(pass_state == PASS_FAIL)
    339c:	80 91 51 01 	lds	r24, 0x0151
    33a0:	80 3f       	cpi	r24, 0xF0	; 240
    33a2:	09 f0       	breq	.+2      	; 0x33a6 <main+0xc72>
    33a4:	de cd       	rjmp	.-1092   	; 0x2f62 <main+0x82e>
			{
				++enter_fails;
    33a6:	80 91 54 01 	lds	r24, 0x0154
    33aa:	8f 5f       	subi	r24, 0xFF	; 255
    33ac:	80 93 54 01 	sts	0x0154, r24
				if(enter_fails == 3)
    33b0:	80 91 54 01 	lds	r24, 0x0154
    33b4:	83 30       	cpi	r24, 0x03	; 3
    33b6:	e1 f4       	brne	.+56     	; 0x33f0 <main+0xcbc>
				{
					/* Lock system for 1 minute */
					UART_sendByte(ALARM_ON);
    33b8:	82 ef       	ldi	r24, 0xF2	; 242
    33ba:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
					LCD_clearScreen();
    33be:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    33c2:	2c e0       	ldi	r18, 0x0C	; 12
    33c4:	31 e0       	ldi	r19, 0x01	; 1
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	a9 01       	movw	r20, r18
    33cc:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    33d0:	2a e1       	ldi	r18, 0x1A	; 26
    33d2:	31 e0       	ldi	r19, 0x01	; 1
    33d4:	81 e0       	ldi	r24, 0x01	; 1
    33d6:	60 e0       	ldi	r22, 0x00	; 0
    33d8:	a9 01       	movw	r20, r18
    33da:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					counter = 0;
    33de:	10 92 53 01 	sts	0x0153, r1
					while(counter < 60);
    33e2:	80 91 53 01 	lds	r24, 0x0153
    33e6:	8c 33       	cpi	r24, 0x3C	; 60
    33e8:	e0 f3       	brcs	.-8      	; 0x33e2 <main+0xcae>
					enter_fails = 0;
    33ea:	10 92 54 01 	sts	0x0154, r1
    33ee:	b9 cd       	rjmp	.-1166   	; 0x2f62 <main+0x82e>
				}
				else
				{
					/* the program will return to entering password again */
					LCD_clearScreen();
    33f0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayString("PASS WRONG");
    33f4:	8d e8       	ldi	r24, 0x8D	; 141
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
					counter = 0;
    33fc:	10 92 53 01 	sts	0x0153, r1
					while(counter < 3);
    3400:	80 91 53 01 	lds	r24, 0x0153
    3404:	83 30       	cpi	r24, 0x03	; 3
    3406:	e0 f3       	brcs	.-8      	; 0x3400 <main+0xccc>
    3408:	ac cd       	rjmp	.-1192   	; 0x2f62 <main+0x82e>
				}
			}
		}
		else if(key == '-')
    340a:	80 91 52 01 	lds	r24, 0x0152
    340e:	8d 32       	cpi	r24, 0x2D	; 45
    3410:	09 f0       	breq	.+2      	; 0x3414 <main+0xce0>
    3412:	a7 cd       	rjmp	.-1202   	; 0x2f62 <main+0x82e>
		{
			/* Waiting for user to enter old password */
			UART_sendByte(PASS_UPDATE);
    3414:	80 ee       	ldi	r24, 0xE0	; 224
    3416:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			LCD_clearScreen();
    341a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    341e:	86 eb       	ldi	r24, 0xB6	; 182
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "pass: ");
    3426:	24 ec       	ldi	r18, 0xC4	; 196
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	81 e0       	ldi	r24, 0x01	; 1
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	a9 01       	movw	r20, r18
    3430:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
			for(i = 0; i < 5; ++i)
    3434:	10 92 50 01 	sts	0x0150, r1
    3438:	c6 c0       	rjmp	.+396    	; 0x35c6 <main+0xe92>
			{
				pass[i] = KEYPAD_getPressedKey();
    343a:	80 91 50 01 	lds	r24, 0x0150
    343e:	08 2f       	mov	r16, r24
    3440:	10 e0       	ldi	r17, 0x00	; 0
    3442:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    3446:	f8 01       	movw	r30, r16
    3448:	ea 5b       	subi	r30, 0xBA	; 186
    344a:	fe 4f       	sbci	r31, 0xFE	; 254
    344c:	80 83       	st	Z, r24
				LCD_displayCharacter('*');
    344e:	8a e2       	ldi	r24, 0x2A	; 42
    3450:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    3454:	fe 01       	movw	r30, r28
    3456:	ef 5a       	subi	r30, 0xAF	; 175
    3458:	ff 4f       	sbci	r31, 0xFF	; 255
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	aa ef       	ldi	r26, 0xFA	; 250
    3460:	b3 e4       	ldi	r27, 0x43	; 67
    3462:	80 83       	st	Z, r24
    3464:	91 83       	std	Z+1, r25	; 0x01
    3466:	a2 83       	std	Z+2, r26	; 0x02
    3468:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346a:	8e 01       	movw	r16, r28
    346c:	03 5b       	subi	r16, 0xB3	; 179
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	fe 01       	movw	r30, r28
    3472:	ef 5a       	subi	r30, 0xAF	; 175
    3474:	ff 4f       	sbci	r31, 0xFF	; 255
    3476:	60 81       	ld	r22, Z
    3478:	71 81       	ldd	r23, Z+1	; 0x01
    347a:	82 81       	ldd	r24, Z+2	; 0x02
    347c:	93 81       	ldd	r25, Z+3	; 0x03
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	4a ef       	ldi	r20, 0xFA	; 250
    3484:	54 e4       	ldi	r21, 0x44	; 68
    3486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    348a:	dc 01       	movw	r26, r24
    348c:	cb 01       	movw	r24, r22
    348e:	f8 01       	movw	r30, r16
    3490:	80 83       	st	Z, r24
    3492:	91 83       	std	Z+1, r25	; 0x01
    3494:	a2 83       	std	Z+2, r26	; 0x02
    3496:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3498:	fe 01       	movw	r30, r28
    349a:	e3 5b       	subi	r30, 0xB3	; 179
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	60 81       	ld	r22, Z
    34a0:	71 81       	ldd	r23, Z+1	; 0x01
    34a2:	82 81       	ldd	r24, Z+2	; 0x02
    34a4:	93 81       	ldd	r25, Z+3	; 0x03
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e8       	ldi	r20, 0x80	; 128
    34ac:	5f e3       	ldi	r21, 0x3F	; 63
    34ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34b2:	88 23       	and	r24, r24
    34b4:	44 f4       	brge	.+16     	; 0x34c6 <main+0xd92>
		__ticks = 1;
    34b6:	fe 01       	movw	r30, r28
    34b8:	e5 5b       	subi	r30, 0xB5	; 181
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	91 83       	std	Z+1, r25	; 0x01
    34c2:	80 83       	st	Z, r24
    34c4:	64 c0       	rjmp	.+200    	; 0x358e <main+0xe5a>
	else if (__tmp > 65535)
    34c6:	fe 01       	movw	r30, r28
    34c8:	e3 5b       	subi	r30, 0xB3	; 179
    34ca:	ff 4f       	sbci	r31, 0xFF	; 255
    34cc:	60 81       	ld	r22, Z
    34ce:	71 81       	ldd	r23, Z+1	; 0x01
    34d0:	82 81       	ldd	r24, Z+2	; 0x02
    34d2:	93 81       	ldd	r25, Z+3	; 0x03
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	3f ef       	ldi	r19, 0xFF	; 255
    34d8:	4f e7       	ldi	r20, 0x7F	; 127
    34da:	57 e4       	ldi	r21, 0x47	; 71
    34dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34e0:	18 16       	cp	r1, r24
    34e2:	0c f0       	brlt	.+2      	; 0x34e6 <main+0xdb2>
    34e4:	43 c0       	rjmp	.+134    	; 0x356c <main+0xe38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34e6:	fe 01       	movw	r30, r28
    34e8:	ef 5a       	subi	r30, 0xAF	; 175
    34ea:	ff 4f       	sbci	r31, 0xFF	; 255
    34ec:	60 81       	ld	r22, Z
    34ee:	71 81       	ldd	r23, Z+1	; 0x01
    34f0:	82 81       	ldd	r24, Z+2	; 0x02
    34f2:	93 81       	ldd	r25, Z+3	; 0x03
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	40 e2       	ldi	r20, 0x20	; 32
    34fa:	51 e4       	ldi	r21, 0x41	; 65
    34fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3500:	dc 01       	movw	r26, r24
    3502:	cb 01       	movw	r24, r22
    3504:	8e 01       	movw	r16, r28
    3506:	05 5b       	subi	r16, 0xB5	; 181
    3508:	1f 4f       	sbci	r17, 0xFF	; 255
    350a:	bc 01       	movw	r22, r24
    350c:	cd 01       	movw	r24, r26
    350e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3512:	dc 01       	movw	r26, r24
    3514:	cb 01       	movw	r24, r22
    3516:	f8 01       	movw	r30, r16
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
    351c:	1f c0       	rjmp	.+62     	; 0x355c <main+0xe28>
    351e:	fe 01       	movw	r30, r28
    3520:	e7 5b       	subi	r30, 0xB7	; 183
    3522:	ff 4f       	sbci	r31, 0xFF	; 255
    3524:	88 ec       	ldi	r24, 0xC8	; 200
    3526:	90 e0       	ldi	r25, 0x00	; 0
    3528:	91 83       	std	Z+1, r25	; 0x01
    352a:	80 83       	st	Z, r24
    352c:	fe 01       	movw	r30, r28
    352e:	e7 5b       	subi	r30, 0xB7	; 183
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	80 81       	ld	r24, Z
    3534:	91 81       	ldd	r25, Z+1	; 0x01
    3536:	01 97       	sbiw	r24, 0x01	; 1
    3538:	f1 f7       	brne	.-4      	; 0x3536 <main+0xe02>
    353a:	fe 01       	movw	r30, r28
    353c:	e7 5b       	subi	r30, 0xB7	; 183
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	91 83       	std	Z+1, r25	; 0x01
    3542:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3544:	de 01       	movw	r26, r28
    3546:	a5 5b       	subi	r26, 0xB5	; 181
    3548:	bf 4f       	sbci	r27, 0xFF	; 255
    354a:	fe 01       	movw	r30, r28
    354c:	e5 5b       	subi	r30, 0xB5	; 181
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	11 96       	adiw	r26, 0x01	; 1
    3558:	9c 93       	st	X, r25
    355a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    355c:	fe 01       	movw	r30, r28
    355e:	e5 5b       	subi	r30, 0xB5	; 181
    3560:	ff 4f       	sbci	r31, 0xFF	; 255
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	00 97       	sbiw	r24, 0x00	; 0
    3568:	d1 f6       	brne	.-76     	; 0x351e <main+0xdea>
    356a:	28 c0       	rjmp	.+80     	; 0x35bc <main+0xe88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356c:	8e 01       	movw	r16, r28
    356e:	05 5b       	subi	r16, 0xB5	; 181
    3570:	1f 4f       	sbci	r17, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e3 5b       	subi	r30, 0xB3	; 179
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	60 81       	ld	r22, Z
    357a:	71 81       	ldd	r23, Z+1	; 0x01
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3584:	dc 01       	movw	r26, r24
    3586:	cb 01       	movw	r24, r22
    3588:	f8 01       	movw	r30, r16
    358a:	91 83       	std	Z+1, r25	; 0x01
    358c:	80 83       	st	Z, r24
    358e:	de 01       	movw	r26, r28
    3590:	a9 5b       	subi	r26, 0xB9	; 185
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	e5 5b       	subi	r30, 0xB5	; 181
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	80 81       	ld	r24, Z
    359c:	91 81       	ldd	r25, Z+1	; 0x01
    359e:	11 96       	adiw	r26, 0x01	; 1
    35a0:	9c 93       	st	X, r25
    35a2:	8e 93       	st	-X, r24
    35a4:	fe 01       	movw	r30, r28
    35a6:	e9 5b       	subi	r30, 0xB9	; 185
    35a8:	ff 4f       	sbci	r31, 0xFF	; 255
    35aa:	80 81       	ld	r24, Z
    35ac:	91 81       	ldd	r25, Z+1	; 0x01
    35ae:	01 97       	sbiw	r24, 0x01	; 1
    35b0:	f1 f7       	brne	.-4      	; 0x35ae <main+0xe7a>
    35b2:	fe 01       	movw	r30, r28
    35b4:	e9 5b       	subi	r30, 0xB9	; 185
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	91 83       	std	Z+1, r25	; 0x01
    35ba:	80 83       	st	Z, r24
			/* Waiting for user to enter old password */
			UART_sendByte(PASS_UPDATE);
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_displayStringRowColumn(1, 0, "pass: ");
			for(i = 0; i < 5; ++i)
    35bc:	80 91 50 01 	lds	r24, 0x0150
    35c0:	8f 5f       	subi	r24, 0xFF	; 255
    35c2:	80 93 50 01 	sts	0x0150, r24
    35c6:	80 91 50 01 	lds	r24, 0x0150
    35ca:	85 30       	cpi	r24, 0x05	; 5
    35cc:	08 f4       	brcc	.+2      	; 0x35d0 <main+0xe9c>
    35ce:	35 cf       	rjmp	.-406    	; 0x343a <main+0xd06>
			{
				pass[i] = KEYPAD_getPressedKey();
				LCD_displayCharacter('*');
				_delay_ms(500);
			}
			while(KEYPAD_getPressedKey() != '=');
    35d0:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    35d4:	8d 33       	cpi	r24, 0x3D	; 61
    35d6:	e1 f7       	brne	.-8      	; 0x35d0 <main+0xe9c>
    35d8:	fe 01       	movw	r30, r28
    35da:	ed 5b       	subi	r30, 0xBD	; 189
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	aa ef       	ldi	r26, 0xFA	; 250
    35e4:	b3 e4       	ldi	r27, 0x43	; 67
    35e6:	80 83       	st	Z, r24
    35e8:	91 83       	std	Z+1, r25	; 0x01
    35ea:	a2 83       	std	Z+2, r26	; 0x02
    35ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ee:	8e 01       	movw	r16, r28
    35f0:	01 5c       	subi	r16, 0xC1	; 193
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	fe 01       	movw	r30, r28
    35f6:	ed 5b       	subi	r30, 0xBD	; 189
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	60 81       	ld	r22, Z
    35fc:	71 81       	ldd	r23, Z+1	; 0x01
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	93 81       	ldd	r25, Z+3	; 0x03
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	4a ef       	ldi	r20, 0xFA	; 250
    3608:	54 e4       	ldi	r21, 0x44	; 68
    360a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360e:	dc 01       	movw	r26, r24
    3610:	cb 01       	movw	r24, r22
    3612:	f8 01       	movw	r30, r16
    3614:	80 83       	st	Z, r24
    3616:	91 83       	std	Z+1, r25	; 0x01
    3618:	a2 83       	std	Z+2, r26	; 0x02
    361a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361c:	fe 01       	movw	r30, r28
    361e:	ff 96       	adiw	r30, 0x3f	; 63
    3620:	60 81       	ld	r22, Z
    3622:	71 81       	ldd	r23, Z+1	; 0x01
    3624:	82 81       	ldd	r24, Z+2	; 0x02
    3626:	93 81       	ldd	r25, Z+3	; 0x03
    3628:	20 e0       	ldi	r18, 0x00	; 0
    362a:	30 e0       	ldi	r19, 0x00	; 0
    362c:	40 e8       	ldi	r20, 0x80	; 128
    362e:	5f e3       	ldi	r21, 0x3F	; 63
    3630:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3634:	88 23       	and	r24, r24
    3636:	2c f4       	brge	.+10     	; 0x3642 <main+0xf0e>
		__ticks = 1;
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	90 e0       	ldi	r25, 0x00	; 0
    363c:	9e af       	std	Y+62, r25	; 0x3e
    363e:	8d af       	std	Y+61, r24	; 0x3d
    3640:	46 c0       	rjmp	.+140    	; 0x36ce <main+0xf9a>
	else if (__tmp > 65535)
    3642:	fe 01       	movw	r30, r28
    3644:	ff 96       	adiw	r30, 0x3f	; 63
    3646:	60 81       	ld	r22, Z
    3648:	71 81       	ldd	r23, Z+1	; 0x01
    364a:	82 81       	ldd	r24, Z+2	; 0x02
    364c:	93 81       	ldd	r25, Z+3	; 0x03
    364e:	20 e0       	ldi	r18, 0x00	; 0
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	4f e7       	ldi	r20, 0x7F	; 127
    3654:	57 e4       	ldi	r21, 0x47	; 71
    3656:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    365a:	18 16       	cp	r1, r24
    365c:	64 f5       	brge	.+88     	; 0x36b6 <main+0xf82>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    365e:	fe 01       	movw	r30, r28
    3660:	ed 5b       	subi	r30, 0xBD	; 189
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	60 81       	ld	r22, Z
    3666:	71 81       	ldd	r23, Z+1	; 0x01
    3668:	82 81       	ldd	r24, Z+2	; 0x02
    366a:	93 81       	ldd	r25, Z+3	; 0x03
    366c:	20 e0       	ldi	r18, 0x00	; 0
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	40 e2       	ldi	r20, 0x20	; 32
    3672:	51 e4       	ldi	r21, 0x41	; 65
    3674:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3678:	dc 01       	movw	r26, r24
    367a:	cb 01       	movw	r24, r22
    367c:	bc 01       	movw	r22, r24
    367e:	cd 01       	movw	r24, r26
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e af       	std	Y+62, r25	; 0x3e
    368a:	8d af       	std	Y+61, r24	; 0x3d
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <main+0xf78>
    368e:	88 ec       	ldi	r24, 0xC8	; 200
    3690:	90 e0       	ldi	r25, 0x00	; 0
    3692:	9c af       	std	Y+60, r25	; 0x3c
    3694:	8b af       	std	Y+59, r24	; 0x3b
    3696:	8b ad       	ldd	r24, Y+59	; 0x3b
    3698:	9c ad       	ldd	r25, Y+60	; 0x3c
    369a:	01 97       	sbiw	r24, 0x01	; 1
    369c:	f1 f7       	brne	.-4      	; 0x369a <main+0xf66>
    369e:	9c af       	std	Y+60, r25	; 0x3c
    36a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    36a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	9e af       	std	Y+62, r25	; 0x3e
    36aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    36ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    36b0:	00 97       	sbiw	r24, 0x00	; 0
    36b2:	69 f7       	brne	.-38     	; 0x368e <main+0xf5a>
    36b4:	16 c0       	rjmp	.+44     	; 0x36e2 <main+0xfae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36b6:	fe 01       	movw	r30, r28
    36b8:	ff 96       	adiw	r30, 0x3f	; 63
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	9e af       	std	Y+62, r25	; 0x3e
    36cc:	8d af       	std	Y+61, r24	; 0x3d
    36ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    36d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    36d2:	9a af       	std	Y+58, r25	; 0x3a
    36d4:	89 af       	std	Y+57, r24	; 0x39
    36d6:	89 ad       	ldd	r24, Y+57	; 0x39
    36d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	f1 f7       	brne	.-4      	; 0x36da <main+0xfa6>
    36de:	9a af       	std	Y+58, r25	; 0x3a
    36e0:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(500);

			/* Sending Password to Control ECU Using UART */
			for(i = 0; i < 5; ++i)
    36e2:	10 92 50 01 	sts	0x0150, r1
    36e6:	0f c0       	rjmp	.+30     	; 0x3706 <main+0xfd2>
			{
				UART_sendByte(pass[i]);
    36e8:	80 91 50 01 	lds	r24, 0x0150
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	fc 01       	movw	r30, r24
    36f2:	ea 5b       	subi	r30, 0xBA	; 186
    36f4:	fe 4f       	sbci	r31, 0xFE	; 254
    36f6:	80 81       	ld	r24, Z
    36f8:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
			}
			while(KEYPAD_getPressedKey() != '=');
			_delay_ms(500);

			/* Sending Password to Control ECU Using UART */
			for(i = 0; i < 5; ++i)
    36fc:	80 91 50 01 	lds	r24, 0x0150
    3700:	8f 5f       	subi	r24, 0xFF	; 255
    3702:	80 93 50 01 	sts	0x0150, r24
    3706:	80 91 50 01 	lds	r24, 0x0150
    370a:	85 30       	cpi	r24, 0x05	; 5
    370c:	68 f3       	brcs	.-38     	; 0x36e8 <main+0xfb4>
			{
				UART_sendByte(pass[i]);
			}

			/* Checking pass */
			pass_state = UART_receiveByte();
    370e:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    3712:	80 93 51 01 	sts	0x0151, r24
			if(pass_state == PASS_CORRECT)
    3716:	80 91 51 01 	lds	r24, 0x0151
    371a:	80 3c       	cpi	r24, 0xC0	; 192
    371c:	09 f0       	breq	.+2      	; 0x3720 <main+0xfec>
    371e:	4a c2       	rjmp	.+1172   	; 0x3bb4 <main+0x1480>
			{
				update_fails = 0;
    3720:	10 92 55 01 	sts	0x0155, r1
				LCD_clearScreen();
    3724:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
				LCD_displayString("Plz Enter Pass:");
    3728:	80 e6       	ldi	r24, 0x60	; 96
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
				LCD_moveCursor(1, 0);
    3730:	81 e0       	ldi	r24, 0x01	; 1
    3732:	60 e0       	ldi	r22, 0x00	; 0
    3734:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <LCD_moveCursor>
				for(i = 0; i < 5; ++i)
    3738:	10 92 50 01 	sts	0x0150, r1
    373c:	84 c0       	rjmp	.+264    	; 0x3846 <main+0x1112>
				{
					pass[i] = KEYPAD_getPressedKey();
    373e:	80 91 50 01 	lds	r24, 0x0150
    3742:	08 2f       	mov	r16, r24
    3744:	10 e0       	ldi	r17, 0x00	; 0
    3746:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    374a:	f8 01       	movw	r30, r16
    374c:	ea 5b       	subi	r30, 0xBA	; 186
    374e:	fe 4f       	sbci	r31, 0xFE	; 254
    3750:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    3752:	8a e2       	ldi	r24, 0x2A	; 42
    3754:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    3758:	80 e0       	ldi	r24, 0x00	; 0
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	aa ef       	ldi	r26, 0xFA	; 250
    375e:	b3 e4       	ldi	r27, 0x43	; 67
    3760:	8d ab       	std	Y+53, r24	; 0x35
    3762:	9e ab       	std	Y+54, r25	; 0x36
    3764:	af ab       	std	Y+55, r26	; 0x37
    3766:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3768:	6d a9       	ldd	r22, Y+53	; 0x35
    376a:	7e a9       	ldd	r23, Y+54	; 0x36
    376c:	8f a9       	ldd	r24, Y+55	; 0x37
    376e:	98 ad       	ldd	r25, Y+56	; 0x38
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	4a ef       	ldi	r20, 0xFA	; 250
    3776:	54 e4       	ldi	r21, 0x44	; 68
    3778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377c:	dc 01       	movw	r26, r24
    377e:	cb 01       	movw	r24, r22
    3780:	89 ab       	std	Y+49, r24	; 0x31
    3782:	9a ab       	std	Y+50, r25	; 0x32
    3784:	ab ab       	std	Y+51, r26	; 0x33
    3786:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3788:	69 a9       	ldd	r22, Y+49	; 0x31
    378a:	7a a9       	ldd	r23, Y+50	; 0x32
    378c:	8b a9       	ldd	r24, Y+51	; 0x33
    378e:	9c a9       	ldd	r25, Y+52	; 0x34
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e8       	ldi	r20, 0x80	; 128
    3796:	5f e3       	ldi	r21, 0x3F	; 63
    3798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    379c:	88 23       	and	r24, r24
    379e:	2c f4       	brge	.+10     	; 0x37aa <main+0x1076>
		__ticks = 1;
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	98 ab       	std	Y+48, r25	; 0x30
    37a6:	8f a7       	std	Y+47, r24	; 0x2f
    37a8:	3f c0       	rjmp	.+126    	; 0x3828 <main+0x10f4>
	else if (__tmp > 65535)
    37aa:	69 a9       	ldd	r22, Y+49	; 0x31
    37ac:	7a a9       	ldd	r23, Y+50	; 0x32
    37ae:	8b a9       	ldd	r24, Y+51	; 0x33
    37b0:	9c a9       	ldd	r25, Y+52	; 0x34
    37b2:	20 e0       	ldi	r18, 0x00	; 0
    37b4:	3f ef       	ldi	r19, 0xFF	; 255
    37b6:	4f e7       	ldi	r20, 0x7F	; 127
    37b8:	57 e4       	ldi	r21, 0x47	; 71
    37ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37be:	18 16       	cp	r1, r24
    37c0:	4c f5       	brge	.+82     	; 0x3814 <main+0x10e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37c2:	6d a9       	ldd	r22, Y+53	; 0x35
    37c4:	7e a9       	ldd	r23, Y+54	; 0x36
    37c6:	8f a9       	ldd	r24, Y+55	; 0x37
    37c8:	98 ad       	ldd	r25, Y+56	; 0x38
    37ca:	20 e0       	ldi	r18, 0x00	; 0
    37cc:	30 e0       	ldi	r19, 0x00	; 0
    37ce:	40 e2       	ldi	r20, 0x20	; 32
    37d0:	51 e4       	ldi	r21, 0x41	; 65
    37d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	98 ab       	std	Y+48, r25	; 0x30
    37e8:	8f a7       	std	Y+47, r24	; 0x2f
    37ea:	0f c0       	rjmp	.+30     	; 0x380a <main+0x10d6>
    37ec:	88 ec       	ldi	r24, 0xC8	; 200
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	9e a7       	std	Y+46, r25	; 0x2e
    37f2:	8d a7       	std	Y+45, r24	; 0x2d
    37f4:	8d a5       	ldd	r24, Y+45	; 0x2d
    37f6:	9e a5       	ldd	r25, Y+46	; 0x2e
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <main+0x10c4>
    37fc:	9e a7       	std	Y+46, r25	; 0x2e
    37fe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3800:	8f a5       	ldd	r24, Y+47	; 0x2f
    3802:	98 a9       	ldd	r25, Y+48	; 0x30
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	98 ab       	std	Y+48, r25	; 0x30
    3808:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    380a:	8f a5       	ldd	r24, Y+47	; 0x2f
    380c:	98 a9       	ldd	r25, Y+48	; 0x30
    380e:	00 97       	sbiw	r24, 0x00	; 0
    3810:	69 f7       	brne	.-38     	; 0x37ec <main+0x10b8>
    3812:	14 c0       	rjmp	.+40     	; 0x383c <main+0x1108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3814:	69 a9       	ldd	r22, Y+49	; 0x31
    3816:	7a a9       	ldd	r23, Y+50	; 0x32
    3818:	8b a9       	ldd	r24, Y+51	; 0x33
    381a:	9c a9       	ldd	r25, Y+52	; 0x34
    381c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	98 ab       	std	Y+48, r25	; 0x30
    3826:	8f a7       	std	Y+47, r24	; 0x2f
    3828:	8f a5       	ldd	r24, Y+47	; 0x2f
    382a:	98 a9       	ldd	r25, Y+48	; 0x30
    382c:	9c a7       	std	Y+44, r25	; 0x2c
    382e:	8b a7       	std	Y+43, r24	; 0x2b
    3830:	8b a5       	ldd	r24, Y+43	; 0x2b
    3832:	9c a5       	ldd	r25, Y+44	; 0x2c
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	f1 f7       	brne	.-4      	; 0x3834 <main+0x1100>
    3838:	9c a7       	std	Y+44, r25	; 0x2c
    383a:	8b a7       	std	Y+43, r24	; 0x2b
			{
				update_fails = 0;
				LCD_clearScreen();
				LCD_displayString("Plz Enter Pass:");
				LCD_moveCursor(1, 0);
				for(i = 0; i < 5; ++i)
    383c:	80 91 50 01 	lds	r24, 0x0150
    3840:	8f 5f       	subi	r24, 0xFF	; 255
    3842:	80 93 50 01 	sts	0x0150, r24
    3846:	80 91 50 01 	lds	r24, 0x0150
    384a:	85 30       	cpi	r24, 0x05	; 5
    384c:	08 f4       	brcc	.+2      	; 0x3850 <main+0x111c>
    384e:	77 cf       	rjmp	.-274    	; 0x373e <main+0x100a>
				{
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while(KEYPAD_getPressedKey() != '=');
    3850:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    3854:	8d 33       	cpi	r24, 0x3D	; 61
    3856:	e1 f7       	brne	.-8      	; 0x3850 <main+0x111c>
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	aa ef       	ldi	r26, 0xFA	; 250
    385e:	b3 e4       	ldi	r27, 0x43	; 67
    3860:	8f a3       	std	Y+39, r24	; 0x27
    3862:	98 a7       	std	Y+40, r25	; 0x28
    3864:	a9 a7       	std	Y+41, r26	; 0x29
    3866:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3868:	6f a1       	ldd	r22, Y+39	; 0x27
    386a:	78 a5       	ldd	r23, Y+40	; 0x28
    386c:	89 a5       	ldd	r24, Y+41	; 0x29
    386e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3870:	20 e0       	ldi	r18, 0x00	; 0
    3872:	30 e0       	ldi	r19, 0x00	; 0
    3874:	4a ef       	ldi	r20, 0xFA	; 250
    3876:	54 e4       	ldi	r21, 0x44	; 68
    3878:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387c:	dc 01       	movw	r26, r24
    387e:	cb 01       	movw	r24, r22
    3880:	8b a3       	std	Y+35, r24	; 0x23
    3882:	9c a3       	std	Y+36, r25	; 0x24
    3884:	ad a3       	std	Y+37, r26	; 0x25
    3886:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3888:	6b a1       	ldd	r22, Y+35	; 0x23
    388a:	7c a1       	ldd	r23, Y+36	; 0x24
    388c:	8d a1       	ldd	r24, Y+37	; 0x25
    388e:	9e a1       	ldd	r25, Y+38	; 0x26
    3890:	20 e0       	ldi	r18, 0x00	; 0
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	40 e8       	ldi	r20, 0x80	; 128
    3896:	5f e3       	ldi	r21, 0x3F	; 63
    3898:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389c:	88 23       	and	r24, r24
    389e:	2c f4       	brge	.+10     	; 0x38aa <main+0x1176>
		__ticks = 1;
    38a0:	81 e0       	ldi	r24, 0x01	; 1
    38a2:	90 e0       	ldi	r25, 0x00	; 0
    38a4:	9a a3       	std	Y+34, r25	; 0x22
    38a6:	89 a3       	std	Y+33, r24	; 0x21
    38a8:	3f c0       	rjmp	.+126    	; 0x3928 <main+0x11f4>
	else if (__tmp > 65535)
    38aa:	6b a1       	ldd	r22, Y+35	; 0x23
    38ac:	7c a1       	ldd	r23, Y+36	; 0x24
    38ae:	8d a1       	ldd	r24, Y+37	; 0x25
    38b0:	9e a1       	ldd	r25, Y+38	; 0x26
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	3f ef       	ldi	r19, 0xFF	; 255
    38b6:	4f e7       	ldi	r20, 0x7F	; 127
    38b8:	57 e4       	ldi	r21, 0x47	; 71
    38ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38be:	18 16       	cp	r1, r24
    38c0:	4c f5       	brge	.+82     	; 0x3914 <main+0x11e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38c2:	6f a1       	ldd	r22, Y+39	; 0x27
    38c4:	78 a5       	ldd	r23, Y+40	; 0x28
    38c6:	89 a5       	ldd	r24, Y+41	; 0x29
    38c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	40 e2       	ldi	r20, 0x20	; 32
    38d0:	51 e4       	ldi	r21, 0x41	; 65
    38d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d6:	dc 01       	movw	r26, r24
    38d8:	cb 01       	movw	r24, r22
    38da:	bc 01       	movw	r22, r24
    38dc:	cd 01       	movw	r24, r26
    38de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e2:	dc 01       	movw	r26, r24
    38e4:	cb 01       	movw	r24, r22
    38e6:	9a a3       	std	Y+34, r25	; 0x22
    38e8:	89 a3       	std	Y+33, r24	; 0x21
    38ea:	0f c0       	rjmp	.+30     	; 0x390a <main+0x11d6>
    38ec:	88 ec       	ldi	r24, 0xC8	; 200
    38ee:	90 e0       	ldi	r25, 0x00	; 0
    38f0:	98 a3       	std	Y+32, r25	; 0x20
    38f2:	8f 8f       	std	Y+31, r24	; 0x1f
    38f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    38f6:	98 a1       	ldd	r25, Y+32	; 0x20
    38f8:	01 97       	sbiw	r24, 0x01	; 1
    38fa:	f1 f7       	brne	.-4      	; 0x38f8 <main+0x11c4>
    38fc:	98 a3       	std	Y+32, r25	; 0x20
    38fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3900:	89 a1       	ldd	r24, Y+33	; 0x21
    3902:	9a a1       	ldd	r25, Y+34	; 0x22
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9a a3       	std	Y+34, r25	; 0x22
    3908:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    390a:	89 a1       	ldd	r24, Y+33	; 0x21
    390c:	9a a1       	ldd	r25, Y+34	; 0x22
    390e:	00 97       	sbiw	r24, 0x00	; 0
    3910:	69 f7       	brne	.-38     	; 0x38ec <main+0x11b8>
    3912:	14 c0       	rjmp	.+40     	; 0x393c <main+0x1208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3914:	6b a1       	ldd	r22, Y+35	; 0x23
    3916:	7c a1       	ldd	r23, Y+36	; 0x24
    3918:	8d a1       	ldd	r24, Y+37	; 0x25
    391a:	9e a1       	ldd	r25, Y+38	; 0x26
    391c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3920:	dc 01       	movw	r26, r24
    3922:	cb 01       	movw	r24, r22
    3924:	9a a3       	std	Y+34, r25	; 0x22
    3926:	89 a3       	std	Y+33, r24	; 0x21
    3928:	89 a1       	ldd	r24, Y+33	; 0x21
    392a:	9a a1       	ldd	r25, Y+34	; 0x22
    392c:	9e 8f       	std	Y+30, r25	; 0x1e
    392e:	8d 8f       	std	Y+29, r24	; 0x1d
    3930:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3932:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <main+0x1200>
    3938:	9e 8f       	std	Y+30, r25	; 0x1e
    393a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(500);
				LCD_clearScreen();
    393c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
				LCD_displayString("Plz re-enter the");
    3940:	80 e7       	ldi	r24, 0x70	; 112
    3942:	90 e0       	ldi	r25, 0x00	; 0
    3944:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "same pass: ");
    3948:	21 e8       	ldi	r18, 0x81	; 129
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	81 e0       	ldi	r24, 0x01	; 1
    394e:	60 e0       	ldi	r22, 0x00	; 0
    3950:	a9 01       	movw	r20, r18
    3952:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
				for(i = 5; i < 10; ++i)
    3956:	85 e0       	ldi	r24, 0x05	; 5
    3958:	80 93 50 01 	sts	0x0150, r24
    395c:	84 c0       	rjmp	.+264    	; 0x3a66 <main+0x1332>
				{
					pass[i] = KEYPAD_getPressedKey();
    395e:	80 91 50 01 	lds	r24, 0x0150
    3962:	08 2f       	mov	r16, r24
    3964:	10 e0       	ldi	r17, 0x00	; 0
    3966:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    396a:	f8 01       	movw	r30, r16
    396c:	ea 5b       	subi	r30, 0xBA	; 186
    396e:	fe 4f       	sbci	r31, 0xFE	; 254
    3970:	80 83       	st	Z, r24
					LCD_displayCharacter('*');
    3972:	8a e2       	ldi	r24, 0x2A	; 42
    3974:	0e 94 63 0f 	call	0x1ec6	; 0x1ec6 <LCD_displayCharacter>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	aa ef       	ldi	r26, 0xFA	; 250
    397e:	b3 e4       	ldi	r27, 0x43	; 67
    3980:	89 8f       	std	Y+25, r24	; 0x19
    3982:	9a 8f       	std	Y+26, r25	; 0x1a
    3984:	ab 8f       	std	Y+27, r26	; 0x1b
    3986:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3988:	69 8d       	ldd	r22, Y+25	; 0x19
    398a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    398c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4a ef       	ldi	r20, 0xFA	; 250
    3996:	54 e4       	ldi	r21, 0x44	; 68
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8d 8b       	std	Y+21, r24	; 0x15
    39a2:	9e 8b       	std	Y+22, r25	; 0x16
    39a4:	af 8b       	std	Y+23, r26	; 0x17
    39a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    39a8:	6d 89       	ldd	r22, Y+21	; 0x15
    39aa:	7e 89       	ldd	r23, Y+22	; 0x16
    39ac:	8f 89       	ldd	r24, Y+23	; 0x17
    39ae:	98 8d       	ldd	r25, Y+24	; 0x18
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	2c f4       	brge	.+10     	; 0x39ca <main+0x1296>
		__ticks = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9c 8b       	std	Y+20, r25	; 0x14
    39c6:	8b 8b       	std	Y+19, r24	; 0x13
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <main+0x1314>
	else if (__tmp > 65535)
    39ca:	6d 89       	ldd	r22, Y+21	; 0x15
    39cc:	7e 89       	ldd	r23, Y+22	; 0x16
    39ce:	8f 89       	ldd	r24, Y+23	; 0x17
    39d0:	98 8d       	ldd	r25, Y+24	; 0x18
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	3f ef       	ldi	r19, 0xFF	; 255
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	57 e4       	ldi	r21, 0x47	; 71
    39da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	4c f5       	brge	.+82     	; 0x3a34 <main+0x1300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e2:	69 8d       	ldd	r22, Y+25	; 0x19
    39e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9c 8b       	std	Y+20, r25	; 0x14
    3a08:	8b 8b       	std	Y+19, r24	; 0x13
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <main+0x12f6>
    3a0c:	88 ec       	ldi	r24, 0xC8	; 200
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	9a 8b       	std	Y+18, r25	; 0x12
    3a12:	89 8b       	std	Y+17, r24	; 0x11
    3a14:	89 89       	ldd	r24, Y+17	; 0x11
    3a16:	9a 89       	ldd	r25, Y+18	; 0x12
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <main+0x12e4>
    3a1c:	9a 8b       	std	Y+18, r25	; 0x12
    3a1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	8b 89       	ldd	r24, Y+19	; 0x13
    3a22:	9c 89       	ldd	r25, Y+20	; 0x14
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	9c 8b       	std	Y+20, r25	; 0x14
    3a28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	8b 89       	ldd	r24, Y+19	; 0x13
    3a2c:	9c 89       	ldd	r25, Y+20	; 0x14
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	69 f7       	brne	.-38     	; 0x3a0c <main+0x12d8>
    3a32:	14 c0       	rjmp	.+40     	; 0x3a5c <main+0x1328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	6d 89       	ldd	r22, Y+21	; 0x15
    3a36:	7e 89       	ldd	r23, Y+22	; 0x16
    3a38:	8f 89       	ldd	r24, Y+23	; 0x17
    3a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9c 8b       	std	Y+20, r25	; 0x14
    3a46:	8b 8b       	std	Y+19, r24	; 0x13
    3a48:	8b 89       	ldd	r24, Y+19	; 0x13
    3a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a4c:	98 8b       	std	Y+16, r25	; 0x10
    3a4e:	8f 87       	std	Y+15, r24	; 0x0f
    3a50:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a52:	98 89       	ldd	r25, Y+16	; 0x10
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <main+0x1320>
    3a58:	98 8b       	std	Y+16, r25	; 0x10
    3a5a:	8f 87       	std	Y+15, r24	; 0x0f
				while(KEYPAD_getPressedKey() != '=');
				_delay_ms(500);
				LCD_clearScreen();
				LCD_displayString("Plz re-enter the");
				LCD_displayStringRowColumn(1, 0, "same pass: ");
				for(i = 5; i < 10; ++i)
    3a5c:	80 91 50 01 	lds	r24, 0x0150
    3a60:	8f 5f       	subi	r24, 0xFF	; 255
    3a62:	80 93 50 01 	sts	0x0150, r24
    3a66:	80 91 50 01 	lds	r24, 0x0150
    3a6a:	8a 30       	cpi	r24, 0x0A	; 10
    3a6c:	08 f4       	brcc	.+2      	; 0x3a70 <main+0x133c>
    3a6e:	77 cf       	rjmp	.-274    	; 0x395e <main+0x122a>
				{
					pass[i] = KEYPAD_getPressedKey();
					LCD_displayCharacter('*');
					_delay_ms(500);
				}
				while(KEYPAD_getPressedKey() != '=');
    3a70:	0e 94 03 12 	call	0x2406	; 0x2406 <KEYPAD_getPressedKey>
    3a74:	8d 33       	cpi	r24, 0x3D	; 61
    3a76:	e1 f7       	brne	.-8      	; 0x3a70 <main+0x133c>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	aa ef       	ldi	r26, 0xFA	; 250
    3a7e:	b3 e4       	ldi	r27, 0x43	; 67
    3a80:	8b 87       	std	Y+11, r24	; 0x0b
    3a82:	9c 87       	std	Y+12, r25	; 0x0c
    3a84:	ad 87       	std	Y+13, r26	; 0x0d
    3a86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	4a ef       	ldi	r20, 0xFA	; 250
    3a96:	54 e4       	ldi	r21, 0x44	; 68
    3a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	8f 83       	std	Y+7, r24	; 0x07
    3aa2:	98 87       	std	Y+8, r25	; 0x08
    3aa4:	a9 87       	std	Y+9, r26	; 0x09
    3aa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    3aaa:	78 85       	ldd	r23, Y+8	; 0x08
    3aac:	89 85       	ldd	r24, Y+9	; 0x09
    3aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ab0:	20 e0       	ldi	r18, 0x00	; 0
    3ab2:	30 e0       	ldi	r19, 0x00	; 0
    3ab4:	40 e8       	ldi	r20, 0x80	; 128
    3ab6:	5f e3       	ldi	r21, 0x3F	; 63
    3ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3abc:	88 23       	and	r24, r24
    3abe:	2c f4       	brge	.+10     	; 0x3aca <main+0x1396>
		__ticks = 1;
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	9e 83       	std	Y+6, r25	; 0x06
    3ac6:	8d 83       	std	Y+5, r24	; 0x05
    3ac8:	3f c0       	rjmp	.+126    	; 0x3b48 <main+0x1414>
	else if (__tmp > 65535)
    3aca:	6f 81       	ldd	r22, Y+7	; 0x07
    3acc:	78 85       	ldd	r23, Y+8	; 0x08
    3ace:	89 85       	ldd	r24, Y+9	; 0x09
    3ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	3f ef       	ldi	r19, 0xFF	; 255
    3ad6:	4f e7       	ldi	r20, 0x7F	; 127
    3ad8:	57 e4       	ldi	r21, 0x47	; 71
    3ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ade:	18 16       	cp	r1, r24
    3ae0:	4c f5       	brge	.+82     	; 0x3b34 <main+0x1400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3aea:	20 e0       	ldi	r18, 0x00	; 0
    3aec:	30 e0       	ldi	r19, 0x00	; 0
    3aee:	40 e2       	ldi	r20, 0x20	; 32
    3af0:	51 e4       	ldi	r21, 0x41	; 65
    3af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af6:	dc 01       	movw	r26, r24
    3af8:	cb 01       	movw	r24, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	cd 01       	movw	r24, r26
    3afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b02:	dc 01       	movw	r26, r24
    3b04:	cb 01       	movw	r24, r22
    3b06:	9e 83       	std	Y+6, r25	; 0x06
    3b08:	8d 83       	std	Y+5, r24	; 0x05
    3b0a:	0f c0       	rjmp	.+30     	; 0x3b2a <main+0x13f6>
    3b0c:	88 ec       	ldi	r24, 0xC8	; 200
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	9c 83       	std	Y+4, r25	; 0x04
    3b12:	8b 83       	std	Y+3, r24	; 0x03
    3b14:	8b 81       	ldd	r24, Y+3	; 0x03
    3b16:	9c 81       	ldd	r25, Y+4	; 0x04
    3b18:	01 97       	sbiw	r24, 0x01	; 1
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <main+0x13e4>
    3b1c:	9c 83       	std	Y+4, r25	; 0x04
    3b1e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b20:	8d 81       	ldd	r24, Y+5	; 0x05
    3b22:	9e 81       	ldd	r25, Y+6	; 0x06
    3b24:	01 97       	sbiw	r24, 0x01	; 1
    3b26:	9e 83       	std	Y+6, r25	; 0x06
    3b28:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	00 97       	sbiw	r24, 0x00	; 0
    3b30:	69 f7       	brne	.-38     	; 0x3b0c <main+0x13d8>
    3b32:	14 c0       	rjmp	.+40     	; 0x3b5c <main+0x1428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b34:	6f 81       	ldd	r22, Y+7	; 0x07
    3b36:	78 85       	ldd	r23, Y+8	; 0x08
    3b38:	89 85       	ldd	r24, Y+9	; 0x09
    3b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b40:	dc 01       	movw	r26, r24
    3b42:	cb 01       	movw	r24, r22
    3b44:	9e 83       	std	Y+6, r25	; 0x06
    3b46:	8d 83       	std	Y+5, r24	; 0x05
    3b48:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b4c:	9a 83       	std	Y+2, r25	; 0x02
    3b4e:	89 83       	std	Y+1, r24	; 0x01
    3b50:	89 81       	ldd	r24, Y+1	; 0x01
    3b52:	9a 81       	ldd	r25, Y+2	; 0x02
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	f1 f7       	brne	.-4      	; 0x3b54 <main+0x1420>
    3b58:	9a 83       	std	Y+2, r25	; 0x02
    3b5a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(500);

				/* Sending Password to Control ECU Using UART */
				for(i = 0; i < 10; ++i)
    3b5c:	10 92 50 01 	sts	0x0150, r1
    3b60:	0f c0       	rjmp	.+30     	; 0x3b80 <main+0x144c>
				{
					UART_sendByte(pass[i]);
    3b62:	80 91 50 01 	lds	r24, 0x0150
    3b66:	88 2f       	mov	r24, r24
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	fc 01       	movw	r30, r24
    3b6c:	ea 5b       	subi	r30, 0xBA	; 186
    3b6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3b70:	80 81       	ld	r24, Z
    3b72:	0e 94 0c 06 	call	0xc18	; 0xc18 <UART_sendByte>
				}
				while(KEYPAD_getPressedKey() != '=');
				_delay_ms(500);

				/* Sending Password to Control ECU Using UART */
				for(i = 0; i < 10; ++i)
    3b76:	80 91 50 01 	lds	r24, 0x0150
    3b7a:	8f 5f       	subi	r24, 0xFF	; 255
    3b7c:	80 93 50 01 	sts	0x0150, r24
    3b80:	80 91 50 01 	lds	r24, 0x0150
    3b84:	8a 30       	cpi	r24, 0x0A	; 10
    3b86:	68 f3       	brcs	.-38     	; 0x3b62 <main+0x142e>
				{
					UART_sendByte(pass[i]);
				}

				/* Checking pass */
				pass_state = UART_receiveByte();
    3b88:	0e 94 23 06 	call	0xc46	; 0xc46 <UART_receiveByte>
    3b8c:	80 93 51 01 	sts	0x0151, r24
				if(pass_state == PASS_FAIL)
    3b90:	80 91 51 01 	lds	r24, 0x0151
    3b94:	80 3f       	cpi	r24, 0xF0	; 240
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <main+0x1466>
    3b98:	e4 c9       	rjmp	.-3128   	; 0x2f62 <main+0x82e>
				{
					/* the program will return to entering password again */
					LCD_clearScreen();
    3b9a:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayString("PASS WRONG");
    3b9e:	8d e8       	ldi	r24, 0x8D	; 141
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
					counter = 0;
    3ba6:	10 92 53 01 	sts	0x0153, r1
					while(counter < 3);
    3baa:	80 91 53 01 	lds	r24, 0x0153
    3bae:	83 30       	cpi	r24, 0x03	; 3
    3bb0:	e0 f3       	brcs	.-8      	; 0x3baa <main+0x1476>
    3bb2:	d7 c9       	rjmp	.-3154   	; 0x2f62 <main+0x82e>
				}
			}
			else if(pass_state == PASS_FAIL)
    3bb4:	80 91 51 01 	lds	r24, 0x0151
    3bb8:	80 3f       	cpi	r24, 0xF0	; 240
    3bba:	09 f0       	breq	.+2      	; 0x3bbe <main+0x148a>
    3bbc:	d2 c9       	rjmp	.-3164   	; 0x2f62 <main+0x82e>
			{
				++update_fails;
    3bbe:	80 91 55 01 	lds	r24, 0x0155
    3bc2:	8f 5f       	subi	r24, 0xFF	; 255
    3bc4:	80 93 55 01 	sts	0x0155, r24
				if(update_fails == 3)
    3bc8:	80 91 55 01 	lds	r24, 0x0155
    3bcc:	83 30       	cpi	r24, 0x03	; 3
    3bce:	c9 f4       	brne	.+50     	; 0x3c02 <main+0x14ce>
				{
					/* Lock system for 1 minute */
					LCD_clearScreen();
    3bd0:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 1, "System LOCKED");
    3bd4:	2c e0       	ldi	r18, 0x0C	; 12
    3bd6:	31 e0       	ldi	r19, 0x01	; 1
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	61 e0       	ldi	r22, 0x01	; 1
    3bdc:	a9 01       	movw	r20, r18
    3bde:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "Wait for 1 min");
    3be2:	2a e1       	ldi	r18, 0x1A	; 26
    3be4:	31 e0       	ldi	r19, 0x01	; 1
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	a9 01       	movw	r20, r18
    3bec:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_displayStringRowColumn>
					counter = 0;
    3bf0:	10 92 53 01 	sts	0x0153, r1
					while(counter < 60);
    3bf4:	80 91 53 01 	lds	r24, 0x0153
    3bf8:	8c 33       	cpi	r24, 0x3C	; 60
    3bfa:	e0 f3       	brcs	.-8      	; 0x3bf4 <main+0x14c0>
					update_fails = 0;
    3bfc:	10 92 55 01 	sts	0x0155, r1
    3c00:	b0 c9       	rjmp	.-3232   	; 0x2f62 <main+0x82e>
				}
				else
				{
					/* the program will return to entering password again */
					LCD_clearScreen();
    3c02:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <LCD_clearScreen>
					LCD_displayString("PASS WRONG");
    3c06:	8d e8       	ldi	r24, 0x8D	; 141
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_displayString>
					counter = 0;
    3c0e:	10 92 53 01 	sts	0x0153, r1
					while(counter < 3);
    3c12:	80 91 53 01 	lds	r24, 0x0153
    3c16:	83 30       	cpi	r24, 0x03	; 3
    3c18:	e0 f3       	brcs	.-8      	; 0x3c12 <main+0x14de>
    3c1a:	a3 c9       	rjmp	.-3258   	; 0x2f62 <main+0x82e>

00003c1c <__udivmodsi4>:
    3c1c:	a1 e2       	ldi	r26, 0x21	; 33
    3c1e:	1a 2e       	mov	r1, r26
    3c20:	aa 1b       	sub	r26, r26
    3c22:	bb 1b       	sub	r27, r27
    3c24:	fd 01       	movw	r30, r26
    3c26:	0d c0       	rjmp	.+26     	; 0x3c42 <__udivmodsi4_ep>

00003c28 <__udivmodsi4_loop>:
    3c28:	aa 1f       	adc	r26, r26
    3c2a:	bb 1f       	adc	r27, r27
    3c2c:	ee 1f       	adc	r30, r30
    3c2e:	ff 1f       	adc	r31, r31
    3c30:	a2 17       	cp	r26, r18
    3c32:	b3 07       	cpc	r27, r19
    3c34:	e4 07       	cpc	r30, r20
    3c36:	f5 07       	cpc	r31, r21
    3c38:	20 f0       	brcs	.+8      	; 0x3c42 <__udivmodsi4_ep>
    3c3a:	a2 1b       	sub	r26, r18
    3c3c:	b3 0b       	sbc	r27, r19
    3c3e:	e4 0b       	sbc	r30, r20
    3c40:	f5 0b       	sbc	r31, r21

00003c42 <__udivmodsi4_ep>:
    3c42:	66 1f       	adc	r22, r22
    3c44:	77 1f       	adc	r23, r23
    3c46:	88 1f       	adc	r24, r24
    3c48:	99 1f       	adc	r25, r25
    3c4a:	1a 94       	dec	r1
    3c4c:	69 f7       	brne	.-38     	; 0x3c28 <__udivmodsi4_loop>
    3c4e:	60 95       	com	r22
    3c50:	70 95       	com	r23
    3c52:	80 95       	com	r24
    3c54:	90 95       	com	r25
    3c56:	9b 01       	movw	r18, r22
    3c58:	ac 01       	movw	r20, r24
    3c5a:	bd 01       	movw	r22, r26
    3c5c:	cf 01       	movw	r24, r30
    3c5e:	08 95       	ret

00003c60 <__prologue_saves__>:
    3c60:	2f 92       	push	r2
    3c62:	3f 92       	push	r3
    3c64:	4f 92       	push	r4
    3c66:	5f 92       	push	r5
    3c68:	6f 92       	push	r6
    3c6a:	7f 92       	push	r7
    3c6c:	8f 92       	push	r8
    3c6e:	9f 92       	push	r9
    3c70:	af 92       	push	r10
    3c72:	bf 92       	push	r11
    3c74:	cf 92       	push	r12
    3c76:	df 92       	push	r13
    3c78:	ef 92       	push	r14
    3c7a:	ff 92       	push	r15
    3c7c:	0f 93       	push	r16
    3c7e:	1f 93       	push	r17
    3c80:	cf 93       	push	r28
    3c82:	df 93       	push	r29
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	ca 1b       	sub	r28, r26
    3c8a:	db 0b       	sbc	r29, r27
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	09 94       	ijmp

00003c98 <__epilogue_restores__>:
    3c98:	2a 88       	ldd	r2, Y+18	; 0x12
    3c9a:	39 88       	ldd	r3, Y+17	; 0x11
    3c9c:	48 88       	ldd	r4, Y+16	; 0x10
    3c9e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca0:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ca2:	7d 84       	ldd	r7, Y+13	; 0x0d
    3ca4:	8c 84       	ldd	r8, Y+12	; 0x0c
    3ca6:	9b 84       	ldd	r9, Y+11	; 0x0b
    3ca8:	aa 84       	ldd	r10, Y+10	; 0x0a
    3caa:	b9 84       	ldd	r11, Y+9	; 0x09
    3cac:	c8 84       	ldd	r12, Y+8	; 0x08
    3cae:	df 80       	ldd	r13, Y+7	; 0x07
    3cb0:	ee 80       	ldd	r14, Y+6	; 0x06
    3cb2:	fd 80       	ldd	r15, Y+5	; 0x05
    3cb4:	0c 81       	ldd	r16, Y+4	; 0x04
    3cb6:	1b 81       	ldd	r17, Y+3	; 0x03
    3cb8:	aa 81       	ldd	r26, Y+2	; 0x02
    3cba:	b9 81       	ldd	r27, Y+1	; 0x01
    3cbc:	ce 0f       	add	r28, r30
    3cbe:	d1 1d       	adc	r29, r1
    3cc0:	0f b6       	in	r0, 0x3f	; 63
    3cc2:	f8 94       	cli
    3cc4:	de bf       	out	0x3e, r29	; 62
    3cc6:	0f be       	out	0x3f, r0	; 63
    3cc8:	cd bf       	out	0x3d, r28	; 61
    3cca:	ed 01       	movw	r28, r26
    3ccc:	08 95       	ret

00003cce <itoa>:
    3cce:	fb 01       	movw	r30, r22
    3cd0:	9f 01       	movw	r18, r30
    3cd2:	e8 94       	clt
    3cd4:	42 30       	cpi	r20, 0x02	; 2
    3cd6:	c4 f0       	brlt	.+48     	; 0x3d08 <itoa+0x3a>
    3cd8:	45 32       	cpi	r20, 0x25	; 37
    3cda:	b4 f4       	brge	.+44     	; 0x3d08 <itoa+0x3a>
    3cdc:	4a 30       	cpi	r20, 0x0A	; 10
    3cde:	29 f4       	brne	.+10     	; 0x3cea <itoa+0x1c>
    3ce0:	97 fb       	bst	r25, 7
    3ce2:	1e f4       	brtc	.+6      	; 0x3cea <itoa+0x1c>
    3ce4:	90 95       	com	r25
    3ce6:	81 95       	neg	r24
    3ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cea:	64 2f       	mov	r22, r20
    3cec:	77 27       	eor	r23, r23
    3cee:	0e 94 98 1e 	call	0x3d30	; 0x3d30 <__udivmodhi4>
    3cf2:	80 5d       	subi	r24, 0xD0	; 208
    3cf4:	8a 33       	cpi	r24, 0x3A	; 58
    3cf6:	0c f0       	brlt	.+2      	; 0x3cfa <itoa+0x2c>
    3cf8:	89 5d       	subi	r24, 0xD9	; 217
    3cfa:	81 93       	st	Z+, r24
    3cfc:	cb 01       	movw	r24, r22
    3cfe:	00 97       	sbiw	r24, 0x00	; 0
    3d00:	a1 f7       	brne	.-24     	; 0x3cea <itoa+0x1c>
    3d02:	16 f4       	brtc	.+4      	; 0x3d08 <itoa+0x3a>
    3d04:	5d e2       	ldi	r21, 0x2D	; 45
    3d06:	51 93       	st	Z+, r21
    3d08:	10 82       	st	Z, r1
    3d0a:	c9 01       	movw	r24, r18
    3d0c:	0c 94 88 1e 	jmp	0x3d10	; 0x3d10 <strrev>

00003d10 <strrev>:
    3d10:	dc 01       	movw	r26, r24
    3d12:	fc 01       	movw	r30, r24
    3d14:	67 2f       	mov	r22, r23
    3d16:	71 91       	ld	r23, Z+
    3d18:	77 23       	and	r23, r23
    3d1a:	e1 f7       	brne	.-8      	; 0x3d14 <strrev+0x4>
    3d1c:	32 97       	sbiw	r30, 0x02	; 2
    3d1e:	04 c0       	rjmp	.+8      	; 0x3d28 <strrev+0x18>
    3d20:	7c 91       	ld	r23, X
    3d22:	6d 93       	st	X+, r22
    3d24:	70 83       	st	Z, r23
    3d26:	62 91       	ld	r22, -Z
    3d28:	ae 17       	cp	r26, r30
    3d2a:	bf 07       	cpc	r27, r31
    3d2c:	c8 f3       	brcs	.-14     	; 0x3d20 <strrev+0x10>
    3d2e:	08 95       	ret

00003d30 <__udivmodhi4>:
    3d30:	aa 1b       	sub	r26, r26
    3d32:	bb 1b       	sub	r27, r27
    3d34:	51 e1       	ldi	r21, 0x11	; 17
    3d36:	07 c0       	rjmp	.+14     	; 0x3d46 <__udivmodhi4_ep>

00003d38 <__udivmodhi4_loop>:
    3d38:	aa 1f       	adc	r26, r26
    3d3a:	bb 1f       	adc	r27, r27
    3d3c:	a6 17       	cp	r26, r22
    3d3e:	b7 07       	cpc	r27, r23
    3d40:	10 f0       	brcs	.+4      	; 0x3d46 <__udivmodhi4_ep>
    3d42:	a6 1b       	sub	r26, r22
    3d44:	b7 0b       	sbc	r27, r23

00003d46 <__udivmodhi4_ep>:
    3d46:	88 1f       	adc	r24, r24
    3d48:	99 1f       	adc	r25, r25
    3d4a:	5a 95       	dec	r21
    3d4c:	a9 f7       	brne	.-22     	; 0x3d38 <__udivmodhi4_loop>
    3d4e:	80 95       	com	r24
    3d50:	90 95       	com	r25
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	08 95       	ret

00003d58 <_exit>:
    3d58:	f8 94       	cli

00003d5a <__stop_program>:
    3d5a:	ff cf       	rjmp	.-2      	; 0x3d5a <__stop_program>
