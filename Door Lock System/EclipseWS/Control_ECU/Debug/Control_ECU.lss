
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a68  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  00002a68  00002afc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  0080017c  0080017c  00002c18  2**0
                  ALLOC
  3 .debug_aranges 000003d0  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005b1  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000036e9  00000000  00000000  00003599  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001a7a  00000000  00000000  00006c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000030f4  00000000  00000000  000086fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004e0  00000000  00000000  0000b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000af7  00000000  00000000  0000bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000096e  00000000  00000000  0000c7c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0001cb29  00000000  00000000  0000d135  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00029c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_4>
      14:	0c 94 de 08 	jmp	0x11bc	; 0x11bc <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ab 08 	jmp	0x1156	; 0x1156 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 78 08 	jmp	0x10f0	; 0x10f0 <__vector_9>
      28:	0c 94 45 08 	jmp	0x108a	; 0x108a <__vector_10>
      2c:	0c 94 12 08 	jmp	0x1024	; 0x1024 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 39       	cpi	r26, 0x91	; 145
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <main>
      8a:	0c 94 32 15 	jmp	0x2a64	; 0x2a64 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 14 	jmp	0x29f6	; 0x29f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 15 	jmp	0x2a2e	; 0x2a2e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 15 	jmp	0x2a0e	; 0x2a0e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 15 	jmp	0x2a16	; 0x2a16 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 03 15 	jmp	0x2a06	; 0x2a06 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * @brief  Function to Initialize the UART by the given settings.
 * @param  Constant pointer to the Settings data.
 * @return void.
 */
void UART_init(const UART_ConfigType *Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
     e3a:	9c 83       	std	Y+4, r25	; 0x04
     e3c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
     e3e:	1a 82       	std	Y+2, r1	; 0x02
     e40:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
     e42:	eb e2       	ldi	r30, 0x2B	; 43
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	82 e0       	ldi	r24, 0x02	; 2
     e48:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 For bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
     e4a:	ea e2       	ldi	r30, 0x2A	; 42
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	88 e1       	ldi	r24, 0x18	; 24
     e50:	80 83       	st	Z, r24
	 * UPM1:0  parity bit Mode
	 * USBS    stop bit select
	 * UCSZ1:0 bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (Config_Ptr->parity   << UPM0)|\
     e52:	a0 e4       	ldi	r26, 0x40	; 64
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	eb 81       	ldd	r30, Y+3	; 0x03
     e58:	fc 81       	ldd	r31, Y+4	; 0x04
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	88 2f       	mov	r24, r24
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	82 95       	swap	r24
     e62:	92 95       	swap	r25
     e64:	90 7f       	andi	r25, 0xF0	; 240
     e66:	98 27       	eor	r25, r24
     e68:	80 7f       	andi	r24, 0xF0	; 240
     e6a:	98 27       	eor	r25, r24
     e6c:	28 2f       	mov	r18, r24
     e6e:	20 68       	ori	r18, 0x80	; 128
     e70:	eb 81       	ldd	r30, Y+3	; 0x03
     e72:	fc 81       	ldd	r31, Y+4	; 0x04
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	88 2f       	mov	r24, r24
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	88 0f       	add	r24, r24
     e7c:	99 1f       	adc	r25, r25
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	28 2b       	or	r18, r24
     e88:	eb 81       	ldd	r30, Y+3	; 0x03
     e8a:	fc 81       	ldd	r31, Y+4	; 0x04
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	82 2b       	or	r24, r18
     e98:	8c 93       	st	X, r24
			             (Config_Ptr->stop_bit << USBS)|\
						 (Config_Ptr->bit_data << UCSZ0);
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
     e9a:	eb 81       	ldd	r30, Y+3	; 0x03
     e9c:	fc 81       	ldd	r31, Y+4	; 0x04
     e9e:	83 81       	ldd	r24, Z+3	; 0x03
     ea0:	94 81       	ldd	r25, Z+4	; 0x04
     ea2:	a5 81       	ldd	r26, Z+5	; 0x05
     ea4:	b6 81       	ldd	r27, Z+6	; 0x06
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	aa 1f       	adc	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	aa 1f       	adc	r26, r26
     eb4:	bb 1f       	adc	r27, r27
     eb6:	88 0f       	add	r24, r24
     eb8:	99 1f       	adc	r25, r25
     eba:	aa 1f       	adc	r26, r26
     ebc:	bb 1f       	adc	r27, r27
     ebe:	9c 01       	movw	r18, r24
     ec0:	ad 01       	movw	r20, r26
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	92 e1       	ldi	r25, 0x12	; 18
     ec6:	aa e7       	ldi	r26, 0x7A	; 122
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	bc 01       	movw	r22, r24
     ecc:	cd 01       	movw	r24, r26
     ece:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <__udivmodsi4>
     ed2:	da 01       	movw	r26, r20
     ed4:	c9 01       	movw	r24, r18
     ed6:	01 97       	sbiw	r24, 0x01	; 1
     ed8:	9a 83       	std	Y+2, r25	; 0x02
     eda:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
     edc:	e0 e4       	ldi	r30, 0x40	; 64
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	9a 81       	ldd	r25, Y+2	; 0x02
     ee4:	89 2f       	mov	r24, r25
     ee6:	99 27       	eor	r25, r25
     ee8:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     eea:	e9 e2       	ldi	r30, 0x29	; 41
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	80 83       	st	Z, r24
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <UART_sendByte>:
 * @brief  Function to send byte to another UART device.
 * @param  Byte to send.
 * @return void.
 */
void UART_sendByte(const uint8 data)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	0f 92       	push	r0
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
     f0c:	eb e2       	ldi	r30, 0x2B	; 43
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	80 72       	andi	r24, 0x20	; 32
     f18:	90 70       	andi	r25, 0x00	; 0
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	b9 f3       	breq	.-18     	; 0xf0c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     f1e:	ec e2       	ldi	r30, 0x2C	; 44
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <UART_receiveByte>:
 * @brief  Function to receive byte from another UART device.
 * @param  void.
 * @return Byte received.
 */
uint8 UART_receiveByte(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
     f36:	eb e2       	ldi	r30, 0x2B	; 43
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	88 23       	and	r24, r24
     f3e:	dc f7       	brge	.-10     	; 0xf36 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
     f40:	ec e2       	ldi	r30, 0x2C	; 44
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
}
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <UART_sendString>:
 * @brief  Send the required string through UART to the other UART device.
 * @param  String to send.
 * @return void.
 */
void UART_sendString(const uint8 *Str)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <UART_sendString+0x6>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	9b 83       	std	Y+3, r25	; 0x03
     f5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f5c:	19 82       	std	Y+1, r1	; 0x01
     f5e:	0e c0       	rjmp	.+28     	; 0xf7c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	9b 81       	ldd	r25, Y+3	; 0x03
     f6a:	fc 01       	movw	r30, r24
     f6c:	e2 0f       	add	r30, r18
     f6e:	f3 1f       	adc	r31, r19
     f70:	80 81       	ld	r24, Z
     f72:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
		i++;
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	8f 5f       	subi	r24, 0xFF	; 255
     f7a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
     f7c:	89 81       	ldd	r24, Y+1	; 0x01
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	8a 81       	ldd	r24, Y+2	; 0x02
     f84:	9b 81       	ldd	r25, Y+3	; 0x03
     f86:	fc 01       	movw	r30, r24
     f88:	e2 0f       	add	r30, r18
     f8a:	f3 1f       	adc	r31, r19
     f8c:	80 81       	ld	r24, Z
     f8e:	88 23       	and	r24, r24
     f90:	39 f7       	brne	.-50     	; 0xf60 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <UART_receiveString>:
 * @brief  Receive the required string until the '#' symbol through UART from the other UART device.
 * @param  String to receive.
 * @return void.
 */
void UART_receiveString(uint8 *Str)
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <UART_receiveString+0xa>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fb2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	8c 01       	movw	r16, r24
     fc0:	02 0f       	add	r16, r18
     fc2:	13 1f       	adc	r17, r19
     fc4:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 83       	st	Z, r24
     fcc:	0f c0       	rjmp	.+30     	; 0xfec <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	8f 5f       	subi	r24, 0xFF	; 255
     fd2:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	9b 81       	ldd	r25, Y+3	; 0x03
     fde:	8c 01       	movw	r16, r24
     fe0:	02 0f       	add	r16, r18
     fe2:	13 1f       	adc	r17, r19
     fe4:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
     fe8:	f8 01       	movw	r30, r16
     fea:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	9b 81       	ldd	r25, Y+3	; 0x03
     ff6:	fc 01       	movw	r30, r24
     ff8:	e2 0f       	add	r30, r18
     ffa:	f3 1f       	adc	r31, r19
     ffc:	80 81       	ld	r24, Z
     ffe:	83 32       	cpi	r24, 0x23	; 35
    1000:	31 f7       	brne	.-52     	; 0xfce <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	9b 81       	ldd	r25, Y+3	; 0x03
    100c:	fc 01       	movw	r30, r24
    100e:	e2 0f       	add	r30, r18
    1010:	f3 1f       	adc	r31, r19
    1012:	10 82       	st	Z, r1
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* ISR For Timer0 in Normal Mode */
ISR(TIMER0_OVF_vect)
{
    1024:	1f 92       	push	r1
    1026:	0f 92       	push	r0
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	0f 92       	push	r0
    102c:	11 24       	eor	r1, r1
    102e:	2f 93       	push	r18
    1030:	3f 93       	push	r19
    1032:	4f 93       	push	r20
    1034:	5f 93       	push	r21
    1036:	6f 93       	push	r22
    1038:	7f 93       	push	r23
    103a:	8f 93       	push	r24
    103c:	9f 93       	push	r25
    103e:	af 93       	push	r26
    1040:	bf 93       	push	r27
    1042:	ef 93       	push	r30
    1044:	ff 93       	push	r31
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    104e:	80 91 7c 01 	lds	r24, 0x017C
    1052:	90 91 7d 01 	lds	r25, 0x017D
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	29 f0       	breq	.+10     	; 0x1064 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    105a:	e0 91 7c 01 	lds	r30, 0x017C
    105e:	f0 91 7d 01 	lds	r31, 0x017D
    1062:	09 95       	icall
	}
}
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	ff 91       	pop	r31
    106a:	ef 91       	pop	r30
    106c:	bf 91       	pop	r27
    106e:	af 91       	pop	r26
    1070:	9f 91       	pop	r25
    1072:	8f 91       	pop	r24
    1074:	7f 91       	pop	r23
    1076:	6f 91       	pop	r22
    1078:	5f 91       	pop	r21
    107a:	4f 91       	pop	r20
    107c:	3f 91       	pop	r19
    107e:	2f 91       	pop	r18
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_10>:

/* ISR For Timer0 in CTC Mode */
ISR(TIMER0_COMP_vect)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	2f 93       	push	r18
    1096:	3f 93       	push	r19
    1098:	4f 93       	push	r20
    109a:	5f 93       	push	r21
    109c:	6f 93       	push	r22
    109e:	7f 93       	push	r23
    10a0:	8f 93       	push	r24
    10a2:	9f 93       	push	r25
    10a4:	af 93       	push	r26
    10a6:	bf 93       	push	r27
    10a8:	ef 93       	push	r30
    10aa:	ff 93       	push	r31
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    10b4:	80 91 7c 01 	lds	r24, 0x017C
    10b8:	90 91 7d 01 	lds	r25, 0x017D
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	29 f0       	breq	.+10     	; 0x10ca <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer0)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    10c0:	e0 91 7c 01 	lds	r30, 0x017C
    10c4:	f0 91 7d 01 	lds	r31, 0x017D
    10c8:	09 95       	icall
	}
}
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	ff 91       	pop	r31
    10d0:	ef 91       	pop	r30
    10d2:	bf 91       	pop	r27
    10d4:	af 91       	pop	r26
    10d6:	9f 91       	pop	r25
    10d8:	8f 91       	pop	r24
    10da:	7f 91       	pop	r23
    10dc:	6f 91       	pop	r22
    10de:	5f 91       	pop	r21
    10e0:	4f 91       	pop	r20
    10e2:	3f 91       	pop	r19
    10e4:	2f 91       	pop	r18
    10e6:	0f 90       	pop	r0
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	0f 90       	pop	r0
    10ec:	1f 90       	pop	r1
    10ee:	18 95       	reti

000010f0 <__vector_9>:

/* ISR For Timer1 in Normal Mode */
ISR(TIMER1_OVF_vect)
{
    10f0:	1f 92       	push	r1
    10f2:	0f 92       	push	r0
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	0f 92       	push	r0
    10f8:	11 24       	eor	r1, r1
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	cd b7       	in	r28, 0x3d	; 61
    1118:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    111a:	80 91 7e 01 	lds	r24, 0x017E
    111e:	90 91 7f 01 	lds	r25, 0x017F
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	29 f0       	breq	.+10     	; 0x1130 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1126:	e0 91 7e 01 	lds	r30, 0x017E
    112a:	f0 91 7f 01 	lds	r31, 0x017F
    112e:	09 95       	icall
	}
}
    1130:	cf 91       	pop	r28
    1132:	df 91       	pop	r29
    1134:	ff 91       	pop	r31
    1136:	ef 91       	pop	r30
    1138:	bf 91       	pop	r27
    113a:	af 91       	pop	r26
    113c:	9f 91       	pop	r25
    113e:	8f 91       	pop	r24
    1140:	7f 91       	pop	r23
    1142:	6f 91       	pop	r22
    1144:	5f 91       	pop	r21
    1146:	4f 91       	pop	r20
    1148:	3f 91       	pop	r19
    114a:	2f 91       	pop	r18
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0f 90       	pop	r0
    1152:	1f 90       	pop	r1
    1154:	18 95       	reti

00001156 <__vector_7>:

/* ISR For Timer1 in CTC Mode */
ISR(TIMER1_COMPA_vect)
{
    1156:	1f 92       	push	r1
    1158:	0f 92       	push	r0
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	0f 92       	push	r0
    115e:	11 24       	eor	r1, r1
    1160:	2f 93       	push	r18
    1162:	3f 93       	push	r19
    1164:	4f 93       	push	r20
    1166:	5f 93       	push	r21
    1168:	6f 93       	push	r22
    116a:	7f 93       	push	r23
    116c:	8f 93       	push	r24
    116e:	9f 93       	push	r25
    1170:	af 93       	push	r26
    1172:	bf 93       	push	r27
    1174:	ef 93       	push	r30
    1176:	ff 93       	push	r31
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    1180:	80 91 7e 01 	lds	r24, 0x017E
    1184:	90 91 7f 01 	lds	r25, 0x017F
    1188:	00 97       	sbiw	r24, 0x00	; 0
    118a:	29 f0       	breq	.+10     	; 0x1196 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer1)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    118c:	e0 91 7e 01 	lds	r30, 0x017E
    1190:	f0 91 7f 01 	lds	r31, 0x017F
    1194:	09 95       	icall
	}
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	ff 91       	pop	r31
    119c:	ef 91       	pop	r30
    119e:	bf 91       	pop	r27
    11a0:	af 91       	pop	r26
    11a2:	9f 91       	pop	r25
    11a4:	8f 91       	pop	r24
    11a6:	7f 91       	pop	r23
    11a8:	6f 91       	pop	r22
    11aa:	5f 91       	pop	r21
    11ac:	4f 91       	pop	r20
    11ae:	3f 91       	pop	r19
    11b0:	2f 91       	pop	r18
    11b2:	0f 90       	pop	r0
    11b4:	0f be       	out	0x3f, r0	; 63
    11b6:	0f 90       	pop	r0
    11b8:	1f 90       	pop	r1
    11ba:	18 95       	reti

000011bc <__vector_5>:

/* ISR For Timer2 in Normal Mode */
ISR(TIMER2_OVF_vect)
{
    11bc:	1f 92       	push	r1
    11be:	0f 92       	push	r0
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	0f 92       	push	r0
    11c4:	11 24       	eor	r1, r1
    11c6:	2f 93       	push	r18
    11c8:	3f 93       	push	r19
    11ca:	4f 93       	push	r20
    11cc:	5f 93       	push	r21
    11ce:	6f 93       	push	r22
    11d0:	7f 93       	push	r23
    11d2:	8f 93       	push	r24
    11d4:	9f 93       	push	r25
    11d6:	af 93       	push	r26
    11d8:	bf 93       	push	r27
    11da:	ef 93       	push	r30
    11dc:	ff 93       	push	r31
    11de:	df 93       	push	r29
    11e0:	cf 93       	push	r28
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    11e6:	80 91 80 01 	lds	r24, 0x0180
    11ea:	90 91 81 01 	lds	r25, 0x0181
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	29 f0       	breq	.+10     	; 0x11fc <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11f2:	e0 91 80 01 	lds	r30, 0x0180
    11f6:	f0 91 81 01 	lds	r31, 0x0181
    11fa:	09 95       	icall
	}
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_4>:

/* ISR For Timer2 in CTC Mode */
ISR(TIMER2_COMP_vect)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	2f 93       	push	r18
    122e:	3f 93       	push	r19
    1230:	4f 93       	push	r20
    1232:	5f 93       	push	r21
    1234:	6f 93       	push	r22
    1236:	7f 93       	push	r23
    1238:	8f 93       	push	r24
    123a:	9f 93       	push	r25
    123c:	af 93       	push	r26
    123e:	bf 93       	push	r27
    1240:	ef 93       	push	r30
    1242:	ff 93       	push	r31
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	cd b7       	in	r28, 0x3d	; 61
    124a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    124c:	80 91 80 01 	lds	r24, 0x0180
    1250:	90 91 81 01 	lds	r25, 0x0181
    1254:	00 97       	sbiw	r24, 0x00	; 0
    1256:	29 f0       	breq	.+10     	; 0x1262 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr_Timer2)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1258:	e0 91 80 01 	lds	r30, 0x0180
    125c:	f0 91 81 01 	lds	r31, 0x0181
    1260:	09 95       	icall
	}
}
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	ff 91       	pop	r31
    1268:	ef 91       	pop	r30
    126a:	bf 91       	pop	r27
    126c:	af 91       	pop	r26
    126e:	9f 91       	pop	r25
    1270:	8f 91       	pop	r24
    1272:	7f 91       	pop	r23
    1274:	6f 91       	pop	r22
    1276:	5f 91       	pop	r21
    1278:	4f 91       	pop	r20
    127a:	3f 91       	pop	r19
    127c:	2f 91       	pop	r18
    127e:	0f 90       	pop	r0
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	0f 90       	pop	r0
    1284:	1f 90       	pop	r1
    1286:	18 95       	reti

00001288 <Timer_init>:
 * @brief  Function To Initialize the Timer by the Given Settings.
 * @param  Constant pointer to the Settings Data.
 * @return void.
 */
void Timer_init(const Timer_ConfigType *Config_Ptr)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	00 d0       	rcall	.+0      	; 0x128e <Timer_init+0x6>
    128e:	00 d0       	rcall	.+0      	; 0x1290 <Timer_init+0x8>
    1290:	cd b7       	in	r28, 0x3d	; 61
    1292:	de b7       	in	r29, 0x3e	; 62
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->timer_ID)
    1298:	e9 81       	ldd	r30, Y+1	; 0x01
    129a:	fa 81       	ldd	r31, Y+2	; 0x02
    129c:	84 81       	ldd	r24, Z+4	; 0x04
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3c 83       	std	Y+4, r19	; 0x04
    12a4:	2b 83       	std	Y+3, r18	; 0x03
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	09 f4       	brne	.+2      	; 0x12b2 <Timer_init+0x2a>
    12b0:	48 c0       	rjmp	.+144    	; 0x1342 <Timer_init+0xba>
    12b2:	2b 81       	ldd	r18, Y+3	; 0x03
    12b4:	3c 81       	ldd	r19, Y+4	; 0x04
    12b6:	22 30       	cpi	r18, 0x02	; 2
    12b8:	31 05       	cpc	r19, r1
    12ba:	09 f4       	brne	.+2      	; 0x12be <Timer_init+0x36>
    12bc:	83 c0       	rjmp	.+262    	; 0x13c4 <Timer_init+0x13c>
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	09 f0       	breq	.+2      	; 0x12c8 <Timer_init+0x40>
    12c6:	ba c0       	rjmp	.+372    	; 0x143c <Timer_init+0x1b4>
	{
	case TIMER0_ID:

		/* FOC0 = 1 for non-PWM Modes */
		TCCR0 = (1 << FOC0);
    12c8:	e3 e5       	ldi	r30, 0x53	; 83
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 e8       	ldi	r24, 0x80	; 128
    12ce:	80 83       	st	Z, r24

		/* Load the initial value to Timer0 counter */
		TCNT0 = (uint8)Config_Ptr->timer_InitialValue;
    12d0:	a2 e5       	ldi	r26, 0x52	; 82
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
    12dc:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	86 81       	ldd	r24, Z+6	; 0x06
    12e4:	88 23       	and	r24, r24
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <Timer_init+0x70>
		{
			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1 << TOIE0);
    12e8:	a9 e5       	ldi	r26, 0x59	; 89
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e9 e5       	ldi	r30, 0x59	; 89
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	81 60       	ori	r24, 0x01	; 1
    12f4:	8c 93       	st	X, r24
    12f6:	1a c0       	rjmp	.+52     	; 0x132c <Timer_init+0xa4>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    12f8:	e9 81       	ldd	r30, Y+1	; 0x01
    12fa:	fa 81       	ldd	r31, Y+2	; 0x02
    12fc:	86 81       	ldd	r24, Z+6	; 0x06
    12fe:	81 30       	cpi	r24, 0x01	; 1
    1300:	a9 f4       	brne	.+42     	; 0x132c <Timer_init+0xa4>
		{
			/* Setting Timer0 to CTC */
			TCCR0 |= (1 << WGM01);
    1302:	a3 e5       	ldi	r26, 0x53	; 83
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	e3 e5       	ldi	r30, 0x53	; 83
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	88 60       	ori	r24, 0x08	; 8
    130e:	8c 93       	st	X, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1 << OCIE0);
    1310:	a9 e5       	ldi	r26, 0x59	; 89
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 e5       	ldi	r30, 0x59	; 89
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	82 60       	ori	r24, 0x02	; 2
    131c:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR0 = (uint8)Config_Ptr->timer_compare_MatchValue;
    131e:	ac e5       	ldi	r26, 0x5C	; 92
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	93 81       	ldd	r25, Z+3	; 0x03
    132a:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer0 */
		TCCR0 |= (Config_Ptr->timer_clock);
    132c:	a3 e5       	ldi	r26, 0x53	; 83
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e3 e5       	ldi	r30, 0x53	; 83
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	90 81       	ld	r25, Z
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	85 81       	ldd	r24, Z+5	; 0x05
    133c:	89 2b       	or	r24, r25
    133e:	8c 93       	st	X, r24
    1340:	7d c0       	rjmp	.+250    	; 0x143c <Timer_init+0x1b4>

		break;
	case TIMER1_ID:

		/* FOC1A = 1, FOC1B = 1 for non-PWM Modes */
		TCCR1A = (1 << FOC1A) | (1 << FOC1B);
    1342:	ef e4       	ldi	r30, 0x4F	; 79
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	8c e0       	ldi	r24, 0x0C	; 12
    1348:	80 83       	st	Z, r24
		TCCR1B = 0;
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	10 82       	st	Z, r1

		/* Load the initial value to Timer1 counter */
		TCNT1 = Config_Ptr->timer_InitialValue;
    1350:	ac e4       	ldi	r26, 0x4C	; 76
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	80 81       	ld	r24, Z
    135a:	91 81       	ldd	r25, Z+1	; 0x01
    135c:	11 96       	adiw	r26, 0x01	; 1
    135e:	9c 93       	st	X, r25
    1360:	8e 93       	st	-X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
    1362:	e9 81       	ldd	r30, Y+1	; 0x01
    1364:	fa 81       	ldd	r31, Y+2	; 0x02
    1366:	86 81       	ldd	r24, Z+6	; 0x06
    1368:	88 23       	and	r24, r24
    136a:	41 f4       	brne	.+16     	; 0x137c <Timer_init+0xf4>
		{
			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1 << TOIE1);
    136c:	a9 e5       	ldi	r26, 0x59	; 89
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	e9 e5       	ldi	r30, 0x59	; 89
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	84 60       	ori	r24, 0x04	; 4
    1378:	8c 93       	st	X, r24
    137a:	19 c0       	rjmp	.+50     	; 0x13ae <Timer_init+0x126>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    137c:	e9 81       	ldd	r30, Y+1	; 0x01
    137e:	fa 81       	ldd	r31, Y+2	; 0x02
    1380:	86 81       	ldd	r24, Z+6	; 0x06
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	a1 f4       	brne	.+40     	; 0x13ae <Timer_init+0x126>
		{
			/* Setting CTC Mode */
			TCCR1B = (1 << WGM12);
    1386:	ee e4       	ldi	r30, 0x4E	; 78
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	88 e0       	ldi	r24, 0x08	; 8
    138c:	80 83       	st	Z, r24

			/* Enable Timer1 Compare Interrupt */
			TIMSK |= (1 << OCIE1A);
    138e:	a9 e5       	ldi	r26, 0x59	; 89
    1390:	b0 e0       	ldi	r27, 0x00	; 0
    1392:	e9 e5       	ldi	r30, 0x59	; 89
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	80 61       	ori	r24, 0x10	; 16
    139a:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR1A = Config_Ptr->timer_compare_MatchValue;
    139c:	aa e4       	ldi	r26, 0x4A	; 74
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e9 81       	ldd	r30, Y+1	; 0x01
    13a2:	fa 81       	ldd	r31, Y+2	; 0x02
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	11 96       	adiw	r26, 0x01	; 1
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
		{
			/* Do nothing */
		}

		/* Start Timer1 */
		TCCR1B |= (Config_Ptr->timer_clock);
    13ae:	ae e4       	ldi	r26, 0x4E	; 78
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	ee e4       	ldi	r30, 0x4E	; 78
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	90 81       	ld	r25, Z
    13b8:	e9 81       	ldd	r30, Y+1	; 0x01
    13ba:	fa 81       	ldd	r31, Y+2	; 0x02
    13bc:	85 81       	ldd	r24, Z+5	; 0x05
    13be:	89 2b       	or	r24, r25
    13c0:	8c 93       	st	X, r24
    13c2:	3c c0       	rjmp	.+120    	; 0x143c <Timer_init+0x1b4>

		break;
	case TIMER2_ID:

		/* FOC2 = 1 for non-PWM Modes */
		TCCR2 = (1 << FOC2);
    13c4:	e5 e4       	ldi	r30, 0x45	; 69
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 e8       	ldi	r24, 0x80	; 128
    13ca:	80 83       	st	Z, r24

		/* Load the initial value to Timer2 counter */
		TCNT2 = (uint8)Config_Ptr->timer_InitialValue;
    13cc:	a4 e4       	ldi	r26, 0x44	; 68
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e9 81       	ldd	r30, Y+1	; 0x01
    13d2:	fa 81       	ldd	r31, Y+2	; 0x02
    13d4:	80 81       	ld	r24, Z
    13d6:	91 81       	ldd	r25, Z+1	; 0x01
    13d8:	8c 93       	st	X, r24

		if (Config_Ptr->timer_mode == TIMER_NORMAL)
    13da:	e9 81       	ldd	r30, Y+1	; 0x01
    13dc:	fa 81       	ldd	r31, Y+2	; 0x02
    13de:	86 81       	ldd	r24, Z+6	; 0x06
    13e0:	88 23       	and	r24, r24
    13e2:	41 f4       	brne	.+16     	; 0x13f4 <Timer_init+0x16c>
		{
			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1 << TOIE2);
    13e4:	a9 e5       	ldi	r26, 0x59	; 89
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e9 e5       	ldi	r30, 0x59	; 89
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	80 64       	ori	r24, 0x40	; 64
    13f0:	8c 93       	st	X, r24
    13f2:	1a c0       	rjmp	.+52     	; 0x1428 <Timer_init+0x1a0>
		}
		else if(Config_Ptr->timer_mode == TIMER_CTC)
    13f4:	e9 81       	ldd	r30, Y+1	; 0x01
    13f6:	fa 81       	ldd	r31, Y+2	; 0x02
    13f8:	86 81       	ldd	r24, Z+6	; 0x06
    13fa:	81 30       	cpi	r24, 0x01	; 1
    13fc:	a9 f4       	brne	.+42     	; 0x1428 <Timer_init+0x1a0>
		{
			/* Setting Timer2 to CTC */
			TCCR2 |= (1 << WGM21);
    13fe:	a5 e4       	ldi	r26, 0x45	; 69
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e4       	ldi	r30, 0x45	; 69
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	88 60       	ori	r24, 0x08	; 8
    140a:	8c 93       	st	X, r24

			/* Enable Timer2 Compare Interrupt */
			TIMSK |= (1 << OCIE2);
    140c:	a9 e5       	ldi	r26, 0x59	; 89
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e9 e5       	ldi	r30, 0x59	; 89
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	80 68       	ori	r24, 0x80	; 128
    1418:	8c 93       	st	X, r24

			/* Storing the Compare Match Value */
			OCR2 = (uint8)Config_Ptr->timer_compare_MatchValue;
    141a:	a3 e4       	ldi	r26, 0x43	; 67
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e9 81       	ldd	r30, Y+1	; 0x01
    1420:	fa 81       	ldd	r31, Y+2	; 0x02
    1422:	82 81       	ldd	r24, Z+2	; 0x02
    1424:	93 81       	ldd	r25, Z+3	; 0x03
    1426:	8c 93       	st	X, r24
		{
			/* Do nothing */
		}

		/* Start Timer2 */
		TCCR2 |= (Config_Ptr->timer_clock);
    1428:	a5 e4       	ldi	r26, 0x45	; 69
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	e5 e4       	ldi	r30, 0x45	; 69
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	90 81       	ld	r25, Z
    1432:	e9 81       	ldd	r30, Y+1	; 0x01
    1434:	fa 81       	ldd	r31, Y+2	; 0x02
    1436:	85 81       	ldd	r24, Z+5	; 0x05
    1438:	89 2b       	or	r24, r25
    143a:	8c 93       	st	X, r24

		break;
	}
}
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	cf 91       	pop	r28
    1446:	df 91       	pop	r29
    1448:	08 95       	ret

0000144a <Timer_deInit>:
 * @brief  Function to disable the Timer via Timer_ID.
 * @param  Timer ID.
 * @return void.
 */
void Timer_deInit(Timer_ID_Type timer_type)
{
    144a:	df 93       	push	r29
    144c:	cf 93       	push	r28
    144e:	00 d0       	rcall	.+0      	; 0x1450 <Timer_deInit+0x6>
    1450:	0f 92       	push	r0
    1452:	cd b7       	in	r28, 0x3d	; 61
    1454:	de b7       	in	r29, 0x3e	; 62
    1456:	89 83       	std	Y+1, r24	; 0x01
	/* Clear all registers contents and Disable Interrupts */
	switch(timer_type)
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	3b 83       	std	Y+3, r19	; 0x03
    1460:	2a 83       	std	Y+2, r18	; 0x02
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	9b 81       	ldd	r25, Y+3	; 0x03
    1466:	81 30       	cpi	r24, 0x01	; 1
    1468:	91 05       	cpc	r25, r1
    146a:	d1 f0       	breq	.+52     	; 0x14a0 <Timer_deInit+0x56>
    146c:	2a 81       	ldd	r18, Y+2	; 0x02
    146e:	3b 81       	ldd	r19, Y+3	; 0x03
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	41 f1       	breq	.+80     	; 0x14c6 <Timer_deInit+0x7c>
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	9b 81       	ldd	r25, Y+3	; 0x03
    147a:	00 97       	sbiw	r24, 0x00	; 0
    147c:	a1 f5       	brne	.+104    	; 0x14e6 <Timer_deInit+0x9c>
	{
	case TIMER0_ID:
		TCCR0 = 0;
    147e:	e3 e5       	ldi	r30, 0x53	; 83
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	10 82       	st	Z, r1
		TCNT0 = 0;
    1484:	e2 e5       	ldi	r30, 0x52	; 82
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	10 82       	st	Z, r1
		OCR0 = 0;
    148a:	ec e5       	ldi	r30, 0x5C	; 92
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE0) & ~(1 << OCIE0);
    1490:	a9 e5       	ldi	r26, 0x59	; 89
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e9 e5       	ldi	r30, 0x59	; 89
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	8c 7f       	andi	r24, 0xFC	; 252
    149c:	8c 93       	st	X, r24
    149e:	23 c0       	rjmp	.+70     	; 0x14e6 <Timer_deInit+0x9c>
		break;
	case TIMER1_ID:
		TCCR1A = 0;
    14a0:	ef e4       	ldi	r30, 0x4F	; 79
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
		TCNT1 = 0;
    14a6:	ec e4       	ldi	r30, 0x4C	; 76
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	11 82       	std	Z+1, r1	; 0x01
    14ac:	10 82       	st	Z, r1
		OCR1A = 0;
    14ae:	ea e4       	ldi	r30, 0x4A	; 74
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	11 82       	std	Z+1, r1	; 0x01
    14b4:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE1) & ~(1 << OCIE1A);
    14b6:	a9 e5       	ldi	r26, 0x59	; 89
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e9 e5       	ldi	r30, 0x59	; 89
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	8b 7e       	andi	r24, 0xEB	; 235
    14c2:	8c 93       	st	X, r24
    14c4:	10 c0       	rjmp	.+32     	; 0x14e6 <Timer_deInit+0x9c>
		break;
	case TIMER2_ID:
		TCCR2 = 0;
    14c6:	e5 e4       	ldi	r30, 0x45	; 69
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	10 82       	st	Z, r1
		TCNT2 = 0;
    14cc:	e4 e4       	ldi	r30, 0x44	; 68
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	10 82       	st	Z, r1
		OCR2 = 0;
    14d2:	e3 e4       	ldi	r30, 0x43	; 67
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	10 82       	st	Z, r1
		TIMSK &= ~(1 << TOIE2) & ~(1 << OCIE2);
    14d8:	a9 e5       	ldi	r26, 0x59	; 89
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e9 e5       	ldi	r30, 0x59	; 89
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	8f 73       	andi	r24, 0x3F	; 63
    14e4:	8c 93       	st	X, r24
		break;
	}
}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	cf 91       	pop	r28
    14ee:	df 91       	pop	r29
    14f0:	08 95       	ret

000014f2 <Timer_setCallBack>:
 * @brief  Function to set the Call Back function address to the required Timer.
 * @param  pointer to Call Back function and Timer Id you want to set The Callback to it.
 * @return void.
 */
void Timer_setCallBack(void(*a_ptr)(void), Timer_ID_Type a_timer_ID)
{
    14f2:	df 93       	push	r29
    14f4:	cf 93       	push	r28
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <Timer_setCallBack+0x6>
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <Timer_setCallBack+0x8>
    14fa:	0f 92       	push	r0
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	6b 83       	std	Y+3, r22	; 0x03
	switch(a_timer_ID)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3d 83       	std	Y+5, r19	; 0x05
    150e:	2c 83       	std	Y+4, r18	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
    1512:	9d 81       	ldd	r25, Y+5	; 0x05
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	81 f0       	breq	.+32     	; 0x153a <Timer_setCallBack+0x48>
    151a:	2c 81       	ldd	r18, Y+4	; 0x04
    151c:	3d 81       	ldd	r19, Y+5	; 0x05
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	91 f0       	breq	.+36     	; 0x1548 <Timer_setCallBack+0x56>
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	9d 81       	ldd	r25, Y+5	; 0x05
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	a1 f4       	brne	.+40     	; 0x1554 <Timer_setCallBack+0x62>
	{
	case TIMER0_ID:
		g_callBackPtr_Timer0 = a_ptr;
    152c:	89 81       	ldd	r24, Y+1	; 0x01
    152e:	9a 81       	ldd	r25, Y+2	; 0x02
    1530:	90 93 7d 01 	sts	0x017D, r25
    1534:	80 93 7c 01 	sts	0x017C, r24
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <Timer_setCallBack+0x62>
		break;
	case TIMER1_ID:
		g_callBackPtr_Timer1 = a_ptr;
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	90 93 7f 01 	sts	0x017F, r25
    1542:	80 93 7e 01 	sts	0x017E, r24
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <Timer_setCallBack+0x62>
		break;
	case TIMER2_ID:
		g_callBackPtr_Timer2 = a_ptr;
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	90 93 81 01 	sts	0x0181, r25
    1550:	80 93 80 01 	sts	0x0180, r24
		break;
	}
}
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	cf 91       	pop	r28
    1560:	df 91       	pop	r29
    1562:	08 95       	ret

00001564 <PWM_Timer0_Init>:
 *         in The Compare Register.
 * @param  Duty cycle.
 * @return void.
 */
void PWM_Timer0_Init(uint8 duty_cycle)
{
    1564:	df 93       	push	r29
    1566:	cf 93       	push	r28
    1568:	00 d0       	rcall	.+0      	; 0x156a <PWM_Timer0_Init+0x6>
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	8a 83       	std	Y+2, r24	; 0x02
	/* Set Timer Initial value */
	TCNT0 = 0;
    1570:	e2 e5       	ldi	r30, 0x52	; 82
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	10 82       	st	Z, r1

	/* Set Compare Value */
	uint8 duty = (uint8)(((float32) duty_cycle / 100) * 255);
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a0 e0       	ldi	r26, 0x00	; 0
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	bc 01       	movw	r22, r24
    158e:	cd 01       	movw	r24, r26
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	30 e0       	ldi	r19, 0x00	; 0
    1594:	48 ec       	ldi	r20, 0xC8	; 200
    1596:	52 e4       	ldi	r21, 0x42	; 66
    1598:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    159c:	dc 01       	movw	r26, r24
    159e:	cb 01       	movw	r24, r22
    15a0:	bc 01       	movw	r22, r24
    15a2:	cd 01       	movw	r24, r26
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = (uint8)duty;
    15c2:	ec e5       	ldi	r30, 0x5C	; 92
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	80 83       	st	Z, r24

	/* set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	DDRB |= (1<<PB3);
    15ca:	a7 e3       	ldi	r26, 0x37	; 55
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e7 e3       	ldi	r30, 0x37	; 55
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	88 60       	ori	r24, 0x08	; 8
    15d6:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/64 CS00=1 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01) | (1<<CS00);
    15d8:	e3 e5       	ldi	r30, 0x53	; 83
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	8b e6       	ldi	r24, 0x6B	; 107
    15de:	80 83       	st	Z, r24
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <TWI_init>:
 * @brief  Function to initialize the TWI module with Chosen settings.
 * @param  Constant pointer to Settings data.
 * @return void.
 */
void TWI_init(const TWI_ConfigType *Config_Ptr)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	00 d0       	rcall	.+0      	; 0x15f0 <TWI_init+0x6>
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	9a 83       	std	Y+2, r25	; 0x02
    15f6:	89 83       	std	Y+1, r24	; 0x01
     *     Normal Mode       100 Kb/s (The Most Common)
     *     Fast Mode         400 Kb/s
     *     Fast Mode Plus    1 Mb/s
     *     High-Speed Mode   3.4 Mb/s (Mostly Not used)
     */
    TWBR = Config_Ptr->bit_rate;
    15f8:	20 e2       	ldi	r18, 0x20	; 32
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	81 81       	ldd	r24, Z+1	; 0x01
    1602:	92 81       	ldd	r25, Z+2	; 0x02
    1604:	a3 81       	ldd	r26, Z+3	; 0x03
    1606:	b4 81       	ldd	r27, Z+4	; 0x04
    1608:	f9 01       	movw	r30, r18
    160a:	80 83       	st	Z, r24
	TWSR = Config_Ptr->twi_pre;
    160c:	a1 e2       	ldi	r26, 0x21	; 33
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e9 81       	ldd	r30, Y+1	; 0x01
    1612:	fa 81       	ldd	r31, Y+2	; 0x02
    1614:	85 81       	ldd	r24, Z+5	; 0x05
    1616:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = ((Config_Ptr->address & 0x7F) << 1);
    1618:	a2 e2       	ldi	r26, 0x22	; 34
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e9 81       	ldd	r30, Y+1	; 0x01
    161e:	fa 81       	ldd	r31, Y+2	; 0x02
    1620:	80 81       	ld	r24, Z
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    162c:	e6 e5       	ldi	r30, 0x56	; 86
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	84 e0       	ldi	r24, 0x04	; 4
    1632:	80 83       	st	Z, r24
}
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <TWI_start>:
 * @brief  Function to generate a start condition on the TWI bus to initiate communication.
 * @param  void.
 * @return void.
 */
void TWI_start(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1646:	e6 e5       	ldi	r30, 0x56	; 86
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	84 ea       	ldi	r24, 0xA4	; 164
    164c:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    164e:	e6 e5       	ldi	r30, 0x56	; 86
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	88 23       	and	r24, r24
    1656:	dc f7       	brge	.-10     	; 0x164e <TWI_start+0x10>
}
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <TWI_stop>:
 * @brief  Function to generate a stop condition on the TWI bus to terminate communication.
 * @param  void.
 * @return void.
 */
void TWI_stop(void)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1666:	e6 e5       	ldi	r30, 0x56	; 86
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	84 e9       	ldi	r24, 0x94	; 148
    166c:	80 83       	st	Z, r24
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <TWI_writeByte>:
 * @brief  Function to Write a byte of data to the TWI bus.
 * @param  Data to be written in TWI bus.
 * @return void.
 */
void TWI_writeByte(uint8 data)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	0f 92       	push	r0
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1680:	e3 e2       	ldi	r30, 0x23	; 35
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1688:	e6 e5       	ldi	r30, 0x56	; 86
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	84 e8       	ldi	r24, 0x84	; 132
    168e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1690:	e6 e5       	ldi	r30, 0x56	; 86
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	80 81       	ld	r24, Z
    1696:	88 23       	and	r24, r24
    1698:	dc f7       	brge	.-10     	; 0x1690 <TWI_writeByte+0x1c>
}
    169a:	0f 90       	pop	r0
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <TWI_readByteWithACK>:
 * @brief  Function to Read a byte of data from the TWI bus with ACK (acknowledge).
 * @param  void.
 * @return Data read from the TWI bus with ACK.
 */
uint8 TWI_readByteWithACK(void)
{
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    16aa:	e6 e5       	ldi	r30, 0x56	; 86
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	84 ec       	ldi	r24, 0xC4	; 196
    16b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16b2:	e6 e5       	ldi	r30, 0x56	; 86
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	88 23       	and	r24, r24
    16ba:	dc f7       	brge	.-10     	; 0x16b2 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    16bc:	e3 e2       	ldi	r30, 0x23	; 35
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
}
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <TWI_readByteWithNACK>:
 * @brief  Function to Read a byte of data from the TWI bus with NACK (no acknowledge).
 * @param  void.
 * @return The byte of data read from the TWI bus with NACK.
 */
uint8 TWI_readByteWithNACK(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    16d0:	e6 e5       	ldi	r30, 0x56	; 86
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	84 e8       	ldi	r24, 0x84	; 132
    16d6:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    16d8:	e6 e5       	ldi	r30, 0x56	; 86
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	88 23       	and	r24, r24
    16e0:	dc f7       	brge	.-10     	; 0x16d8 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    16e2:	e3 e2       	ldi	r30, 0x23	; 35
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
}
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <TWI_getStatus>:
 * @brief  Function to retrieve the current status of the TWI module.
 * @param  void.
 * @return The status of the TWI module.
 */
uint8 TWI_getStatus(void)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    16f8:	e1 e2       	ldi	r30, 0x21	; 33
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 7f       	andi	r24, 0xF8	; 248
    1700:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
}
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <GPIO_setupPinDirection>:
 *         will not handle the request.
 * @param  Port number, Pin number, Pin Direction.
 * @return void.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <GPIO_setupPinDirection+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <GPIO_setupPinDirection+0x8>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
    171e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	08 f0       	brcs	.+2      	; 0x1728 <GPIO_setupPinDirection+0x1c>
    1726:	d5 c0       	rjmp	.+426    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	84 30       	cpi	r24, 0x04	; 4
    172c:	08 f0       	brcs	.+2      	; 0x1730 <GPIO_setupPinDirection+0x24>
    172e:	d1 c0       	rjmp	.+418    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3d 83       	std	Y+5, r19	; 0x05
    1738:	2c 83       	std	Y+4, r18	; 0x04
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	9d 81       	ldd	r25, Y+5	; 0x05
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	09 f4       	brne	.+2      	; 0x1746 <GPIO_setupPinDirection+0x3a>
    1744:	43 c0       	rjmp	.+134    	; 0x17cc <GPIO_setupPinDirection+0xc0>
    1746:	2c 81       	ldd	r18, Y+4	; 0x04
    1748:	3d 81       	ldd	r19, Y+5	; 0x05
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	2c f4       	brge	.+10     	; 0x175a <GPIO_setupPinDirection+0x4e>
    1750:	8c 81       	ldd	r24, Y+4	; 0x04
    1752:	9d 81       	ldd	r25, Y+5	; 0x05
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	71 f0       	breq	.+28     	; 0x1774 <GPIO_setupPinDirection+0x68>
    1758:	bc c0       	rjmp	.+376    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
    175a:	2c 81       	ldd	r18, Y+4	; 0x04
    175c:	3d 81       	ldd	r19, Y+5	; 0x05
    175e:	22 30       	cpi	r18, 0x02	; 2
    1760:	31 05       	cpc	r19, r1
    1762:	09 f4       	brne	.+2      	; 0x1766 <GPIO_setupPinDirection+0x5a>
    1764:	5f c0       	rjmp	.+190    	; 0x1824 <GPIO_setupPinDirection+0x118>
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	83 30       	cpi	r24, 0x03	; 3
    176c:	91 05       	cpc	r25, r1
    176e:	09 f4       	brne	.+2      	; 0x1772 <GPIO_setupPinDirection+0x66>
    1770:	85 c0       	rjmp	.+266    	; 0x187c <GPIO_setupPinDirection+0x170>
    1772:	af c0       	rjmp	.+350    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	a1 f4       	brne	.+40     	; 0x17a2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    177a:	aa e3       	ldi	r26, 0x3A	; 58
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_setupPinDirection+0x8c>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_setupPinDirection+0x88>
    179c:	84 2b       	or	r24, r20
    179e:	8c 93       	st	X, r24
    17a0:	98 c0       	rjmp	.+304    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    17a2:	aa e3       	ldi	r26, 0x3A	; 58
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	ea e3       	ldi	r30, 0x3A	; 58
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <GPIO_setupPinDirection+0xb4>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <GPIO_setupPinDirection+0xb0>
    17c4:	80 95       	com	r24
    17c6:	84 23       	and	r24, r20
    17c8:	8c 93       	st	X, r24
    17ca:	83 c0       	rjmp	.+262    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a1 f4       	brne	.+40     	; 0x17fa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17d2:	a7 e3       	ldi	r26, 0x37	; 55
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e7 e3       	ldi	r30, 0x37	; 55
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_setupPinDirection+0xe4>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_setupPinDirection+0xe0>
    17f4:	84 2b       	or	r24, r20
    17f6:	8c 93       	st	X, r24
    17f8:	6c c0       	rjmp	.+216    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17fa:	a7 e3       	ldi	r26, 0x37	; 55
    17fc:	b0 e0       	ldi	r27, 0x00	; 0
    17fe:	e7 e3       	ldi	r30, 0x37	; 55
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	48 2f       	mov	r20, r24
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	28 2f       	mov	r18, r24
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 2e       	mov	r0, r18
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <GPIO_setupPinDirection+0x10c>
    1814:	88 0f       	add	r24, r24
    1816:	99 1f       	adc	r25, r25
    1818:	0a 94       	dec	r0
    181a:	e2 f7       	brpl	.-8      	; 0x1814 <GPIO_setupPinDirection+0x108>
    181c:	80 95       	com	r24
    181e:	84 23       	and	r24, r20
    1820:	8c 93       	st	X, r24
    1822:	57 c0       	rjmp	.+174    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    182a:	a4 e3       	ldi	r26, 0x34	; 52
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e4 e3       	ldi	r30, 0x34	; 52
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_setupPinDirection+0x13c>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_setupPinDirection+0x138>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	40 c0       	rjmp	.+128    	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1852:	a4 e3       	ldi	r26, 0x34	; 52
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	e4 e3       	ldi	r30, 0x34	; 52
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_setupPinDirection+0x164>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_setupPinDirection+0x160>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	2b c0       	rjmp	.+86     	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1882:	a1 e3       	ldi	r26, 0x31	; 49
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e1 e3       	ldi	r30, 0x31	; 49
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_setupPinDirection+0x194>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_setupPinDirection+0x190>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	14 c0       	rjmp	.+40     	; 0x18d2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    18aa:	a1 e3       	ldi	r26, 0x31	; 49
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e1 e3       	ldi	r30, 0x31	; 49
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_setupPinDirection+0x1bc>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_setupPinDirection+0x1b8>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	0f 90       	pop	r0
    18d8:	0f 90       	pop	r0
    18da:	0f 90       	pop	r0
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <GPIO_writePin>:
 *         function will enable/disable the internal pull-up resistor.
 * @param  Port Number, Pin number, Pin value.
 * @return void.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	00 d0       	rcall	.+0      	; 0x18e8 <GPIO_writePin+0x6>
    18e8:	00 d0       	rcall	.+0      	; 0x18ea <GPIO_writePin+0x8>
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	89 83       	std	Y+1, r24	; 0x01
    18f2:	6a 83       	std	Y+2, r22	; 0x02
    18f4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	88 30       	cpi	r24, 0x08	; 8
    18fa:	08 f0       	brcs	.+2      	; 0x18fe <GPIO_writePin+0x1c>
    18fc:	31 c1       	rjmp	.+610    	; 0x1b60 <GPIO_writePin+0x27e>
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	84 30       	cpi	r24, 0x04	; 4
    1902:	08 f0       	brcs	.+2      	; 0x1906 <GPIO_writePin+0x24>
    1904:	2d c1       	rjmp	.+602    	; 0x1b60 <GPIO_writePin+0x27e>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	3d 83       	std	Y+5, r19	; 0x05
    190e:	2c 83       	std	Y+4, r18	; 0x04
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <GPIO_writePin+0x3a>
    191a:	5a c0       	rjmp	.+180    	; 0x19d0 <GPIO_writePin+0xee>
    191c:	2c 81       	ldd	r18, Y+4	; 0x04
    191e:	3d 81       	ldd	r19, Y+5	; 0x05
    1920:	22 30       	cpi	r18, 0x02	; 2
    1922:	31 05       	cpc	r19, r1
    1924:	2c f4       	brge	.+10     	; 0x1930 <GPIO_writePin+0x4e>
    1926:	8c 81       	ldd	r24, Y+4	; 0x04
    1928:	9d 81       	ldd	r25, Y+5	; 0x05
    192a:	00 97       	sbiw	r24, 0x00	; 0
    192c:	71 f0       	breq	.+28     	; 0x194a <GPIO_writePin+0x68>
    192e:	18 c1       	rjmp	.+560    	; 0x1b60 <GPIO_writePin+0x27e>
    1930:	2c 81       	ldd	r18, Y+4	; 0x04
    1932:	3d 81       	ldd	r19, Y+5	; 0x05
    1934:	22 30       	cpi	r18, 0x02	; 2
    1936:	31 05       	cpc	r19, r1
    1938:	09 f4       	brne	.+2      	; 0x193c <GPIO_writePin+0x5a>
    193a:	8d c0       	rjmp	.+282    	; 0x1a56 <GPIO_writePin+0x174>
    193c:	8c 81       	ldd	r24, Y+4	; 0x04
    193e:	9d 81       	ldd	r25, Y+5	; 0x05
    1940:	83 30       	cpi	r24, 0x03	; 3
    1942:	91 05       	cpc	r25, r1
    1944:	09 f4       	brne	.+2      	; 0x1948 <GPIO_writePin+0x66>
    1946:	ca c0       	rjmp	.+404    	; 0x1adc <GPIO_writePin+0x1fa>
    1948:	0b c1       	rjmp	.+534    	; 0x1b60 <GPIO_writePin+0x27e>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	81 30       	cpi	r24, 0x01	; 1
    194e:	a1 f4       	brne	.+40     	; 0x1978 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_writePin+0x8c>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_writePin+0x88>
    1972:	84 2b       	or	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	f4 c0       	rjmp	.+488    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 23       	and	r24, r24
    197c:	a9 f4       	brne	.+42     	; 0x19a8 <GPIO_writePin+0xc6>
			{
				CLEAR_BIT(PORTA,pin_num);
    197e:	ab e3       	ldi	r26, 0x3B	; 59
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e3       	ldi	r30, 0x3B	; 59
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	48 2f       	mov	r20, r24
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <GPIO_writePin+0xba>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <GPIO_writePin+0xb6>
    19a0:	80 95       	com	r24
    19a2:	84 23       	and	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	dc c0       	rjmp	.+440    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTA, pin_num);
    19a8:	ab e3       	ldi	r26, 0x3B	; 59
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	eb e3       	ldi	r30, 0x3B	; 59
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_writePin+0xe4>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_writePin+0xe0>
    19ca:	84 27       	eor	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	c8 c0       	rjmp	.+400    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	a1 f4       	brne	.+40     	; 0x19fe <GPIO_writePin+0x11c>
			{
				SET_BIT(PORTB,pin_num);
    19d6:	a8 e3       	ldi	r26, 0x38	; 56
    19d8:	b0 e0       	ldi	r27, 0x00	; 0
    19da:	e8 e3       	ldi	r30, 0x38	; 56
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	48 2f       	mov	r20, r24
    19e2:	8a 81       	ldd	r24, Y+2	; 0x02
    19e4:	28 2f       	mov	r18, r24
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <GPIO_writePin+0x112>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <GPIO_writePin+0x10e>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
    19fc:	b1 c0       	rjmp	.+354    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	88 23       	and	r24, r24
    1a02:	a9 f4       	brne	.+42     	; 0x1a2e <GPIO_writePin+0x14c>
			{
				CLEAR_BIT(PORTB,pin_num);
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	48 2f       	mov	r20, r24
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	02 2e       	mov	r0, r18
    1a1c:	02 c0       	rjmp	.+4      	; 0x1a22 <GPIO_writePin+0x140>
    1a1e:	88 0f       	add	r24, r24
    1a20:	99 1f       	adc	r25, r25
    1a22:	0a 94       	dec	r0
    1a24:	e2 f7       	brpl	.-8      	; 0x1a1e <GPIO_writePin+0x13c>
    1a26:	80 95       	com	r24
    1a28:	84 23       	and	r24, r20
    1a2a:	8c 93       	st	X, r24
    1a2c:	99 c0       	rjmp	.+306    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTB, pin_num);
    1a2e:	a8 e3       	ldi	r26, 0x38	; 56
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e8 e3       	ldi	r30, 0x38	; 56
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	48 2f       	mov	r20, r24
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	02 2e       	mov	r0, r18
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <GPIO_writePin+0x16a>
    1a48:	88 0f       	add	r24, r24
    1a4a:	99 1f       	adc	r25, r25
    1a4c:	0a 94       	dec	r0
    1a4e:	e2 f7       	brpl	.-8      	; 0x1a48 <GPIO_writePin+0x166>
    1a50:	84 27       	eor	r24, r20
    1a52:	8c 93       	st	X, r24
    1a54:	85 c0       	rjmp	.+266    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	81 30       	cpi	r24, 0x01	; 1
    1a5a:	a1 f4       	brne	.+40     	; 0x1a84 <GPIO_writePin+0x1a2>
			{
				SET_BIT(PORTC,pin_num);
    1a5c:	a5 e3       	ldi	r26, 0x35	; 53
    1a5e:	b0 e0       	ldi	r27, 0x00	; 0
    1a60:	e5 e3       	ldi	r30, 0x35	; 53
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	80 81       	ld	r24, Z
    1a66:	48 2f       	mov	r20, r24
    1a68:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <GPIO_writePin+0x198>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <GPIO_writePin+0x194>
    1a7e:	84 2b       	or	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	6e c0       	rjmp	.+220    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	88 23       	and	r24, r24
    1a88:	a9 f4       	brne	.+42     	; 0x1ab4 <GPIO_writePin+0x1d2>
			{
				CLEAR_BIT(PORTC,pin_num);
    1a8a:	a5 e3       	ldi	r26, 0x35	; 53
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e3       	ldi	r30, 0x35	; 53
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	48 2f       	mov	r20, r24
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	28 2f       	mov	r18, r24
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 2e       	mov	r0, r18
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <GPIO_writePin+0x1c6>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	99 1f       	adc	r25, r25
    1aa8:	0a 94       	dec	r0
    1aaa:	e2 f7       	brpl	.-8      	; 0x1aa4 <GPIO_writePin+0x1c2>
    1aac:	80 95       	com	r24
    1aae:	84 23       	and	r24, r20
    1ab0:	8c 93       	st	X, r24
    1ab2:	56 c0       	rjmp	.+172    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTC, pin_num);
    1ab4:	a5 e3       	ldi	r26, 0x35	; 53
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e3       	ldi	r30, 0x35	; 53
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <GPIO_writePin+0x1f0>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <GPIO_writePin+0x1ec>
    1ad6:	84 27       	eor	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	42 c0       	rjmp	.+132    	; 0x1b60 <GPIO_writePin+0x27e>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1adc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	a1 f4       	brne	.+40     	; 0x1b0a <GPIO_writePin+0x228>
			{
				SET_BIT(PORTD,pin_num);
    1ae2:	a2 e3       	ldi	r26, 0x32	; 50
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e2 e3       	ldi	r30, 0x32	; 50
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	48 2f       	mov	r20, r24
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	28 2f       	mov	r18, r24
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	02 2e       	mov	r0, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_writePin+0x21e>
    1afc:	88 0f       	add	r24, r24
    1afe:	99 1f       	adc	r25, r25
    1b00:	0a 94       	dec	r0
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_writePin+0x21a>
    1b04:	84 2b       	or	r24, r20
    1b06:	8c 93       	st	X, r24
    1b08:	2b c0       	rjmp	.+86     	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else if (value == LOGIC_LOW)
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	88 23       	and	r24, r24
    1b0e:	a9 f4       	brne	.+42     	; 0x1b3a <GPIO_writePin+0x258>
			{
				CLEAR_BIT(PORTD,pin_num);
    1b10:	a2 e3       	ldi	r26, 0x32	; 50
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e2 e3       	ldi	r30, 0x32	; 50
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	48 2f       	mov	r20, r24
    1b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1e:	28 2f       	mov	r18, r24
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	02 2e       	mov	r0, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <GPIO_writePin+0x24c>
    1b2a:	88 0f       	add	r24, r24
    1b2c:	99 1f       	adc	r25, r25
    1b2e:	0a 94       	dec	r0
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <GPIO_writePin+0x248>
    1b32:	80 95       	com	r24
    1b34:	84 23       	and	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	13 c0       	rjmp	.+38     	; 0x1b60 <GPIO_writePin+0x27e>
			}
			else
			{
				TOGGLE_BIT(PORTD, pin_num);
    1b3a:	a2 e3       	ldi	r26, 0x32	; 50
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e2 e3       	ldi	r30, 0x32	; 50
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <GPIO_writePin+0x276>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <GPIO_writePin+0x272>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <GPIO_readPin>:
 *         are not correct, The function will return Logic Low.
 * @param  Port Number, Pin number.
 * @return Pin Value.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b70:	df 93       	push	r29
    1b72:	cf 93       	push	r28
    1b74:	00 d0       	rcall	.+0      	; 0x1b76 <GPIO_readPin+0x6>
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <GPIO_readPin+0x8>
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
    1b7e:	8a 83       	std	Y+2, r24	; 0x02
    1b80:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b82:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	08 f0       	brcs	.+2      	; 0x1b8c <GPIO_readPin+0x1c>
    1b8a:	84 c0       	rjmp	.+264    	; 0x1c94 <GPIO_readPin+0x124>
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	84 30       	cpi	r24, 0x04	; 4
    1b90:	08 f0       	brcs	.+2      	; 0x1b94 <GPIO_readPin+0x24>
    1b92:	80 c0       	rjmp	.+256    	; 0x1c94 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	28 2f       	mov	r18, r24
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	3d 83       	std	Y+5, r19	; 0x05
    1b9c:	2c 83       	std	Y+4, r18	; 0x04
    1b9e:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ba2:	41 30       	cpi	r20, 0x01	; 1
    1ba4:	51 05       	cpc	r21, r1
    1ba6:	79 f1       	breq	.+94     	; 0x1c06 <GPIO_readPin+0x96>
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	9d 81       	ldd	r25, Y+5	; 0x05
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	91 05       	cpc	r25, r1
    1bb0:	34 f4       	brge	.+12     	; 0x1bbe <GPIO_readPin+0x4e>
    1bb2:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb4:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb6:	21 15       	cp	r18, r1
    1bb8:	31 05       	cpc	r19, r1
    1bba:	69 f0       	breq	.+26     	; 0x1bd6 <GPIO_readPin+0x66>
    1bbc:	6b c0       	rjmp	.+214    	; 0x1c94 <GPIO_readPin+0x124>
    1bbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1bc0:	5d 81       	ldd	r21, Y+5	; 0x05
    1bc2:	42 30       	cpi	r20, 0x02	; 2
    1bc4:	51 05       	cpc	r21, r1
    1bc6:	b9 f1       	breq	.+110    	; 0x1c36 <GPIO_readPin+0xc6>
    1bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bca:	9d 81       	ldd	r25, Y+5	; 0x05
    1bcc:	83 30       	cpi	r24, 0x03	; 3
    1bce:	91 05       	cpc	r25, r1
    1bd0:	09 f4       	brne	.+2      	; 0x1bd4 <GPIO_readPin+0x64>
    1bd2:	49 c0       	rjmp	.+146    	; 0x1c66 <GPIO_readPin+0xf6>
    1bd4:	5f c0       	rjmp	.+190    	; 0x1c94 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1bd6:	e9 e3       	ldi	r30, 0x39	; 57
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	28 2f       	mov	r18, r24
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	a9 01       	movw	r20, r18
    1be8:	02 c0       	rjmp	.+4      	; 0x1bee <GPIO_readPin+0x7e>
    1bea:	55 95       	asr	r21
    1bec:	47 95       	ror	r20
    1bee:	8a 95       	dec	r24
    1bf0:	e2 f7       	brpl	.-8      	; 0x1bea <GPIO_readPin+0x7a>
    1bf2:	ca 01       	movw	r24, r20
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	90 70       	andi	r25, 0x00	; 0
    1bf8:	88 23       	and	r24, r24
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	49 c0       	rjmp	.+146    	; 0x1c94 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c02:	19 82       	std	Y+1, r1	; 0x01
    1c04:	47 c0       	rjmp	.+142    	; 0x1c94 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1c06:	e6 e3       	ldi	r30, 0x36	; 54
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	88 2f       	mov	r24, r24
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	a9 01       	movw	r20, r18
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <GPIO_readPin+0xae>
    1c1a:	55 95       	asr	r21
    1c1c:	47 95       	ror	r20
    1c1e:	8a 95       	dec	r24
    1c20:	e2 f7       	brpl	.-8      	; 0x1c1a <GPIO_readPin+0xaa>
    1c22:	ca 01       	movw	r24, r20
    1c24:	81 70       	andi	r24, 0x01	; 1
    1c26:	90 70       	andi	r25, 0x00	; 0
    1c28:	88 23       	and	r24, r24
    1c2a:	19 f0       	breq	.+6      	; 0x1c32 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	31 c0       	rjmp	.+98     	; 0x1c94 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c32:	19 82       	std	Y+1, r1	; 0x01
    1c34:	2f c0       	rjmp	.+94     	; 0x1c94 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c36:	e3 e3       	ldi	r30, 0x33	; 51
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <GPIO_readPin+0xde>
    1c4a:	55 95       	asr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <GPIO_readPin+0xda>
    1c52:	ca 01       	movw	r24, r20
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	90 70       	andi	r25, 0x00	; 0
    1c58:	88 23       	and	r24, r24
    1c5a:	19 f0       	breq	.+6      	; 0x1c62 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	89 83       	std	Y+1, r24	; 0x01
    1c60:	19 c0       	rjmp	.+50     	; 0x1c94 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c62:	19 82       	std	Y+1, r1	; 0x01
    1c64:	17 c0       	rjmp	.+46     	; 0x1c94 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c66:	e0 e3       	ldi	r30, 0x30	; 48
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	28 2f       	mov	r18, r24
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	88 2f       	mov	r24, r24
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	a9 01       	movw	r20, r18
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <GPIO_readPin+0x10e>
    1c7a:	55 95       	asr	r21
    1c7c:	47 95       	ror	r20
    1c7e:	8a 95       	dec	r24
    1c80:	e2 f7       	brpl	.-8      	; 0x1c7a <GPIO_readPin+0x10a>
    1c82:	ca 01       	movw	r24, r20
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	88 23       	and	r24, r24
    1c8a:	19 f0       	breq	.+6      	; 0x1c92 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
    1c8e:	89 83       	std	Y+1, r24	; 0x01
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c92:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	0f 90       	pop	r0
    1c9e:	0f 90       	pop	r0
    1ca0:	cf 91       	pop	r28
    1ca2:	df 91       	pop	r29
    1ca4:	08 95       	ret

00001ca6 <GPIO_setupPortDirection>:
 *         If the input port number is not correct, The function will not handle the request.
 * @param  Port Number, Port Direction.
 * @return void.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ca6:	df 93       	push	r29
    1ca8:	cf 93       	push	r28
    1caa:	00 d0       	rcall	.+0      	; 0x1cac <GPIO_setupPortDirection+0x6>
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <GPIO_setupPortDirection+0x8>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	89 83       	std	Y+1, r24	; 0x01
    1cb4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	90 f5       	brcc	.+100    	; 0x1d20 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	3c 83       	std	Y+4, r19	; 0x04
    1cc4:	2b 83       	std	Y+3, r18	; 0x03
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	91 05       	cpc	r25, r1
    1cce:	d1 f0       	breq	.+52     	; 0x1d04 <GPIO_setupPortDirection+0x5e>
    1cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd4:	22 30       	cpi	r18, 0x02	; 2
    1cd6:	31 05       	cpc	r19, r1
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <GPIO_setupPortDirection+0x3e>
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	00 97       	sbiw	r24, 0x00	; 0
    1ce0:	61 f0       	breq	.+24     	; 0x1cfa <GPIO_setupPortDirection+0x54>
    1ce2:	1e c0       	rjmp	.+60     	; 0x1d20 <GPIO_setupPortDirection+0x7a>
    1ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce8:	22 30       	cpi	r18, 0x02	; 2
    1cea:	31 05       	cpc	r19, r1
    1cec:	81 f0       	breq	.+32     	; 0x1d0e <GPIO_setupPortDirection+0x68>
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf2:	83 30       	cpi	r24, 0x03	; 3
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <GPIO_setupPortDirection+0x72>
    1cf8:	13 c0       	rjmp	.+38     	; 0x1d20 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cfa:	ea e3       	ldi	r30, 0x3A	; 58
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1d00:	80 83       	st	Z, r24
    1d02:	0e c0       	rjmp	.+28     	; 0x1d20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1d04:	e7 e3       	ldi	r30, 0x37	; 55
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	80 83       	st	Z, r24
    1d0c:	09 c0       	rjmp	.+18     	; 0x1d20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1d0e:	e4 e3       	ldi	r30, 0x34	; 52
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	80 83       	st	Z, r24
    1d16:	04 c0       	rjmp	.+8      	; 0x1d20 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1d18:	e1 e3       	ldi	r30, 0x31	; 49
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	0f 90       	pop	r0
    1d28:	cf 91       	pop	r28
    1d2a:	df 91       	pop	r29
    1d2c:	08 95       	ret

00001d2e <GPIO_writePort>:
 *         If the input port number is not correct, The function will not handle the request.
 * @param  Port Number, Port Value.
 * @return void.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d2e:	df 93       	push	r29
    1d30:	cf 93       	push	r28
    1d32:	00 d0       	rcall	.+0      	; 0x1d34 <GPIO_writePort+0x6>
    1d34:	00 d0       	rcall	.+0      	; 0x1d36 <GPIO_writePort+0x8>
    1d36:	cd b7       	in	r28, 0x3d	; 61
    1d38:	de b7       	in	r29, 0x3e	; 62
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	84 30       	cpi	r24, 0x04	; 4
    1d42:	90 f5       	brcc	.+100    	; 0x1da8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	3c 83       	std	Y+4, r19	; 0x04
    1d4c:	2b 83       	std	Y+3, r18	; 0x03
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	81 30       	cpi	r24, 0x01	; 1
    1d54:	91 05       	cpc	r25, r1
    1d56:	d1 f0       	breq	.+52     	; 0x1d8c <GPIO_writePort+0x5e>
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	22 30       	cpi	r18, 0x02	; 2
    1d5e:	31 05       	cpc	r19, r1
    1d60:	2c f4       	brge	.+10     	; 0x1d6c <GPIO_writePort+0x3e>
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	00 97       	sbiw	r24, 0x00	; 0
    1d68:	61 f0       	breq	.+24     	; 0x1d82 <GPIO_writePort+0x54>
    1d6a:	1e c0       	rjmp	.+60     	; 0x1da8 <GPIO_writePort+0x7a>
    1d6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d70:	22 30       	cpi	r18, 0x02	; 2
    1d72:	31 05       	cpc	r19, r1
    1d74:	81 f0       	breq	.+32     	; 0x1d96 <GPIO_writePort+0x68>
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	83 30       	cpi	r24, 0x03	; 3
    1d7c:	91 05       	cpc	r25, r1
    1d7e:	81 f0       	breq	.+32     	; 0x1da0 <GPIO_writePort+0x72>
    1d80:	13 c0       	rjmp	.+38     	; 0x1da8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d82:	eb e3       	ldi	r30, 0x3B	; 59
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	80 83       	st	Z, r24
    1d8a:	0e c0       	rjmp	.+28     	; 0x1da8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d8c:	e8 e3       	ldi	r30, 0x38	; 56
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	80 83       	st	Z, r24
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d96:	e5 e3       	ldi	r30, 0x35	; 53
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	80 83       	st	Z, r24
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1da0:	e2 e3       	ldi	r30, 0x32	; 50
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	cf 91       	pop	r28
    1db2:	df 91       	pop	r29
    1db4:	08 95       	ret

00001db6 <GPIO_readPort>:
 *         If the input port number is not correct, The function will return ZERO value.
 * @param  Port Number.
 * @return Port Value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <GPIO_readPort+0x6>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <GPIO_readPort+0x8>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
    1dc2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1dc4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc8:	84 30       	cpi	r24, 0x04	; 4
    1dca:	90 f5       	brcc	.+100    	; 0x1e30 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	28 2f       	mov	r18, r24
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	3c 83       	std	Y+4, r19	; 0x04
    1dd4:	2b 83       	std	Y+3, r18	; 0x03
    1dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dda:	81 30       	cpi	r24, 0x01	; 1
    1ddc:	91 05       	cpc	r25, r1
    1dde:	d1 f0       	breq	.+52     	; 0x1e14 <GPIO_readPort+0x5e>
    1de0:	2b 81       	ldd	r18, Y+3	; 0x03
    1de2:	3c 81       	ldd	r19, Y+4	; 0x04
    1de4:	22 30       	cpi	r18, 0x02	; 2
    1de6:	31 05       	cpc	r19, r1
    1de8:	2c f4       	brge	.+10     	; 0x1df4 <GPIO_readPort+0x3e>
    1dea:	8b 81       	ldd	r24, Y+3	; 0x03
    1dec:	9c 81       	ldd	r25, Y+4	; 0x04
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	61 f0       	breq	.+24     	; 0x1e0a <GPIO_readPort+0x54>
    1df2:	1e c0       	rjmp	.+60     	; 0x1e30 <GPIO_readPort+0x7a>
    1df4:	2b 81       	ldd	r18, Y+3	; 0x03
    1df6:	3c 81       	ldd	r19, Y+4	; 0x04
    1df8:	22 30       	cpi	r18, 0x02	; 2
    1dfa:	31 05       	cpc	r19, r1
    1dfc:	81 f0       	breq	.+32     	; 0x1e1e <GPIO_readPort+0x68>
    1dfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1e00:	9c 81       	ldd	r25, Y+4	; 0x04
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	91 05       	cpc	r25, r1
    1e06:	81 f0       	breq	.+32     	; 0x1e28 <GPIO_readPort+0x72>
    1e08:	13 c0       	rjmp	.+38     	; 0x1e30 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1e0a:	e9 e3       	ldi	r30, 0x39	; 57
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	0e c0       	rjmp	.+28     	; 0x1e30 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1e14:	e6 e3       	ldi	r30, 0x36	; 54
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	89 83       	std	Y+1, r24	; 0x01
    1e1c:	09 c0       	rjmp	.+18     	; 0x1e30 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e1e:	e3 e3       	ldi	r30, 0x33	; 51
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	04 c0       	rjmp	.+8      	; 0x1e30 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e28:	e0 e3       	ldi	r30, 0x30	; 48
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	80 81       	ld	r24, Z
    1e2e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e32:	0f 90       	pop	r0
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <PIR_init>:
 * @brief  Function to Initialize the PIR Sensor.
 * @param  void.
 * @return void.
 */
void PIR_init(void)
{
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PIR_PORTID, PIR_PINID, PIN_INPUT);
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	62 e0       	ldi	r22, 0x02	; 2
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_setupPinDirection>
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <PIR_getState>:
 * @brief  Function to get the PIR Sensor State.
 * @param  void.
 * @return Sensor State.
 */
uint8 PIR_getState(void)
{
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
	return GPIO_readPin(PIR_PORTID, PIR_PINID);
    1e60:	82 e0       	ldi	r24, 0x02	; 2
    1e62:	62 e0       	ldi	r22, 0x02	; 2
    1e64:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <GPIO_readPin>
}
    1e68:	cf 91       	pop	r28
    1e6a:	df 91       	pop	r29
    1e6c:	08 95       	ret

00001e6e <DcMotor_Init>:
 *         2. Stop at the DC-Motor at the beginning through the GPIO driver.
 * @param  void.
 * @return void.
 */
void DcMotor_Init(void)
{
    1e6e:	df 93       	push	r29
    1e70:	cf 93       	push	r28
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
	/* Set Motor direction control pins as output */
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, PIN_OUTPUT);
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	66 e0       	ldi	r22, 0x06	; 6
    1e7a:	41 e0       	ldi	r20, 0x01	; 1
    1e7c:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, PIN_OUTPUT);
    1e80:	83 e0       	ldi	r24, 0x03	; 3
    1e82:	67 e0       	ldi	r22, 0x07	; 7
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_setupPinDirection>

	/* Motor off initially */
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID,LOGIC_LOW);
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
    1e8c:	66 e0       	ldi	r22, 0x06	; 6
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1e94:	83 e0       	ldi	r24, 0x03	; 3
    1e96:	67 e0       	ldi	r22, 0x07	; 7
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
    1e9e:	cf 91       	pop	r28
    1ea0:	df 91       	pop	r29
    1ea2:	08 95       	ret

00001ea4 <DcMotor_Rotate>:
 *         required speed value.
 * @param  Motor State, Speed.
 * @return void.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <DcMotor_Rotate+0x6>
    1eaa:	cd b7       	in	r28, 0x3d	; 61
    1eac:	de b7       	in	r29, 0x3e	; 62
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	6a 83       	std	Y+2, r22	; 0x02
	/* Update state of the motor */
	if(state == MOTOR_STOP)
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	88 23       	and	r24, r24
    1eb6:	59 f4       	brne	.+22     	; 0x1ece <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	66 e0       	ldi	r22, 0x06	; 6
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	67 e0       	ldi	r22, 0x07	; 7
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
    1ecc:	1b c0       	rjmp	.+54     	; 0x1f04 <DcMotor_Rotate+0x60>
	}
	else if(state == MOTOR_CW)
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	81 30       	cpi	r24, 0x01	; 1
    1ed2:	59 f4       	brne	.+22     	; 0x1eea <DcMotor_Rotate+0x46>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_LOW);
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	66 e0       	ldi	r22, 0x06	; 6
    1ed8:	40 e0       	ldi	r20, 0x00	; 0
    1eda:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_HIGH);
    1ede:	83 e0       	ldi	r24, 0x03	; 3
    1ee0:	67 e0       	ldi	r22, 0x07	; 7
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
    1ee8:	0d c0       	rjmp	.+26     	; 0x1f04 <DcMotor_Rotate+0x60>
	}
	else if(state == MOTOR_ACW)
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	82 30       	cpi	r24, 0x02	; 2
    1eee:	51 f4       	brne	.+20     	; 0x1f04 <DcMotor_Rotate+0x60>
	{
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN1_PIN_ID, LOGIC_HIGH);
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	66 e0       	ldi	r22, 0x06	; 6
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
		GPIO_writePin(MOTOR_PORT_ID, MOTOR_IN2_PIN_ID, LOGIC_LOW);
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	67 e0       	ldi	r22, 0x07	; 7
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
	{
		/* Do Nothing */
	}

	/* Update Speed */
	PWM_Timer0_Init(speed);
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	0e 94 b2 0a 	call	0x1564	; 0x1564 <PWM_Timer0_Init>
}
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <EEPROM_writeByte>:
 * @brief  Function to Store Byte on the external EEPROM.
 * @param  Data Address, Data To Store.
 * @return Success State.
 */
uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	00 d0       	rcall	.+0      	; 0x1f1a <EEPROM_writeByte+0x6>
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <EEPROM_writeByte+0x8>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	9a 83       	std	Y+2, r25	; 0x02
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1f26:	0e 94 1f 0b 	call	0x163e	; 0x163e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1f2a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1f2e:	88 30       	cpi	r24, 0x08	; 8
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <EEPROM_writeByte+0x22>
        return ERROR;
    1f32:	1c 82       	std	Y+4, r1	; 0x04
    1f34:	28 c0       	rjmp	.+80     	; 0x1f86 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	80 70       	andi	r24, 0x00	; 0
    1f3c:	97 70       	andi	r25, 0x07	; 7
    1f3e:	88 0f       	add	r24, r24
    1f40:	89 2f       	mov	r24, r25
    1f42:	88 1f       	adc	r24, r24
    1f44:	99 0b       	sbc	r25, r25
    1f46:	91 95       	neg	r25
    1f48:	80 6a       	ori	r24, 0xA0	; 160
    1f4a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f4e:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1f52:	88 31       	cpi	r24, 0x18	; 24
    1f54:	11 f0       	breq	.+4      	; 0x1f5a <EEPROM_writeByte+0x46>
        return ERROR; 
    1f56:	1c 82       	std	Y+4, r1	; 0x04
    1f58:	16 c0       	rjmp	.+44     	; 0x1f86 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f60:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1f64:	88 32       	cpi	r24, 0x28	; 40
    1f66:	11 f0       	breq	.+4      	; 0x1f6c <EEPROM_writeByte+0x58>
        return ERROR;
    1f68:	1c 82       	std	Y+4, r1	; 0x04
    1f6a:	0d c0       	rjmp	.+26     	; 0x1f86 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f72:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1f76:	88 32       	cpi	r24, 0x28	; 40
    1f78:	11 f0       	breq	.+4      	; 0x1f7e <EEPROM_writeByte+0x6a>
        return ERROR;
    1f7a:	1c 82       	std	Y+4, r1	; 0x04
    1f7c:	04 c0       	rjmp	.+8      	; 0x1f86 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1f7e:	0e 94 2f 0b 	call	0x165e	; 0x165e <TWI_stop>
	
    return SUCCESS;
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	8c 83       	std	Y+4, r24	; 0x04
    1f86:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <EEPROM_readByte>:
 * @brief  Function to Load Byte from the external EEPROM.
 * @param  Data Address, Data To Load.
 * @return Success State.
 */
uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <EEPROM_readByte+0x6>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <EEPROM_readByte+0x8>
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	9a 83       	std	Y+2, r25	; 0x02
    1fa6:	89 83       	std	Y+1, r24	; 0x01
    1fa8:	7c 83       	std	Y+4, r23	; 0x04
    1faa:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1fac:	0e 94 1f 0b 	call	0x163e	; 0x163e <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1fb0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1fb4:	88 30       	cpi	r24, 0x08	; 8
    1fb6:	11 f0       	breq	.+4      	; 0x1fbc <EEPROM_readByte+0x26>
        return ERROR;
    1fb8:	1d 82       	std	Y+5, r1	; 0x05
    1fba:	44 c0       	rjmp	.+136    	; 0x2044 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1fbc:	89 81       	ldd	r24, Y+1	; 0x01
    1fbe:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc0:	80 70       	andi	r24, 0x00	; 0
    1fc2:	97 70       	andi	r25, 0x07	; 7
    1fc4:	88 0f       	add	r24, r24
    1fc6:	89 2f       	mov	r24, r25
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 0b       	sbc	r25, r25
    1fcc:	91 95       	neg	r25
    1fce:	80 6a       	ori	r24, 0xA0	; 160
    1fd0:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1fd4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1fd8:	88 31       	cpi	r24, 0x18	; 24
    1fda:	11 f0       	breq	.+4      	; 0x1fe0 <EEPROM_readByte+0x4a>
        return ERROR;
    1fdc:	1d 82       	std	Y+5, r1	; 0x05
    1fde:	32 c0       	rjmp	.+100    	; 0x2044 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1fe0:	89 81       	ldd	r24, Y+1	; 0x01
    1fe2:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1fe6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1fea:	88 32       	cpi	r24, 0x28	; 40
    1fec:	11 f0       	breq	.+4      	; 0x1ff2 <EEPROM_readByte+0x5c>
        return ERROR;
    1fee:	1d 82       	std	Y+5, r1	; 0x05
    1ff0:	29 c0       	rjmp	.+82     	; 0x2044 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1ff2:	0e 94 1f 0b 	call	0x163e	; 0x163e <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1ff6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    1ffa:	80 31       	cpi	r24, 0x10	; 16
    1ffc:	11 f0       	breq	.+4      	; 0x2002 <EEPROM_readByte+0x6c>
        return ERROR;
    1ffe:	1d 82       	std	Y+5, r1	; 0x05
    2000:	21 c0       	rjmp	.+66     	; 0x2044 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	80 70       	andi	r24, 0x00	; 0
    2008:	97 70       	andi	r25, 0x07	; 7
    200a:	88 0f       	add	r24, r24
    200c:	89 2f       	mov	r24, r25
    200e:	88 1f       	adc	r24, r24
    2010:	99 0b       	sbc	r25, r25
    2012:	91 95       	neg	r25
    2014:	81 6a       	ori	r24, 0xA1	; 161
    2016:	0e 94 3a 0b 	call	0x1674	; 0x1674 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    201a:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    201e:	80 34       	cpi	r24, 0x40	; 64
    2020:	11 f0       	breq	.+4      	; 0x2026 <EEPROM_readByte+0x90>
        return ERROR;
    2022:	1d 82       	std	Y+5, r1	; 0x05
    2024:	0f c0       	rjmp	.+30     	; 0x2044 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2026:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <TWI_readByteWithNACK>
    202a:	eb 81       	ldd	r30, Y+3	; 0x03
    202c:	fc 81       	ldd	r31, Y+4	; 0x04
    202e:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    2030:	0e 94 77 0b 	call	0x16ee	; 0x16ee <TWI_getStatus>
    2034:	88 35       	cpi	r24, 0x58	; 88
    2036:	11 f0       	breq	.+4      	; 0x203c <EEPROM_readByte+0xa6>
        return ERROR;
    2038:	1d 82       	std	Y+5, r1	; 0x05
    203a:	04 c0       	rjmp	.+8      	; 0x2044 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    203c:	0e 94 2f 0b 	call	0x165e	; 0x165e <TWI_stop>

    return SUCCESS;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2046:	0f 90       	pop	r0
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	cf 91       	pop	r28
    2052:	df 91       	pop	r29
    2054:	08 95       	ret

00002056 <Buzzer_init>:
 * @brief  Function to Initialize the Buzzer and turn it initially off.
 * @param  void.
 * @return void.
 */
void Buzzer_init(void)
{
    2056:	df 93       	push	r29
    2058:	cf 93       	push	r28
    205a:	cd b7       	in	r28, 0x3d	; 61
    205c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORTID, BUZZER_PINID, PIN_OUTPUT);
    205e:	82 e0       	ldi	r24, 0x02	; 2
    2060:	67 e0       	ldi	r22, 0x07	; 7
    2062:	41 e0       	ldi	r20, 0x01	; 1
    2064:	0e 94 86 0b 	call	0x170c	; 0x170c <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORTID, BUZZER_PINID, LOGIC_LOW);
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	67 e0       	ldi	r22, 0x07	; 7
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
    2072:	cf 91       	pop	r28
    2074:	df 91       	pop	r29
    2076:	08 95       	ret

00002078 <Buzzer_ON>:
 * @brief  Function to Turn Buzzer ON.
 * @param  void.
 * @return void.
 */
void Buzzer_ON(void)
{
    2078:	df 93       	push	r29
    207a:	cf 93       	push	r28
    207c:	cd b7       	in	r28, 0x3d	; 61
    207e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORTID, BUZZER_PINID, LOGIC_HIGH);
    2080:	82 e0       	ldi	r24, 0x02	; 2
    2082:	67 e0       	ldi	r22, 0x07	; 7
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
    208a:	cf 91       	pop	r28
    208c:	df 91       	pop	r29
    208e:	08 95       	ret

00002090 <Buzzer_OFF>:
 * @brief  Function to Turn Buzzer OFF.
 * @param  void.
 * @return void.
 */
void Buzzer_OFF(void)
{
    2090:	df 93       	push	r29
    2092:	cf 93       	push	r28
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORTID, BUZZER_PINID, LOGIC_LOW);
    2098:	82 e0       	ldi	r24, 0x02	; 2
    209a:	67 e0       	ldi	r22, 0x07	; 7
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <Buzzer_TOGGLE>:
 * @brief  Function to Toggle buzzer.
 * @param  void.
 * @return void.
 */
void Buzzer_TOGGLE(void)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORTID, BUZZER_PINID, LOGIC_TOGGLE);
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	67 e0       	ldi	r22, 0x07	; 7
    20b4:	42 e0       	ldi	r20, 0x02	; 2
    20b6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <GPIO_writePin>
}
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <Timer1_handler>:
boolean peopleIN = FALSE;
uint8 pass[10] = {0};
uint8 i = 0;

void Timer1_handler(void)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
	++counter;
    20c8:	80 91 82 01 	lds	r24, 0x0182
    20cc:	8f 5f       	subi	r24, 0xFF	; 255
    20ce:	80 93 82 01 	sts	0x0182, r24
}
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <main>:

int main()
{
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	cb 55       	subi	r28, 0x5B	; 91
    20e6:	d0 40       	sbci	r29, 0x00	; 0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
	/********** Initializations **********/
	/* UART Initialization */
	UART_ConfigType uart_cfg = {UART_8BIT_DATA, UART_Parity_OFF, UART_STOPBIT_1, 9600};
    20f2:	ce 01       	movw	r24, r28
    20f4:	c9 96       	adiw	r24, 0x39	; 57
    20f6:	2f 96       	adiw	r28, 0x0f	; 15
    20f8:	9f af       	std	Y+63, r25	; 0x3f
    20fa:	8e af       	std	Y+62, r24	; 0x3e
    20fc:	2f 97       	sbiw	r28, 0x0f	; 15
    20fe:	e5 e7       	ldi	r30, 0x75	; 117
    2100:	f1 e0       	ldi	r31, 0x01	; 1
    2102:	61 96       	adiw	r28, 0x11	; 17
    2104:	ff af       	std	Y+63, r31	; 0x3f
    2106:	ee af       	std	Y+62, r30	; 0x3e
    2108:	61 97       	sbiw	r28, 0x11	; 17
    210a:	f7 e0       	ldi	r31, 0x07	; 7
    210c:	62 96       	adiw	r28, 0x12	; 18
    210e:	ff af       	std	Y+63, r31	; 0x3f
    2110:	62 97       	sbiw	r28, 0x12	; 18
    2112:	61 96       	adiw	r28, 0x11	; 17
    2114:	ee ad       	ldd	r30, Y+62	; 0x3e
    2116:	ff ad       	ldd	r31, Y+63	; 0x3f
    2118:	61 97       	sbiw	r28, 0x11	; 17
    211a:	00 80       	ld	r0, Z
    211c:	61 96       	adiw	r28, 0x11	; 17
    211e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2120:	9f ad       	ldd	r25, Y+63	; 0x3f
    2122:	61 97       	sbiw	r28, 0x11	; 17
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	61 96       	adiw	r28, 0x11	; 17
    2128:	9f af       	std	Y+63, r25	; 0x3f
    212a:	8e af       	std	Y+62, r24	; 0x3e
    212c:	61 97       	sbiw	r28, 0x11	; 17
    212e:	2f 96       	adiw	r28, 0x0f	; 15
    2130:	ee ad       	ldd	r30, Y+62	; 0x3e
    2132:	ff ad       	ldd	r31, Y+63	; 0x3f
    2134:	2f 97       	sbiw	r28, 0x0f	; 15
    2136:	00 82       	st	Z, r0
    2138:	2f 96       	adiw	r28, 0x0f	; 15
    213a:	8e ad       	ldd	r24, Y+62	; 0x3e
    213c:	9f ad       	ldd	r25, Y+63	; 0x3f
    213e:	2f 97       	sbiw	r28, 0x0f	; 15
    2140:	01 96       	adiw	r24, 0x01	; 1
    2142:	2f 96       	adiw	r28, 0x0f	; 15
    2144:	9f af       	std	Y+63, r25	; 0x3f
    2146:	8e af       	std	Y+62, r24	; 0x3e
    2148:	2f 97       	sbiw	r28, 0x0f	; 15
    214a:	62 96       	adiw	r28, 0x12	; 18
    214c:	9f ad       	ldd	r25, Y+63	; 0x3f
    214e:	62 97       	sbiw	r28, 0x12	; 18
    2150:	91 50       	subi	r25, 0x01	; 1
    2152:	62 96       	adiw	r28, 0x12	; 18
    2154:	9f af       	std	Y+63, r25	; 0x3f
    2156:	62 97       	sbiw	r28, 0x12	; 18
    2158:	62 96       	adiw	r28, 0x12	; 18
    215a:	ef ad       	ldd	r30, Y+63	; 0x3f
    215c:	62 97       	sbiw	r28, 0x12	; 18
    215e:	ee 23       	and	r30, r30
    2160:	c1 f6       	brne	.-80     	; 0x2112 <main+0x3a>
	UART_init(&uart_cfg);
    2162:	ce 01       	movw	r24, r28
    2164:	c9 96       	adiw	r24, 0x39	; 57
    2166:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>

	/* BUZZER Initialization */
	Buzzer_init();
    216a:	0e 94 2b 10 	call	0x2056	; 0x2056 <Buzzer_init>

	/* I2C Initialization */
	TWI_ConfigType i2c_cfg = {0x01, 2, TWI_PRE_1};
    216e:	ce 01       	movw	r24, r28
    2170:	80 5c       	subi	r24, 0xC0	; 192
    2172:	9f 4f       	sbci	r25, 0xFF	; 255
    2174:	64 96       	adiw	r28, 0x14	; 20
    2176:	9f af       	std	Y+63, r25	; 0x3f
    2178:	8e af       	std	Y+62, r24	; 0x3e
    217a:	64 97       	sbiw	r28, 0x14	; 20
    217c:	ef e6       	ldi	r30, 0x6F	; 111
    217e:	f1 e0       	ldi	r31, 0x01	; 1
    2180:	66 96       	adiw	r28, 0x16	; 22
    2182:	ff af       	std	Y+63, r31	; 0x3f
    2184:	ee af       	std	Y+62, r30	; 0x3e
    2186:	66 97       	sbiw	r28, 0x16	; 22
    2188:	f6 e0       	ldi	r31, 0x06	; 6
    218a:	67 96       	adiw	r28, 0x17	; 23
    218c:	ff af       	std	Y+63, r31	; 0x3f
    218e:	67 97       	sbiw	r28, 0x17	; 23
    2190:	66 96       	adiw	r28, 0x16	; 22
    2192:	ee ad       	ldd	r30, Y+62	; 0x3e
    2194:	ff ad       	ldd	r31, Y+63	; 0x3f
    2196:	66 97       	sbiw	r28, 0x16	; 22
    2198:	00 80       	ld	r0, Z
    219a:	66 96       	adiw	r28, 0x16	; 22
    219c:	8e ad       	ldd	r24, Y+62	; 0x3e
    219e:	9f ad       	ldd	r25, Y+63	; 0x3f
    21a0:	66 97       	sbiw	r28, 0x16	; 22
    21a2:	01 96       	adiw	r24, 0x01	; 1
    21a4:	66 96       	adiw	r28, 0x16	; 22
    21a6:	9f af       	std	Y+63, r25	; 0x3f
    21a8:	8e af       	std	Y+62, r24	; 0x3e
    21aa:	66 97       	sbiw	r28, 0x16	; 22
    21ac:	64 96       	adiw	r28, 0x14	; 20
    21ae:	ee ad       	ldd	r30, Y+62	; 0x3e
    21b0:	ff ad       	ldd	r31, Y+63	; 0x3f
    21b2:	64 97       	sbiw	r28, 0x14	; 20
    21b4:	00 82       	st	Z, r0
    21b6:	64 96       	adiw	r28, 0x14	; 20
    21b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    21ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    21bc:	64 97       	sbiw	r28, 0x14	; 20
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	64 96       	adiw	r28, 0x14	; 20
    21c2:	9f af       	std	Y+63, r25	; 0x3f
    21c4:	8e af       	std	Y+62, r24	; 0x3e
    21c6:	64 97       	sbiw	r28, 0x14	; 20
    21c8:	67 96       	adiw	r28, 0x17	; 23
    21ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    21cc:	67 97       	sbiw	r28, 0x17	; 23
    21ce:	91 50       	subi	r25, 0x01	; 1
    21d0:	67 96       	adiw	r28, 0x17	; 23
    21d2:	9f af       	std	Y+63, r25	; 0x3f
    21d4:	67 97       	sbiw	r28, 0x17	; 23
    21d6:	67 96       	adiw	r28, 0x17	; 23
    21d8:	ef ad       	ldd	r30, Y+63	; 0x3f
    21da:	67 97       	sbiw	r28, 0x17	; 23
    21dc:	ee 23       	and	r30, r30
    21de:	c1 f6       	brne	.-80     	; 0x2190 <main+0xb8>
	TWI_init(&i2c_cfg);
    21e0:	ce 01       	movw	r24, r28
    21e2:	80 5c       	subi	r24, 0xC0	; 192
    21e4:	9f 4f       	sbci	r25, 0xFF	; 255
    21e6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <TWI_init>

	/* Motor Initialization */
	DcMotor_Init();
    21ea:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <DcMotor_Init>

	/* PIR Initialization */
	PIR_init();
    21ee:	0e 94 20 0f 	call	0x1e40	; 0x1e40 <PIR_init>

	/* Creating timer 1 object to count time */
	sei();
    21f2:	78 94       	sei
	Timer_ConfigType time1 = {0, 31250, TIMER1_ID, TIMER_F_CPU_256, TIMER_CTC};
    21f4:	ce 01       	movw	r24, r28
    21f6:	8a 5b       	subi	r24, 0xBA	; 186
    21f8:	9f 4f       	sbci	r25, 0xFF	; 255
    21fa:	69 96       	adiw	r28, 0x19	; 25
    21fc:	9f af       	std	Y+63, r25	; 0x3f
    21fe:	8e af       	std	Y+62, r24	; 0x3e
    2200:	69 97       	sbiw	r28, 0x19	; 25
    2202:	88 e6       	ldi	r24, 0x68	; 104
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	6b 96       	adiw	r28, 0x1b	; 27
    2208:	9f af       	std	Y+63, r25	; 0x3f
    220a:	8e af       	std	Y+62, r24	; 0x3e
    220c:	6b 97       	sbiw	r28, 0x1b	; 27
    220e:	97 e0       	ldi	r25, 0x07	; 7
    2210:	6c 96       	adiw	r28, 0x1c	; 28
    2212:	9f af       	std	Y+63, r25	; 0x3f
    2214:	6c 97       	sbiw	r28, 0x1c	; 28
    2216:	6b 96       	adiw	r28, 0x1b	; 27
    2218:	ee ad       	ldd	r30, Y+62	; 0x3e
    221a:	ff ad       	ldd	r31, Y+63	; 0x3f
    221c:	6b 97       	sbiw	r28, 0x1b	; 27
    221e:	00 80       	ld	r0, Z
    2220:	6b 96       	adiw	r28, 0x1b	; 27
    2222:	8e ad       	ldd	r24, Y+62	; 0x3e
    2224:	9f ad       	ldd	r25, Y+63	; 0x3f
    2226:	6b 97       	sbiw	r28, 0x1b	; 27
    2228:	01 96       	adiw	r24, 0x01	; 1
    222a:	6b 96       	adiw	r28, 0x1b	; 27
    222c:	9f af       	std	Y+63, r25	; 0x3f
    222e:	8e af       	std	Y+62, r24	; 0x3e
    2230:	6b 97       	sbiw	r28, 0x1b	; 27
    2232:	69 96       	adiw	r28, 0x19	; 25
    2234:	ee ad       	ldd	r30, Y+62	; 0x3e
    2236:	ff ad       	ldd	r31, Y+63	; 0x3f
    2238:	69 97       	sbiw	r28, 0x19	; 25
    223a:	00 82       	st	Z, r0
    223c:	69 96       	adiw	r28, 0x19	; 25
    223e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2240:	9f ad       	ldd	r25, Y+63	; 0x3f
    2242:	69 97       	sbiw	r28, 0x19	; 25
    2244:	01 96       	adiw	r24, 0x01	; 1
    2246:	69 96       	adiw	r28, 0x19	; 25
    2248:	9f af       	std	Y+63, r25	; 0x3f
    224a:	8e af       	std	Y+62, r24	; 0x3e
    224c:	69 97       	sbiw	r28, 0x19	; 25
    224e:	6c 96       	adiw	r28, 0x1c	; 28
    2250:	9f ad       	ldd	r25, Y+63	; 0x3f
    2252:	6c 97       	sbiw	r28, 0x1c	; 28
    2254:	91 50       	subi	r25, 0x01	; 1
    2256:	6c 96       	adiw	r28, 0x1c	; 28
    2258:	9f af       	std	Y+63, r25	; 0x3f
    225a:	6c 97       	sbiw	r28, 0x1c	; 28
    225c:	6c 96       	adiw	r28, 0x1c	; 28
    225e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2260:	6c 97       	sbiw	r28, 0x1c	; 28
    2262:	ee 23       	and	r30, r30
    2264:	c1 f6       	brne	.-80     	; 0x2216 <main+0x13e>
	Timer_init(&time1);
    2266:	ce 01       	movw	r24, r28
    2268:	8a 5b       	subi	r24, 0xBA	; 186
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	0e 94 44 09 	call	0x1288	; 0x1288 <Timer_init>
	Timer_setCallBack(Timer1_handler, TIMER1_ID);
    2270:	80 e6       	ldi	r24, 0x60	; 96
    2272:	90 e1       	ldi	r25, 0x10	; 16
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <Timer_setCallBack>

	/************** Program **************/
	for(;;)
	{
		PROG_status = UART_receiveByte();
    227a:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    227e:	80 93 83 01 	sts	0x0183, r24
		if(PROG_status == PASS_LOAD)
    2282:	80 91 83 01 	lds	r24, 0x0183
    2286:	80 3a       	cpi	r24, 0xA0	; 160
    2288:	09 f0       	breq	.+2      	; 0x228c <main+0x1b4>
    228a:	d5 c0       	rjmp	.+426    	; 0x2436 <main+0x35e>
		{
			/* Start Receiving New password */
			for(i = 0; i < 10; ++i)
    228c:	10 92 90 01 	sts	0x0190, r1
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <main+0x1d8>
			{
				pass[i] = UART_receiveByte();
    2292:	80 91 90 01 	lds	r24, 0x0190
    2296:	08 2f       	mov	r16, r24
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    229e:	f8 01       	movw	r30, r16
    22a0:	ea 57       	subi	r30, 0x7A	; 122
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	80 83       	st	Z, r24
	{
		PROG_status = UART_receiveByte();
		if(PROG_status == PASS_LOAD)
		{
			/* Start Receiving New password */
			for(i = 0; i < 10; ++i)
    22a6:	80 91 90 01 	lds	r24, 0x0190
    22aa:	8f 5f       	subi	r24, 0xFF	; 255
    22ac:	80 93 90 01 	sts	0x0190, r24
    22b0:	80 91 90 01 	lds	r24, 0x0190
    22b4:	8a 30       	cpi	r24, 0x0A	; 10
    22b6:	68 f3       	brcs	.-38     	; 0x2292 <main+0x1ba>
			{
				pass[i] = UART_receiveByte();
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    22b8:	10 92 90 01 	sts	0x0190, r1
    22bc:	1c c0       	rjmp	.+56     	; 0x22f6 <main+0x21e>
			{
				if(pass[i] != pass[i + 5])
    22be:	80 91 90 01 	lds	r24, 0x0190
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	fc 01       	movw	r30, r24
    22c8:	ea 57       	subi	r30, 0x7A	; 122
    22ca:	fe 4f       	sbci	r31, 0xFE	; 254
    22cc:	20 81       	ld	r18, Z
    22ce:	80 91 90 01 	lds	r24, 0x0190
    22d2:	88 2f       	mov	r24, r24
    22d4:	90 e0       	ldi	r25, 0x00	; 0
    22d6:	05 96       	adiw	r24, 0x05	; 5
    22d8:	fc 01       	movw	r30, r24
    22da:	ea 57       	subi	r30, 0x7A	; 122
    22dc:	fe 4f       	sbci	r31, 0xFE	; 254
    22de:	80 81       	ld	r24, Z
    22e0:	28 17       	cp	r18, r24
    22e2:	21 f0       	breq	.+8      	; 0x22ec <main+0x214>
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
    22e4:	80 ef       	ldi	r24, 0xF0	; 240
    22e6:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <main+0x226>
			{
				pass[i] = UART_receiveByte();
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    22ec:	80 91 90 01 	lds	r24, 0x0190
    22f0:	8f 5f       	subi	r24, 0xFF	; 255
    22f2:	80 93 90 01 	sts	0x0190, r24
    22f6:	80 91 90 01 	lds	r24, 0x0190
    22fa:	85 30       	cpi	r24, 0x05	; 5
    22fc:	00 f3       	brcs	.-64     	; 0x22be <main+0x1e6>
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
					break;
				}
			}
			if(i == 5)
    22fe:	80 91 90 01 	lds	r24, 0x0190
    2302:	85 30       	cpi	r24, 0x05	; 5
    2304:	09 f0       	breq	.+2      	; 0x2308 <main+0x230>
    2306:	b9 cf       	rjmp	.-142    	; 0x227a <main+0x1a2>
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);
    2308:	80 ec       	ldi	r24, 0xC0	; 192
    230a:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>

				/* Storing new pass to the External EEPROM */
				for(i = 0; i < 5; ++i)
    230e:	10 92 90 01 	sts	0x0190, r1
    2312:	8b c0       	rjmp	.+278    	; 0x242a <main+0x352>
				{
					status = EEPROM_writeByte(start_address + i, pass[i]);
    2314:	80 91 90 01 	lds	r24, 0x0190
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	05 96       	adiw	r24, 0x05	; 5
    231e:	ac 01       	movw	r20, r24
    2320:	80 91 90 01 	lds	r24, 0x0190
    2324:	88 2f       	mov	r24, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	fc 01       	movw	r30, r24
    232a:	ea 57       	subi	r30, 0x7A	; 122
    232c:	fe 4f       	sbci	r31, 0xFE	; 254
    232e:	20 81       	ld	r18, Z
    2330:	ca 01       	movw	r24, r20
    2332:	62 2f       	mov	r22, r18
    2334:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <EEPROM_writeByte>
    2338:	80 93 84 01 	sts	0x0184, r24
    233c:	80 e0       	ldi	r24, 0x00	; 0
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e2       	ldi	r26, 0x20	; 32
    2342:	b1 e4       	ldi	r27, 0x41	; 65
    2344:	8d ab       	std	Y+53, r24	; 0x35
    2346:	9e ab       	std	Y+54, r25	; 0x36
    2348:	af ab       	std	Y+55, r26	; 0x37
    234a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    234c:	6d a9       	ldd	r22, Y+53	; 0x35
    234e:	7e a9       	ldd	r23, Y+54	; 0x36
    2350:	8f a9       	ldd	r24, Y+55	; 0x37
    2352:	98 ad       	ldd	r25, Y+56	; 0x38
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4a ef       	ldi	r20, 0xFA	; 250
    235a:	54 e4       	ldi	r21, 0x44	; 68
    235c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	89 ab       	std	Y+49, r24	; 0x31
    2366:	9a ab       	std	Y+50, r25	; 0x32
    2368:	ab ab       	std	Y+51, r26	; 0x33
    236a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    236c:	69 a9       	ldd	r22, Y+49	; 0x31
    236e:	7a a9       	ldd	r23, Y+50	; 0x32
    2370:	8b a9       	ldd	r24, Y+51	; 0x33
    2372:	9c a9       	ldd	r25, Y+52	; 0x34
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e8       	ldi	r20, 0x80	; 128
    237a:	5f e3       	ldi	r21, 0x3F	; 63
    237c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2380:	88 23       	and	r24, r24
    2382:	2c f4       	brge	.+10     	; 0x238e <main+0x2b6>
		__ticks = 1;
    2384:	81 e0       	ldi	r24, 0x01	; 1
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	98 ab       	std	Y+48, r25	; 0x30
    238a:	8f a7       	std	Y+47, r24	; 0x2f
    238c:	3f c0       	rjmp	.+126    	; 0x240c <main+0x334>
	else if (__tmp > 65535)
    238e:	69 a9       	ldd	r22, Y+49	; 0x31
    2390:	7a a9       	ldd	r23, Y+50	; 0x32
    2392:	8b a9       	ldd	r24, Y+51	; 0x33
    2394:	9c a9       	ldd	r25, Y+52	; 0x34
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	3f ef       	ldi	r19, 0xFF	; 255
    239a:	4f e7       	ldi	r20, 0x7F	; 127
    239c:	57 e4       	ldi	r21, 0x47	; 71
    239e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a2:	18 16       	cp	r1, r24
    23a4:	4c f5       	brge	.+82     	; 0x23f8 <main+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a6:	6d a9       	ldd	r22, Y+53	; 0x35
    23a8:	7e a9       	ldd	r23, Y+54	; 0x36
    23aa:	8f a9       	ldd	r24, Y+55	; 0x37
    23ac:	98 ad       	ldd	r25, Y+56	; 0x38
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	bc 01       	movw	r22, r24
    23c0:	cd 01       	movw	r24, r26
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	98 ab       	std	Y+48, r25	; 0x30
    23cc:	8f a7       	std	Y+47, r24	; 0x2f
    23ce:	0f c0       	rjmp	.+30     	; 0x23ee <main+0x316>
    23d0:	88 ec       	ldi	r24, 0xC8	; 200
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9e a7       	std	Y+46, r25	; 0x2e
    23d6:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23d8:	8d a5       	ldd	r24, Y+45	; 0x2d
    23da:	9e a5       	ldd	r25, Y+46	; 0x2e
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	f1 f7       	brne	.-4      	; 0x23dc <main+0x304>
    23e0:	9e a7       	std	Y+46, r25	; 0x2e
    23e2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e6:	98 a9       	ldd	r25, Y+48	; 0x30
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	98 ab       	std	Y+48, r25	; 0x30
    23ec:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f0:	98 a9       	ldd	r25, Y+48	; 0x30
    23f2:	00 97       	sbiw	r24, 0x00	; 0
    23f4:	69 f7       	brne	.-38     	; 0x23d0 <main+0x2f8>
    23f6:	14 c0       	rjmp	.+40     	; 0x2420 <main+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f8:	69 a9       	ldd	r22, Y+49	; 0x31
    23fa:	7a a9       	ldd	r23, Y+50	; 0x32
    23fc:	8b a9       	ldd	r24, Y+51	; 0x33
    23fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	98 ab       	std	Y+48, r25	; 0x30
    240a:	8f a7       	std	Y+47, r24	; 0x2f
    240c:	8f a5       	ldd	r24, Y+47	; 0x2f
    240e:	98 a9       	ldd	r25, Y+48	; 0x30
    2410:	9c a7       	std	Y+44, r25	; 0x2c
    2412:	8b a7       	std	Y+43, r24	; 0x2b
    2414:	8b a5       	ldd	r24, Y+43	; 0x2b
    2416:	9c a5       	ldd	r25, Y+44	; 0x2c
    2418:	01 97       	sbiw	r24, 0x01	; 1
    241a:	f1 f7       	brne	.-4      	; 0x2418 <main+0x340>
    241c:	9c a7       	std	Y+44, r25	; 0x2c
    241e:	8b a7       	std	Y+43, r24	; 0x2b
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);

				/* Storing new pass to the External EEPROM */
				for(i = 0; i < 5; ++i)
    2420:	80 91 90 01 	lds	r24, 0x0190
    2424:	8f 5f       	subi	r24, 0xFF	; 255
    2426:	80 93 90 01 	sts	0x0190, r24
    242a:	80 91 90 01 	lds	r24, 0x0190
    242e:	85 30       	cpi	r24, 0x05	; 5
    2430:	08 f4       	brcc	.+2      	; 0x2434 <main+0x35c>
    2432:	70 cf       	rjmp	.-288    	; 0x2314 <main+0x23c>
    2434:	22 cf       	rjmp	.-444    	; 0x227a <main+0x1a2>
					status = EEPROM_writeByte(start_address + i, pass[i]);
					_delay_ms(10);
				}
			}
		}
		else if(PROG_status == PASS_IN)
    2436:	80 91 83 01 	lds	r24, 0x0183
    243a:	81 3f       	cpi	r24, 0xF1	; 241
    243c:	09 f0       	breq	.+2      	; 0x2440 <main+0x368>
    243e:	fd c0       	rjmp	.+506    	; 0x263a <main+0x562>
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
    2440:	10 92 90 01 	sts	0x0190, r1
    2444:	0f c0       	rjmp	.+30     	; 0x2464 <main+0x38c>
			{
				pass[i] = UART_receiveByte();
    2446:	80 91 90 01 	lds	r24, 0x0190
    244a:	08 2f       	mov	r16, r24
    244c:	10 e0       	ldi	r17, 0x00	; 0
    244e:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    2452:	f8 01       	movw	r30, r16
    2454:	ea 57       	subi	r30, 0x7A	; 122
    2456:	fe 4f       	sbci	r31, 0xFE	; 254
    2458:	80 83       	st	Z, r24
			}
		}
		else if(PROG_status == PASS_IN)
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
    245a:	80 91 90 01 	lds	r24, 0x0190
    245e:	8f 5f       	subi	r24, 0xFF	; 255
    2460:	80 93 90 01 	sts	0x0190, r24
    2464:	80 91 90 01 	lds	r24, 0x0190
    2468:	85 30       	cpi	r24, 0x05	; 5
    246a:	68 f3       	brcs	.-38     	; 0x2446 <main+0x36e>
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
    246c:	85 e0       	ldi	r24, 0x05	; 5
    246e:	80 93 90 01 	sts	0x0190, r24
    2472:	88 c0       	rjmp	.+272    	; 0x2584 <main+0x4ac>
			{
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
    2474:	80 91 90 01 	lds	r24, 0x0190
    2478:	48 2f       	mov	r20, r24
    247a:	50 e0       	ldi	r21, 0x00	; 0
    247c:	80 91 90 01 	lds	r24, 0x0190
    2480:	88 2f       	mov	r24, r24
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 01       	movw	r18, r24
    2486:	2a 57       	subi	r18, 0x7A	; 122
    2488:	3e 4f       	sbci	r19, 0xFE	; 254
    248a:	ca 01       	movw	r24, r20
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <EEPROM_readByte>
    2492:	80 93 84 01 	sts	0x0184, r24
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e2       	ldi	r26, 0x20	; 32
    249c:	b1 e4       	ldi	r27, 0x41	; 65
    249e:	8f a3       	std	Y+39, r24	; 0x27
    24a0:	98 a7       	std	Y+40, r25	; 0x28
    24a2:	a9 a7       	std	Y+41, r26	; 0x29
    24a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6f a1       	ldd	r22, Y+39	; 0x27
    24a8:	78 a5       	ldd	r23, Y+40	; 0x28
    24aa:	89 a5       	ldd	r24, Y+41	; 0x29
    24ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a ef       	ldi	r20, 0xFA	; 250
    24b4:	54 e4       	ldi	r21, 0x44	; 68
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8b a3       	std	Y+35, r24	; 0x23
    24c0:	9c a3       	std	Y+36, r25	; 0x24
    24c2:	ad a3       	std	Y+37, r26	; 0x25
    24c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c6:	6b a1       	ldd	r22, Y+35	; 0x23
    24c8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ca:	8d a1       	ldd	r24, Y+37	; 0x25
    24cc:	9e a1       	ldd	r25, Y+38	; 0x26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <main+0x410>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9a a3       	std	Y+34, r25	; 0x22
    24e4:	89 a3       	std	Y+33, r24	; 0x21
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <main+0x48e>
	else if (__tmp > 65535)
    24e8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ea:	7c a1       	ldd	r23, Y+36	; 0x24
    24ec:	8d a1       	ldd	r24, Y+37	; 0x25
    24ee:	9e a1       	ldd	r25, Y+38	; 0x26
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <main+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6f a1       	ldd	r22, Y+39	; 0x27
    2502:	78 a5       	ldd	r23, Y+40	; 0x28
    2504:	89 a5       	ldd	r24, Y+41	; 0x29
    2506:	9a a5       	ldd	r25, Y+42	; 0x2a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	89 a3       	std	Y+33, r24	; 0x21
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <main+0x470>
    252a:	88 ec       	ldi	r24, 0xC8	; 200
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	98 a3       	std	Y+32, r25	; 0x20
    2530:	8f 8f       	std	Y+31, r24	; 0x1f
    2532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2534:	98 a1       	ldd	r25, Y+32	; 0x20
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <main+0x45e>
    253a:	98 a3       	std	Y+32, r25	; 0x20
    253c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	89 a1       	ldd	r24, Y+33	; 0x21
    2540:	9a a1       	ldd	r25, Y+34	; 0x22
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <main+0x452>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <main+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	9e 8f       	std	Y+30, r25	; 0x1e
    256c:	8d 8f       	std	Y+29, r24	; 0x1d
    256e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2570:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <main+0x49a>
    2576:	9e 8f       	std	Y+30, r25	; 0x1e
    2578:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
    257a:	80 91 90 01 	lds	r24, 0x0190
    257e:	8f 5f       	subi	r24, 0xFF	; 255
    2580:	80 93 90 01 	sts	0x0190, r24
    2584:	80 91 90 01 	lds	r24, 0x0190
    2588:	8a 30       	cpi	r24, 0x0A	; 10
    258a:	08 f4       	brcc	.+2      	; 0x258e <main+0x4b6>
    258c:	73 cf       	rjmp	.-282    	; 0x2474 <main+0x39c>
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    258e:	10 92 90 01 	sts	0x0190, r1
    2592:	1c c0       	rjmp	.+56     	; 0x25cc <main+0x4f4>
			{
				if(pass[i] != pass[i + 5])
    2594:	80 91 90 01 	lds	r24, 0x0190
    2598:	88 2f       	mov	r24, r24
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	fc 01       	movw	r30, r24
    259e:	ea 57       	subi	r30, 0x7A	; 122
    25a0:	fe 4f       	sbci	r31, 0xFE	; 254
    25a2:	20 81       	ld	r18, Z
    25a4:	80 91 90 01 	lds	r24, 0x0190
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	05 96       	adiw	r24, 0x05	; 5
    25ae:	fc 01       	movw	r30, r24
    25b0:	ea 57       	subi	r30, 0x7A	; 122
    25b2:	fe 4f       	sbci	r31, 0xFE	; 254
    25b4:	80 81       	ld	r24, Z
    25b6:	28 17       	cp	r18, r24
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <main+0x4ea>
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
    25ba:	80 ef       	ldi	r24, 0xF0	; 240
    25bc:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
    25c0:	09 c0       	rjmp	.+18     	; 0x25d4 <main+0x4fc>
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    25c2:	80 91 90 01 	lds	r24, 0x0190
    25c6:	8f 5f       	subi	r24, 0xFF	; 255
    25c8:	80 93 90 01 	sts	0x0190, r24
    25cc:	80 91 90 01 	lds	r24, 0x0190
    25d0:	85 30       	cpi	r24, 0x05	; 5
    25d2:	00 f3       	brcs	.-64     	; 0x2594 <main+0x4bc>
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
					break;
				}
			}
			if(i == 5)
    25d4:	80 91 90 01 	lds	r24, 0x0190
    25d8:	85 30       	cpi	r24, 0x05	; 5
    25da:	09 f0       	breq	.+2      	; 0x25de <main+0x506>
    25dc:	4e ce       	rjmp	.-868    	; 0x227a <main+0x1a2>
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);
    25de:	80 ec       	ldi	r24, 0xC0	; 192
    25e0:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>

				/* Opening Door for 15 seconds */
				DcMotor_Rotate(MOTOR_CW, 100);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	64 e6       	ldi	r22, 0x64	; 100
    25e8:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DcMotor_Rotate>
				counter = 0;
    25ec:	10 92 82 01 	sts	0x0182, r1
				while(counter < 15);
    25f0:	80 91 82 01 	lds	r24, 0x0182
    25f4:	8f 30       	cpi	r24, 0x0F	; 15
    25f6:	e0 f3       	brcs	.-8      	; 0x25f0 <main+0x518>

				/* Stop the Motor */
				DcMotor_Rotate(MOTOR_STOP, 0);
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	60 e0       	ldi	r22, 0x00	; 0
    25fc:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DcMotor_Rotate>

				/* Checking if people still entering the door */
				do{
					peopleIN = PIR_getState();
    2600:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <PIR_getState>
    2604:	80 93 85 01 	sts	0x0185, r24
					UART_sendByte(PEOPLE_IN);
    2608:	80 eb       	ldi	r24, 0xB0	; 176
    260a:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
				}while(peopleIN);
    260e:	80 91 85 01 	lds	r24, 0x0185
    2612:	88 23       	and	r24, r24
    2614:	a9 f7       	brne	.-22     	; 0x2600 <main+0x528>

				/* Closing door for 15 seconds */
				UART_sendByte(PEOPLE_NO);
    2616:	80 ed       	ldi	r24, 0xD0	; 208
    2618:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
				counter = 0;
    261c:	10 92 82 01 	sts	0x0182, r1
				DcMotor_Rotate(MOTOR_ACW, 100);
    2620:	82 e0       	ldi	r24, 0x02	; 2
    2622:	64 e6       	ldi	r22, 0x64	; 100
    2624:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DcMotor_Rotate>
				while(counter < 15);
    2628:	80 91 82 01 	lds	r24, 0x0182
    262c:	8f 30       	cpi	r24, 0x0F	; 15
    262e:	e0 f3       	brcs	.-8      	; 0x2628 <main+0x550>
				DcMotor_Rotate(MOTOR_STOP, 0);
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <DcMotor_Rotate>
    2638:	20 ce       	rjmp	.-960    	; 0x227a <main+0x1a2>
			}
		}
		else if(PROG_status == PASS_UPDATE)
    263a:	80 91 83 01 	lds	r24, 0x0183
    263e:	80 3e       	cpi	r24, 0xE0	; 224
    2640:	09 f0       	breq	.+2      	; 0x2644 <main+0x56c>
    2642:	a7 c1       	rjmp	.+846    	; 0x2992 <main+0x8ba>
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
    2644:	10 92 90 01 	sts	0x0190, r1
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <main+0x590>
			{
				pass[i] = UART_receiveByte();
    264a:	80 91 90 01 	lds	r24, 0x0190
    264e:	08 2f       	mov	r16, r24
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    2656:	f8 01       	movw	r30, r16
    2658:	ea 57       	subi	r30, 0x7A	; 122
    265a:	fe 4f       	sbci	r31, 0xFE	; 254
    265c:	80 83       	st	Z, r24
			}
		}
		else if(PROG_status == PASS_UPDATE)
		{
			/* Receiving password Entered by the user */
			for(i = 0; i < 5; ++i)
    265e:	80 91 90 01 	lds	r24, 0x0190
    2662:	8f 5f       	subi	r24, 0xFF	; 255
    2664:	80 93 90 01 	sts	0x0190, r24
    2668:	80 91 90 01 	lds	r24, 0x0190
    266c:	85 30       	cpi	r24, 0x05	; 5
    266e:	68 f3       	brcs	.-38     	; 0x264a <main+0x572>
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
    2670:	85 e0       	ldi	r24, 0x05	; 5
    2672:	80 93 90 01 	sts	0x0190, r24
    2676:	88 c0       	rjmp	.+272    	; 0x2788 <main+0x6b0>
			{
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
    2678:	80 91 90 01 	lds	r24, 0x0190
    267c:	48 2f       	mov	r20, r24
    267e:	50 e0       	ldi	r21, 0x00	; 0
    2680:	80 91 90 01 	lds	r24, 0x0190
    2684:	88 2f       	mov	r24, r24
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	9c 01       	movw	r18, r24
    268a:	2a 57       	subi	r18, 0x7A	; 122
    268c:	3e 4f       	sbci	r19, 0xFE	; 254
    268e:	ca 01       	movw	r24, r20
    2690:	b9 01       	movw	r22, r18
    2692:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <EEPROM_readByte>
    2696:	80 93 84 01 	sts	0x0184, r24
    269a:	80 e0       	ldi	r24, 0x00	; 0
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	a0 e2       	ldi	r26, 0x20	; 32
    26a0:	b1 e4       	ldi	r27, 0x41	; 65
    26a2:	89 8f       	std	Y+25, r24	; 0x19
    26a4:	9a 8f       	std	Y+26, r25	; 0x1a
    26a6:	ab 8f       	std	Y+27, r26	; 0x1b
    26a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26aa:	69 8d       	ldd	r22, Y+25	; 0x19
    26ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	4a ef       	ldi	r20, 0xFA	; 250
    26b8:	54 e4       	ldi	r21, 0x44	; 68
    26ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	8d 8b       	std	Y+21, r24	; 0x15
    26c4:	9e 8b       	std	Y+22, r25	; 0x16
    26c6:	af 8b       	std	Y+23, r26	; 0x17
    26c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26ca:	6d 89       	ldd	r22, Y+21	; 0x15
    26cc:	7e 89       	ldd	r23, Y+22	; 0x16
    26ce:	8f 89       	ldd	r24, Y+23	; 0x17
    26d0:	98 8d       	ldd	r25, Y+24	; 0x18
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e8       	ldi	r20, 0x80	; 128
    26d8:	5f e3       	ldi	r21, 0x3F	; 63
    26da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26de:	88 23       	and	r24, r24
    26e0:	2c f4       	brge	.+10     	; 0x26ec <main+0x614>
		__ticks = 1;
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	9c 8b       	std	Y+20, r25	; 0x14
    26e8:	8b 8b       	std	Y+19, r24	; 0x13
    26ea:	3f c0       	rjmp	.+126    	; 0x276a <main+0x692>
	else if (__tmp > 65535)
    26ec:	6d 89       	ldd	r22, Y+21	; 0x15
    26ee:	7e 89       	ldd	r23, Y+22	; 0x16
    26f0:	8f 89       	ldd	r24, Y+23	; 0x17
    26f2:	98 8d       	ldd	r25, Y+24	; 0x18
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	3f ef       	ldi	r19, 0xFF	; 255
    26f8:	4f e7       	ldi	r20, 0x7F	; 127
    26fa:	57 e4       	ldi	r21, 0x47	; 71
    26fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2700:	18 16       	cp	r1, r24
    2702:	4c f5       	brge	.+82     	; 0x2756 <main+0x67e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2704:	69 8d       	ldd	r22, Y+25	; 0x19
    2706:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    270a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e2       	ldi	r20, 0x20	; 32
    2712:	51 e4       	ldi	r21, 0x41	; 65
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	bc 01       	movw	r22, r24
    271e:	cd 01       	movw	r24, r26
    2720:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	9c 8b       	std	Y+20, r25	; 0x14
    272a:	8b 8b       	std	Y+19, r24	; 0x13
    272c:	0f c0       	rjmp	.+30     	; 0x274c <main+0x674>
    272e:	88 ec       	ldi	r24, 0xC8	; 200
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9a 8b       	std	Y+18, r25	; 0x12
    2734:	89 8b       	std	Y+17, r24	; 0x11
    2736:	89 89       	ldd	r24, Y+17	; 0x11
    2738:	9a 89       	ldd	r25, Y+18	; 0x12
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	f1 f7       	brne	.-4      	; 0x273a <main+0x662>
    273e:	9a 8b       	std	Y+18, r25	; 0x12
    2740:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2742:	8b 89       	ldd	r24, Y+19	; 0x13
    2744:	9c 89       	ldd	r25, Y+20	; 0x14
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	9c 8b       	std	Y+20, r25	; 0x14
    274a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274c:	8b 89       	ldd	r24, Y+19	; 0x13
    274e:	9c 89       	ldd	r25, Y+20	; 0x14
    2750:	00 97       	sbiw	r24, 0x00	; 0
    2752:	69 f7       	brne	.-38     	; 0x272e <main+0x656>
    2754:	14 c0       	rjmp	.+40     	; 0x277e <main+0x6a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2762:	dc 01       	movw	r26, r24
    2764:	cb 01       	movw	r24, r22
    2766:	9c 8b       	std	Y+20, r25	; 0x14
    2768:	8b 8b       	std	Y+19, r24	; 0x13
    276a:	8b 89       	ldd	r24, Y+19	; 0x13
    276c:	9c 89       	ldd	r25, Y+20	; 0x14
    276e:	98 8b       	std	Y+16, r25	; 0x10
    2770:	8f 87       	std	Y+15, r24	; 0x0f
    2772:	8f 85       	ldd	r24, Y+15	; 0x0f
    2774:	98 89       	ldd	r25, Y+16	; 0x10
    2776:	01 97       	sbiw	r24, 0x01	; 1
    2778:	f1 f7       	brne	.-4      	; 0x2776 <main+0x69e>
    277a:	98 8b       	std	Y+16, r25	; 0x10
    277c:	8f 87       	std	Y+15, r24	; 0x0f
			{
				pass[i] = UART_receiveByte();
			}

			/* Getting Old password from the External EEPROM */
			for(i = 5; i < 10; ++i)
    277e:	80 91 90 01 	lds	r24, 0x0190
    2782:	8f 5f       	subi	r24, 0xFF	; 255
    2784:	80 93 90 01 	sts	0x0190, r24
    2788:	80 91 90 01 	lds	r24, 0x0190
    278c:	8a 30       	cpi	r24, 0x0A	; 10
    278e:	08 f4       	brcc	.+2      	; 0x2792 <main+0x6ba>
    2790:	73 cf       	rjmp	.-282    	; 0x2678 <main+0x5a0>
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    2792:	10 92 90 01 	sts	0x0190, r1
    2796:	1c c0       	rjmp	.+56     	; 0x27d0 <main+0x6f8>
			{
				if(pass[i] != pass[i + 5])
    2798:	80 91 90 01 	lds	r24, 0x0190
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	fc 01       	movw	r30, r24
    27a2:	ea 57       	subi	r30, 0x7A	; 122
    27a4:	fe 4f       	sbci	r31, 0xFE	; 254
    27a6:	20 81       	ld	r18, Z
    27a8:	80 91 90 01 	lds	r24, 0x0190
    27ac:	88 2f       	mov	r24, r24
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	05 96       	adiw	r24, 0x05	; 5
    27b2:	fc 01       	movw	r30, r24
    27b4:	ea 57       	subi	r30, 0x7A	; 122
    27b6:	fe 4f       	sbci	r31, 0xFE	; 254
    27b8:	80 81       	ld	r24, Z
    27ba:	28 17       	cp	r18, r24
    27bc:	21 f0       	breq	.+8      	; 0x27c6 <main+0x6ee>
				{
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
    27be:	80 ef       	ldi	r24, 0xF0	; 240
    27c0:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
    27c4:	09 c0       	rjmp	.+18     	; 0x27d8 <main+0x700>
				status = EEPROM_readByte(start_address + i - 5, &pass[i]);
				_delay_ms(10);
			}

			/* Checking pass */
			for(i = 0; i < 5; ++i)
    27c6:	80 91 90 01 	lds	r24, 0x0190
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 90 01 	sts	0x0190, r24
    27d0:	80 91 90 01 	lds	r24, 0x0190
    27d4:	85 30       	cpi	r24, 0x05	; 5
    27d6:	00 f3       	brcs	.-64     	; 0x2798 <main+0x6c0>
					/* Sending HMI that pass is not matched */
					UART_sendByte(PASS_FAIL);
					break;
				}
			}
			if(i == 5)
    27d8:	80 91 90 01 	lds	r24, 0x0190
    27dc:	85 30       	cpi	r24, 0x05	; 5
    27de:	09 f0       	breq	.+2      	; 0x27e2 <main+0x70a>
    27e0:	4c cd       	rjmp	.-1384   	; 0x227a <main+0x1a2>
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);
    27e2:	80 ec       	ldi	r24, 0xC0	; 192
    27e4:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>

				/* Start Receiving New password */
				for(i = 0; i < 10; ++i)
    27e8:	10 92 90 01 	sts	0x0190, r1
    27ec:	0f c0       	rjmp	.+30     	; 0x280c <main+0x734>
				{
					pass[i] = UART_receiveByte();
    27ee:	80 91 90 01 	lds	r24, 0x0190
    27f2:	08 2f       	mov	r16, r24
    27f4:	10 e0       	ldi	r17, 0x00	; 0
    27f6:	0e 94 97 07 	call	0xf2e	; 0xf2e <UART_receiveByte>
    27fa:	f8 01       	movw	r30, r16
    27fc:	ea 57       	subi	r30, 0x7A	; 122
    27fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2800:	80 83       	st	Z, r24
			{
				/* Sending HMI that pass is correct */
				UART_sendByte(PASS_CORRECT);

				/* Start Receiving New password */
				for(i = 0; i < 10; ++i)
    2802:	80 91 90 01 	lds	r24, 0x0190
    2806:	8f 5f       	subi	r24, 0xFF	; 255
    2808:	80 93 90 01 	sts	0x0190, r24
    280c:	80 91 90 01 	lds	r24, 0x0190
    2810:	8a 30       	cpi	r24, 0x0A	; 10
    2812:	68 f3       	brcs	.-38     	; 0x27ee <main+0x716>
				{
					pass[i] = UART_receiveByte();
				}

				/* Checking pass */
				for(i = 0; i < 5; ++i)
    2814:	10 92 90 01 	sts	0x0190, r1
    2818:	1c c0       	rjmp	.+56     	; 0x2852 <main+0x77a>
				{
					if(pass[i] != pass[i + 5])
    281a:	80 91 90 01 	lds	r24, 0x0190
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	fc 01       	movw	r30, r24
    2824:	ea 57       	subi	r30, 0x7A	; 122
    2826:	fe 4f       	sbci	r31, 0xFE	; 254
    2828:	20 81       	ld	r18, Z
    282a:	80 91 90 01 	lds	r24, 0x0190
    282e:	88 2f       	mov	r24, r24
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	05 96       	adiw	r24, 0x05	; 5
    2834:	fc 01       	movw	r30, r24
    2836:	ea 57       	subi	r30, 0x7A	; 122
    2838:	fe 4f       	sbci	r31, 0xFE	; 254
    283a:	80 81       	ld	r24, Z
    283c:	28 17       	cp	r18, r24
    283e:	21 f0       	breq	.+8      	; 0x2848 <main+0x770>
					{
						/* Sending HMI that pass is not matched */
						UART_sendByte(PASS_FAIL);
    2840:	80 ef       	ldi	r24, 0xF0	; 240
    2842:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>
    2846:	09 c0       	rjmp	.+18     	; 0x285a <main+0x782>
				{
					pass[i] = UART_receiveByte();
				}

				/* Checking pass */
				for(i = 0; i < 5; ++i)
    2848:	80 91 90 01 	lds	r24, 0x0190
    284c:	8f 5f       	subi	r24, 0xFF	; 255
    284e:	80 93 90 01 	sts	0x0190, r24
    2852:	80 91 90 01 	lds	r24, 0x0190
    2856:	85 30       	cpi	r24, 0x05	; 5
    2858:	00 f3       	brcs	.-64     	; 0x281a <main+0x742>
						/* Sending HMI that pass is not matched */
						UART_sendByte(PASS_FAIL);
						break;
					}
				}
				if(i == 5)
    285a:	80 91 90 01 	lds	r24, 0x0190
    285e:	85 30       	cpi	r24, 0x05	; 5
    2860:	09 f0       	breq	.+2      	; 0x2864 <main+0x78c>
    2862:	0b cd       	rjmp	.-1514   	; 0x227a <main+0x1a2>
				{
					/* Sending HMI that pass is correct */
					UART_sendByte(PASS_CORRECT);
    2864:	80 ec       	ldi	r24, 0xC0	; 192
    2866:	0e 94 80 07 	call	0xf00	; 0xf00 <UART_sendByte>

					/* Storing new pass to the External EEPROM */
					for(i = 0; i < 5; ++i)
    286a:	10 92 90 01 	sts	0x0190, r1
    286e:	8b c0       	rjmp	.+278    	; 0x2986 <main+0x8ae>
					{
						status = EEPROM_writeByte(start_address + i, pass[i]);
    2870:	80 91 90 01 	lds	r24, 0x0190
    2874:	88 2f       	mov	r24, r24
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	05 96       	adiw	r24, 0x05	; 5
    287a:	ac 01       	movw	r20, r24
    287c:	80 91 90 01 	lds	r24, 0x0190
    2880:	88 2f       	mov	r24, r24
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	fc 01       	movw	r30, r24
    2886:	ea 57       	subi	r30, 0x7A	; 122
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	20 81       	ld	r18, Z
    288c:	ca 01       	movw	r24, r20
    288e:	62 2f       	mov	r22, r18
    2890:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <EEPROM_writeByte>
    2894:	80 93 84 01 	sts	0x0184, r24
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	a0 e2       	ldi	r26, 0x20	; 32
    289e:	b1 e4       	ldi	r27, 0x41	; 65
    28a0:	8b 87       	std	Y+11, r24	; 0x0b
    28a2:	9c 87       	std	Y+12, r25	; 0x0c
    28a4:	ad 87       	std	Y+13, r26	; 0x0d
    28a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4a ef       	ldi	r20, 0xFA	; 250
    28b6:	54 e4       	ldi	r21, 0x44	; 68
    28b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28bc:	dc 01       	movw	r26, r24
    28be:	cb 01       	movw	r24, r22
    28c0:	8f 83       	std	Y+7, r24	; 0x07
    28c2:	98 87       	std	Y+8, r25	; 0x08
    28c4:	a9 87       	std	Y+9, r26	; 0x09
    28c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e8       	ldi	r20, 0x80	; 128
    28d6:	5f e3       	ldi	r21, 0x3F	; 63
    28d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28dc:	88 23       	and	r24, r24
    28de:	2c f4       	brge	.+10     	; 0x28ea <main+0x812>
		__ticks = 1;
    28e0:	81 e0       	ldi	r24, 0x01	; 1
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	9e 83       	std	Y+6, r25	; 0x06
    28e6:	8d 83       	std	Y+5, r24	; 0x05
    28e8:	3f c0       	rjmp	.+126    	; 0x2968 <main+0x890>
	else if (__tmp > 65535)
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	3f ef       	ldi	r19, 0xFF	; 255
    28f6:	4f e7       	ldi	r20, 0x7F	; 127
    28f8:	57 e4       	ldi	r21, 0x47	; 71
    28fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28fe:	18 16       	cp	r1, r24
    2900:	4c f5       	brge	.+82     	; 0x2954 <main+0x87c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2902:	6b 85       	ldd	r22, Y+11	; 0x0b
    2904:	7c 85       	ldd	r23, Y+12	; 0x0c
    2906:	8d 85       	ldd	r24, Y+13	; 0x0d
    2908:	9e 85       	ldd	r25, Y+14	; 0x0e
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e2       	ldi	r20, 0x20	; 32
    2910:	51 e4       	ldi	r21, 0x41	; 65
    2912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2916:	dc 01       	movw	r26, r24
    2918:	cb 01       	movw	r24, r22
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
    292a:	0f c0       	rjmp	.+30     	; 0x294a <main+0x872>
    292c:	88 ec       	ldi	r24, 0xC8	; 200
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	9c 83       	std	Y+4, r25	; 0x04
    2932:	8b 83       	std	Y+3, r24	; 0x03
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	01 97       	sbiw	r24, 0x01	; 1
    293a:	f1 f7       	brne	.-4      	; 0x2938 <main+0x860>
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2940:	8d 81       	ldd	r24, Y+5	; 0x05
    2942:	9e 81       	ldd	r25, Y+6	; 0x06
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	9e 83       	std	Y+6, r25	; 0x06
    2948:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    294a:	8d 81       	ldd	r24, Y+5	; 0x05
    294c:	9e 81       	ldd	r25, Y+6	; 0x06
    294e:	00 97       	sbiw	r24, 0x00	; 0
    2950:	69 f7       	brne	.-38     	; 0x292c <main+0x854>
    2952:	14 c0       	rjmp	.+40     	; 0x297c <main+0x8a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2954:	6f 81       	ldd	r22, Y+7	; 0x07
    2956:	78 85       	ldd	r23, Y+8	; 0x08
    2958:	89 85       	ldd	r24, Y+9	; 0x09
    295a:	9a 85       	ldd	r25, Y+10	; 0x0a
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	8d 81       	ldd	r24, Y+5	; 0x05
    296a:	9e 81       	ldd	r25, Y+6	; 0x06
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	f1 f7       	brne	.-4      	; 0x2974 <main+0x89c>
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Sending HMI that pass is correct */
					UART_sendByte(PASS_CORRECT);

					/* Storing new pass to the External EEPROM */
					for(i = 0; i < 5; ++i)
    297c:	80 91 90 01 	lds	r24, 0x0190
    2980:	8f 5f       	subi	r24, 0xFF	; 255
    2982:	80 93 90 01 	sts	0x0190, r24
    2986:	80 91 90 01 	lds	r24, 0x0190
    298a:	85 30       	cpi	r24, 0x05	; 5
    298c:	08 f4       	brcc	.+2      	; 0x2990 <main+0x8b8>
    298e:	70 cf       	rjmp	.-288    	; 0x2870 <main+0x798>
    2990:	74 cc       	rjmp	.-1816   	; 0x227a <main+0x1a2>
						_delay_ms(10);
					}
				}
			}
		}
		else if(PROG_status == ALARM_ON)
    2992:	80 91 83 01 	lds	r24, 0x0183
    2996:	82 3f       	cpi	r24, 0xF2	; 242
    2998:	09 f0       	breq	.+2      	; 0x299c <main+0x8c4>
    299a:	6f cc       	rjmp	.-1826   	; 0x227a <main+0x1a2>
		{
			/* Turning Alarm ON */
			Buzzer_ON();
    299c:	0e 94 3c 10 	call	0x2078	; 0x2078 <Buzzer_ON>
			counter = 0;
    29a0:	10 92 82 01 	sts	0x0182, r1
			while(counter < 60);
    29a4:	80 91 82 01 	lds	r24, 0x0182
    29a8:	8c 33       	cpi	r24, 0x3C	; 60
    29aa:	e0 f3       	brcs	.-8      	; 0x29a4 <main+0x8cc>
			Buzzer_OFF();
    29ac:	0e 94 48 10 	call	0x2090	; 0x2090 <Buzzer_OFF>
    29b0:	64 cc       	rjmp	.-1848   	; 0x227a <main+0x1a2>

000029b2 <__udivmodsi4>:
    29b2:	a1 e2       	ldi	r26, 0x21	; 33
    29b4:	1a 2e       	mov	r1, r26
    29b6:	aa 1b       	sub	r26, r26
    29b8:	bb 1b       	sub	r27, r27
    29ba:	fd 01       	movw	r30, r26
    29bc:	0d c0       	rjmp	.+26     	; 0x29d8 <__udivmodsi4_ep>

000029be <__udivmodsi4_loop>:
    29be:	aa 1f       	adc	r26, r26
    29c0:	bb 1f       	adc	r27, r27
    29c2:	ee 1f       	adc	r30, r30
    29c4:	ff 1f       	adc	r31, r31
    29c6:	a2 17       	cp	r26, r18
    29c8:	b3 07       	cpc	r27, r19
    29ca:	e4 07       	cpc	r30, r20
    29cc:	f5 07       	cpc	r31, r21
    29ce:	20 f0       	brcs	.+8      	; 0x29d8 <__udivmodsi4_ep>
    29d0:	a2 1b       	sub	r26, r18
    29d2:	b3 0b       	sbc	r27, r19
    29d4:	e4 0b       	sbc	r30, r20
    29d6:	f5 0b       	sbc	r31, r21

000029d8 <__udivmodsi4_ep>:
    29d8:	66 1f       	adc	r22, r22
    29da:	77 1f       	adc	r23, r23
    29dc:	88 1f       	adc	r24, r24
    29de:	99 1f       	adc	r25, r25
    29e0:	1a 94       	dec	r1
    29e2:	69 f7       	brne	.-38     	; 0x29be <__udivmodsi4_loop>
    29e4:	60 95       	com	r22
    29e6:	70 95       	com	r23
    29e8:	80 95       	com	r24
    29ea:	90 95       	com	r25
    29ec:	9b 01       	movw	r18, r22
    29ee:	ac 01       	movw	r20, r24
    29f0:	bd 01       	movw	r22, r26
    29f2:	cf 01       	movw	r24, r30
    29f4:	08 95       	ret

000029f6 <__prologue_saves__>:
    29f6:	2f 92       	push	r2
    29f8:	3f 92       	push	r3
    29fa:	4f 92       	push	r4
    29fc:	5f 92       	push	r5
    29fe:	6f 92       	push	r6
    2a00:	7f 92       	push	r7
    2a02:	8f 92       	push	r8
    2a04:	9f 92       	push	r9
    2a06:	af 92       	push	r10
    2a08:	bf 92       	push	r11
    2a0a:	cf 92       	push	r12
    2a0c:	df 92       	push	r13
    2a0e:	ef 92       	push	r14
    2a10:	ff 92       	push	r15
    2a12:	0f 93       	push	r16
    2a14:	1f 93       	push	r17
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	ca 1b       	sub	r28, r26
    2a20:	db 0b       	sbc	r29, r27
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	09 94       	ijmp

00002a2e <__epilogue_restores__>:
    2a2e:	2a 88       	ldd	r2, Y+18	; 0x12
    2a30:	39 88       	ldd	r3, Y+17	; 0x11
    2a32:	48 88       	ldd	r4, Y+16	; 0x10
    2a34:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a36:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a38:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a40:	b9 84       	ldd	r11, Y+9	; 0x09
    2a42:	c8 84       	ldd	r12, Y+8	; 0x08
    2a44:	df 80       	ldd	r13, Y+7	; 0x07
    2a46:	ee 80       	ldd	r14, Y+6	; 0x06
    2a48:	fd 80       	ldd	r15, Y+5	; 0x05
    2a4a:	0c 81       	ldd	r16, Y+4	; 0x04
    2a4c:	1b 81       	ldd	r17, Y+3	; 0x03
    2a4e:	aa 81       	ldd	r26, Y+2	; 0x02
    2a50:	b9 81       	ldd	r27, Y+1	; 0x01
    2a52:	ce 0f       	add	r28, r30
    2a54:	d1 1d       	adc	r29, r1
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	ed 01       	movw	r28, r26
    2a62:	08 95       	ret

00002a64 <_exit>:
    2a64:	f8 94       	cli

00002a66 <__stop_program>:
    2a66:	ff cf       	rjmp	.-2      	; 0x2a66 <__stop_program>
